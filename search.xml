<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《what exactly is the meta-universe?》</title>
      <link href="/posts/40249/"/>
      <url>/posts/40249/</url>
      
        <content type="html"><![CDATA[<h1>《what exactly is the meta-universe?》</h1><blockquote><p>本篇文章为小张的计算机英语结课作业，视频素材来自YouTube，背景音乐《Talking Dirty》</p><ul><li><a href="https://www.youtube.com/watch?v=Uvufun6xer8&t=24s">The Metaverse and How We’ll Build It Together – Zuckerberg - YouTube</a></li></ul></blockquote><iframe src="//player.bilibili.com/player.html?aid=768810447&bvid=BV16r4y187Rm&cid=714617641&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="800px" height="600px"> </iframe><blockquote><p>METAVERSE is a word that’s been popping up a lot on our social platforms lately. </p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">元宇宙，METAVERSE最近这个词经常出现在我们的社交平台中。</span></span></blockquote><blockquote><p>Faceboook changed its name to Meta, Tencent, Microsoft and other giants all entered meta-universe, stars held concerts in meta-universe, Jj Lin bought land in meta-universe, NFT sold at sky-high prices.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">Faceboook改名Meta，腾讯微软等巨头全都进军元宇宙，明星在元宇宙开演唱会，林俊杰在元宇宙买地，NFT天价出售。</span></span></blockquote><blockquote><p>All the media is covering it, all the companies are moving in, and suddenly it’s like half the world is involved in the meta-universe, so what exactly is the meta-universe? </p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">各大媒体都在报道，各大公司都在进军，突然间，好像全球有半个世界都跟元宇宙扯上了关系，那么到底什么才是元宇宙呢？</span></span></blockquote><blockquote><p>In fact, most people are still confused when they hear about the metasomes. In this video, Zuckerberg shows us what the metasomes will look like at Facebook and how it will change our lives.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">其实绝大多数人听到元宇宙的时候，还是一头雾水，在这个视频中，Zuckerberg为大家演示了在Facebook的规划及未来的元宇宙究竟是一个什么样的，它究竟会给我们生活带来什么样的改变。</span></span></blockquote><blockquote><p>The meta-universe, in my opinion, is the physical world as we know it now and beyond the universe, which is a virtual world parallel to the physical world as we know it now, and if you still find that hard to understand, you can think back to the games you used to like to play.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">在我看来，所谓的元宇宙，就是现在的物理世界而超越宇宙，也就是我们现在认知的物理世界平行中的一个虚拟世界，如果你还是觉得难理解的话，你可以回想一下你以前喜欢打的游戏。</span></span></blockquote><blockquote><p>and in the meta-universe, First played in the past these two-dimensional game in your mind to think of it as a three-dimensional and then you can choose their own identity.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">在元宇宙中，首先把以前打过的这些2D游戏在脑海中把它想象成3D然后你就可以任意选择自己的身份，对自己的外表性格都可以任意改变。</span></span></blockquote><blockquote><p>can arbitrarily change for their own appearance character, then according to your own set into the virtual world, communicate with any people in the world, it feels like a real experience, or face to face.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">之后就根据你自己设定好的身份进到这个虚拟世界中，与任何一个世界里的人进行交流，感觉就像面对面或的一个真实体验。</span></span></blockquote><blockquote><p>In fact, virtual games are only part of the future meta-universe.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">虚拟游戏其实只是未来元宇宙的一部分而已。</span></span></blockquote><blockquote><p>In addition to playing large-scale games, we can also work, study, make friends and travel in the meta-universe.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">除了可以在元宇宙当中玩大型游戏以外，我们还能在元宇宙当中进行工作，学习，交友及旅游等等。</span></span></blockquote><blockquote><p>Video conference in the future, it is not we now use video conference so simple, if you use the HORIZON the massively multiplayer online virtual reality software, you can in the very realistic meeting communicate through a virtual character.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">将来的视频会议就不是我们现在使用的视频会议那么简单了，如果你用HORIZON这款大型多人线上虚拟现实软件，大家可以在非常逼真的会议中通过虚拟角色进行交流。</span></span></blockquote><blockquote><p>although our meeting in their own home in the future, but you can enter into a very real virtual conference field.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">将来我们的开会虽然在自己家里，但你可以进入到一个感觉非常真实的虚拟会议场中。</span></span></blockquote><blockquote><p>Then you can have a face-to-face conversation with your colleague or friend as if they’re sitting right next to you, and it’s not future technology, it’s happening right now. </p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">然后可以和你的同事或者好友进行面对面交流，彷佛他就坐在你旁边，而且这不是未来科技，而是现在已经实现了。</span></span></blockquote><blockquote><p>In addition to work, we can also shopping, we usually shopping is through taobao or Jingdong , but the meta-universe to temporary, you don’t need to go out to enjoy the real shopping experience.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">除了工作，我们还可以购物，我们通常购物都是通过淘宝或者京东下单，可是再过不久的元宇宙来临时，你不需要出门就可以享受真实逛商场的体验。</span></span></blockquote><blockquote><p>In addition to shopping, if you want to listen to the concert, drama, or speech, you don’t need to go to the scene would have been at home in the whole process of the real participation.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">除了购物以外，如果你想听演唱会、话剧、或者演讲，你都不需要去现场就能在家真实的全程参与了。</span></span></blockquote><blockquote><p>The current technology has reached about 60% of the on-site experience, but to achieve the perfect realization of about 90% of the specific needs a lot of hardware technology optimization, for example, VR glasses are indispensable, how to make glasses more portable, cheaper to replace our current mobile phones. </p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">以目前技术来说已达到大概60%左右的现场体验感，但要做到具体90%左右的完美实现还需要大量硬件技术的优化， 比如说不可缺乏的VR眼镜，要如何把眼镜做的更轻便，价格更便宜来取代我们现在的手机。</span></span></blockquote><blockquote><p>In short, the meta-universe is a virtual world tightly connected to reality.</p><span class="hide-inline"><button type="button" class="hide-button" style="">Click translate  </button><span class="hide-content">简而言之，元宇宙就是一个和现实紧密连接的虚拟世界。</span></span></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与技术接口随堂练习</title>
      <link href="/posts/20256/"/>
      <url>/posts/20256/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0-1.jpg" alt="微机原理与技术接口随堂练习-1"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0-2.jpg" alt="微机原理与技术接口随堂练习-2"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E9%9A%8F%E5%A0%82%E7%BB%83%E4%B9%A0-3.jpg" alt="微机原理与技术接口随堂练习-3"></p>]]></content>
      
      
      <categories>
          
          <category> 微机原理与技术接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与技术接口课后作业</title>
      <link href="/posts/2723/"/>
      <url>/posts/2723/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章课后作业"><a href="#第二章课后作业" class="headerlink" title="第二章课后作业"></a>第二章课后作业</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-1.jpg" alt="微机原理与技术接口课后作业-1"></p><h1 id="第三章课后作业"><a href="#第三章课后作业" class="headerlink" title="第三章课后作业"></a>第三章课后作业</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-2.jpg" alt="微机原理与技术接口课后作业-2"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-3.jpg" alt="微机原理与技术接口课后作业-3"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-4.jpg" alt="微机原理与技术接口课后作业-4"></p><h1 id="第四章课后作业"><a href="#第四章课后作业" class="headerlink" title="第四章课后作业"></a>第四章课后作业</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-5.jpg" alt="微机原理与技术接口课后作业-5"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A-6.jpg" alt="微机原理与技术接口课后作业-6"></p>]]></content>
      
      
      <categories>
          
          <category> 微机原理与技术接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与技术接口笔记</title>
      <link href="/posts/16919/"/>
      <url>/posts/16919/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-01.jpg" alt="微机原理与技术接口笔记-01"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-02.jpg" alt="微机原理与技术接口笔记-02"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-03.jpg" alt="微机原理与技术接口笔记-03"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-04.jpg" alt="微机原理与技术接口笔记-04"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-05.jpg" alt="微机原理与技术接口笔记-05"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-06.jpg" alt="微机原理与技术接口笔记-06"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-07.jpg" alt="微机原理与技术接口笔记-07"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-08.jpg" alt="微机原理与技术接口笔记-08"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-09.jpg" alt="微机原理与技术接口笔记-09"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-10.jpg" alt="微机原理与技术接口笔记-10"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-11.jpg" alt="微机原理与技术接口笔记-11"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-12.jpg" alt="微机原理与技术接口笔记-12"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-13.jpg" alt="微机原理与技术接口笔记-13"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-14.jpg" alt="微机原理与技术接口笔记-14"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-15.jpg" alt="微机原理与技术接口笔记-15"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-16.jpg" alt="微机原理与技术接口笔记-16"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-17.jpg" alt="微机原理与技术接口笔记-17"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-18.jpg" alt="微机原理与技术接口笔记-18"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-19.jpg" alt="微机原理与技术接口笔记-19"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-20.jpg" alt="微机原理与技术接口笔记-20"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-21.jpg" alt="微机原理与技术接口笔记-21"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-22.jpg" alt="微机原理与技术接口笔记-22"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-23.jpg" alt="微机原理与技术接口笔记-23"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-24.jpg" alt="微机原理与技术接口笔记-24"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-25.jpg" alt="微机原理与技术接口笔记-25"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-26.jpg" alt="微机原理与技术接口笔记-26"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%8E%A5%E5%8F%A3%E7%AC%94%E8%AE%B0-27.jpg" alt="微机原理与技术接口笔记-27"></p>]]></content>
      
      
      <categories>
          
          <category> 微机原理与技术接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与技术接口 实验一 输入输出实验</title>
      <link href="/posts/20381/"/>
      <url>/posts/20381/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.27 早十 实验一</h1><h1 align="center">实验一 输入输出实验</h1><h2 id="1-1-实验要求"><a href="#1-1-实验要求" class="headerlink" title="1.1 实验要求"></a>1.1 实验要求</h2><blockquote><p>熟悉emu8086仿真系统，实现控制台输入输出，设计并单步调试实现一位十进制数的加法运算(屏幕效果为3+2&#x3D;5,红色为输入其他为自动输出)</p></blockquote><h2 id="1-2-理论分析"><a href="#1-2-理论分析" class="headerlink" title="1.2 理论分析"></a>1.2 理论分析</h2><blockquote><p>调用DOS中AH&#x3D;1输入字符，存入AL，返回值是ASCII码，所以要借用与运算将高位清零，例如字符3的ASCII码为33H，和FH与运算得到3H</p><p>调用DOS中AH&#x3D;2输出字符，重点注意DL&#x3D;要输出的字符，AL&#x3D;DL。这会修改第一次在控制台输入的被加数，所以暂存在DH中</p><p>加数2即32H没有做与运算，因为如果这里做了与运算，计算完之后，在最后输出时输出的是05H对应的字符♣，还需要再和FH与运算一次才是35H即5</p></blockquote><h2 id="1-3-汇编语言"><a href="#1-3-汇编语言" class="headerlink" title="1.3 汇编语言"></a>1.3 汇编语言</h2><blockquote><p><a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/Microcomputer%20principle/Experient">源文件</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV AH,1    ;AH=1控制台输入,返回值是AL=字符的ASCII</span><br><span class="line">INT 21H     ;调用DOS</span><br><span class="line">AND AL,15   ;与运算,将高位清零,假设输入3D=33H,将高位清零</span><br><span class="line">MOV DH,AL   ;AL存到DH,Note:AL=DL,05行AL的值变为&#x27;+&#x27;所以要借用DH暂存</span><br><span class="line">MOV DL,&#x27;+&#x27;  ;DL=要输出的ASCII</span><br><span class="line">MOV AH,2    ;AH=2控制台输出</span><br><span class="line">INT 21H</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H     ;为什么第二次没有做ADN？因为如果这里与运算后,最后还要与15,避免重复操作</span><br><span class="line">ADD DH,AL   ;为什么是DH+AL而不是AL+DH,原因和第四行相同,下一行DL的值变为&#x27;=&#x27;</span><br><span class="line">MOV DL,&#x27;=&#x27;</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL,DH</span><br><span class="line">INT 21H     ;12行AH=2所以14行不需要重复定义 </span><br><span class="line">HLT         ;停机指令 </span><br><span class="line">;Note:AL=DL!!!</span><br></pre></td></tr></table></figure><h2 id="1-4-实验结果"><a href="#1-4-实验结果" class="headerlink" title="1.4 实验结果"></a>1.4 实验结果</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF01.gif" alt="微机原理与接口技术01"></p><blockquote><p>思考内容</p><p>1.输入输出数据和计算用数据的区别<br>从键盘上输入和从屏幕上输出的都是字符，返回值实际是ASCII码，与计算用的数据实间相差30H，所以一个数从屏幕上输入时转换成数字-30H，输出时将+30H，或者输入时输出时都进行一次与运算</p><p>2.单字符输入输出和串输入输出的不同<br>单字符的输入使用1号功能键，输出通过2号功能调用，且待显示字符送给DL寄存器；串输入使用0A功能，输出通过9号功能调用，DS:DX指向待显示字符串，且字符串必须以“$”结束</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微机原理与技术接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机原理 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验六 三维图形修改器的综合应用</title>
      <link href="/posts/45649/"/>
      <url>/posts/45649/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.18 下午 实验五</h1><h2 align="center">实验六 三维图形修改器的综合应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用三维图形修改器的操作方法制作一盘水果</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient&#x2F;Experiment 6 fruit plate.max)</p></blockquote><blockquote><p>1.用直线绘制一个闭合图形，利用车削得到盘子</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF120.png" alt="三维建模技术120"></p><blockquote><p>2.绘制一个球体，利用修改器中” FFD圆柱体”在顶点模式下，对中间的点进行缩放</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF121.png" alt="三维建模技术121"></p><blockquote><p>3.利用修改器中的锥化，得到一个上窄下宽的球体</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF122.png" alt="三维建模技术122"></p><blockquote><p>4.绘制苹果柄，首先绘制一个圆柱体，通过修改器中的扭曲和弯曲得到如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF123.png" alt="三维建模技术123"></p><blockquote><p>5.调整位置，得到一个完整的苹果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF124.png" alt="三维建模技术124"></p><blockquote><p>6.同理，绘制梨，首先绘制一个球体，利用修改器中” FFD圆柱体”在顶点模式下，对中间的点进行缩放，利用修改器中的锥化，得到一个上窄下宽的球体，复制一个柄，调整位置得到一个完整的梨</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF125.png" alt="三维建模技术125"></p><blockquote><p>7.绘制香蕉，首先绘制一个五棱柱，利用修改器中的弯曲，使棱柱弯曲</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF126.png" alt="三维建模技术126"></p><blockquote><p>8.利用修改器中的锥化，调整上下宽度，并进行网格平滑。之后利用编辑多边形中的倒角制作香蕉头部</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF127.png" alt="三维建模技术127"></p><blockquote><p>9.绘制一个圆柱体，对其进行锥化操作。复制出五个香蕉，调整摆放位置，得到一把香蕉</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF128.png" alt="三维建模技术128"></p><blockquote><p>10.分别复制出几个水果，调整香蕉、苹果、梨、盘子的位置，得到最终模型</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF129.png" alt="三维建模技术129"></p><h1>三、效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF129.png" alt="三维建模技术129"></p><h1>四、小结</h1><blockquote><p>步骤8中香蕉柄得不到想要的效果，一定要先做网格平滑再做编辑多边形中的倒角操作，因为如果先做香蕉柄的话，之后的网格平滑也会对香蕉柄进行平滑操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/posts/41646/"/>
      <url>/posts/41646/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github 博客 butterfly 主题 搭建过程【整理】</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>仅是分享一下搭建过程，一定要写一点功能就跑一边代码，我后面找不见报错真的令人头大！最好用webstorm，回撤不行可以历史回滚</p></blockquote><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><blockquote><ol><li><a href="https://nodejs.org/zh-cn/download/">Node.js 官网</a>：让JAVAscript成为与PHP、Python、Perl、Ruby等服务器语言平起平坐的脚本语言</li><li><a href="https://git-scm.com/download/win">Git 官网</a>：开源分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</li><li><a href="https://blog.csdn.net/qq_41798899/article/details/120133809?ops_request_misc=%7B%22request_id%22:%22165113887216782425143025%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165113887216782425143025&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-2-120133809.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=github%E6%B3%A8%E5%86%8C&spm=1018.2226.3001.4187">注册一个GitHub账号</a>，专门找了一篇含报错及解决办法的，注册名、密码、邮箱记好</li></ol></blockquote><p>这个时候可能有小伙伴要说了，这都是啥呢怎么都是汉字组在一起又看不懂了？我没学过JAVAscript，我电脑貌似装过但是不记得了…没关系！本篇从小白讲起！</p><blockquote><p>两个软件安装完之后或不记得有没有，<kbd>win</kbd>+<kbd>R</kbd>输入cmd打开命令行窗口，依次输入三条命令</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><blockquote><p>如果和我的一样显示出来版本号，那就是之前安装过，如果没有安装过，去官网下载安装包傻瓜式安装即可(C盘小的同学记得换盘符！)</p></blockquote><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Users\<span class="number">86158</span>&gt;node <span class="literal">-v</span></span><br><span class="line">v14.<span class="number">15.1</span></span><br><span class="line"></span><br><span class="line">C:\Users\<span class="number">86158</span>&gt;npm <span class="literal">-v</span></span><br><span class="line"><span class="number">6.14</span>.<span class="number">8</span></span><br><span class="line"></span><br><span class="line">C:\Users\<span class="number">86158</span>&gt;git <span class="literal">--version</span></span><br><span class="line">git version <span class="number">2.34</span>.<span class="number">1</span>.windows.<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>接着在命令行中安装Hexo(警告<code>WARN</code>不影响)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><blockquote><p>同样检查一下安装成功了没有，运行命令会弹出来好多版本号就是成功了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><blockquote><p>第一次下载git需要配置，任意一个地方<code>右击→Git Brush Here</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name GC-ZF  #名称</span><br><span class="line">git config --global user.email 1310446718@qq.com   #邮箱</span><br></pre></td></tr></table></figure><h1 id="二、配置仓库"><a href="#二、配置仓库" class="headerlink" title="二、配置仓库"></a>二、配置仓库</h1><h2 id="2-1-新建仓库"><a href="#2-1-新建仓库" class="headerlink" title="2.1 新建仓库"></a>2.1 新建仓库</h2><blockquote><p>为什么要注册一个GitHub，建一个仓库？我们要利用Github作为服务器去存储我们的内容，以便别人去访问</p></blockquote><blockquote><p>新建一个仓库，注意为了让别人可以访问到仓库的名字一定一定是<code>注册名.github.io</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA01.png" alt="Hexo博客搭建01"></p><h2 id="2-2-关联仓库"><a href="#2-2-关联仓库" class="headerlink" title="2.2 关联仓库"></a>2.2 关联仓库</h2><blockquote><p>接下来将Github与电脑进行绑定。每次把文件上传到仓库需要登录，十分麻烦，所以利用ssh就起到一个记住密码的作用，一劳永逸</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA02.png" alt="Hexo博客搭建02"></p><blockquote><p>在任意文件夹<code>右击鼠标→Git Bash Here</code>，输完命令连续按三次回车</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;用户名&quot;</span> -f <span class="string">&quot;id_rsa_github&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA03.png" alt="Hexo博客搭建03"></p><blockquote><p>执行完命令后 <code>C:\Users\用户名\.ssh</code> 下多了俩文件，生成的<code>id_rsa_github.pub</code>以记事本打开，<kbd>ctrl</kbd>+<kbd>A</kbd>全选并<kbd>ctrl</kbd>+<kbd>C</kbd>复制文本内容，将公钥添加到github中，Title自定义</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA04.png" alt="Hexo博客搭建04"></p><blockquote><p>检查是否绑定成功，注意区分大小写！输入<code>yes</code>弹出<code>Hi 用户名！</code>才算成功</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA05.png" alt="Hexo博客搭建05"></p><h1 id="三、本地博客"><a href="#三、本地博客" class="headerlink" title="三、本地博客"></a>三、本地博客</h1><blockquote><p>现在就要开始制作我们的博客啦！既然博客要放在我们的电脑本地，自己选一个合适的地方新建文件夹，我新建一个Blog，在Blog文件夹中<code>右击鼠标→Git Bash Here</code>，输入(Hexo帮咱们搭好的框架，拿着直接用就行了，关于美化第四点有)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init<span class="comment">#初始化hexo博客</span></span><br></pre></td></tr></table></figure><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面(第四步完就有了)</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><blockquote><p>之后启动服务器，并在浏览器网址输入<code>localhost:4000</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s<span class="comment">#启动服务</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA06.png" alt="Hexo博客搭建06"></p><blockquote><p>localhost是本地网络，互联网并访问不到，这里我们只是测试一下，<kbd>ctrl</kbd>+<kbd>C</kbd>关闭本地服务器</p></blockquote><h1 id="四、发布博客到互联网"><a href="#四、发布博客到互联网" class="headerlink" title="四、发布博客到互联网"></a>四、发布博客到互联网</h1><h2 id="配置Github仓库"><a href="#配置Github仓库" class="headerlink" title="配置Github仓库"></a>配置Github仓库</h2><blockquote><p> 在Blog中找到并打开<code>_config.yml</code>(配置文件)，打开方式随便一个编译器都可以，最下面修改deploy，注意一定是英文冒号，并且冒号后跟一个空格，repository地址在GitHub中</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA07.png" alt="Hexo博客搭建07"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/GC-ZF/GC-ZF.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><blockquote><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令，这样你才能用命令部署到GitHub(即下面两步)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>生成网站静态文件到默认设置的 public 文件夹</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">g</span><span class="comment">#生成页面，hexo generate的缩写</span></span><br></pre></td></tr></table></figure><blockquote><p>上传本地文件到仓库，如果出现<code>FATAL</code>是网络问题，开个梯子之类</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA08.png" alt="Hexo博客搭建08"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d<span class="comment">#上传本地文件到仓库，hexo deploy的缩写</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA09.png" alt="Hexo博客搭建09"></p><blockquote><p>现在我们就可以在任意网络下在浏览器访问<code>用户名.github.io</code>了</p></blockquote><h2 id="如何发布文章？"><a href="#如何发布文章？" class="headerlink" title="如何发布文章？"></a>如何发布文章？</h2><blockquote><p>首先使用命令新建<code>.md</code>的文件，两个命令二选一(不支持手动新建)</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">n</span> <span class="string">&quot;文件名字&quot;</span><span class="comment">#hexo new &quot;文件名字&quot;的缩写</span></span><br></pre></td></tr></table></figure><blockquote><p><code>source\_posts</code>下找到新建的文件，发现他已经帮我们写入了一些东西，其实就是显示在网页里的文章标题、日期、标签(模板修改<code>\scaffolds\post</code>)</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我的模板</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">updated:</span> </span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;title date必须值&#x27;</span><span class="comment"># 文章描述，我改默认模板提醒自己这俩是必须参数</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">&#x27;https://picsum.photos/1920/942&#x27;</span><span class="comment"># 随机占位图,挺好用的,使用方法picsum.photos官网</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">&#x27;https://picsum.photos/470/315&#x27;</span></span><br><span class="line"><span class="attr">sticky:</span> <span class="comment"># 置顶 值越大优先权越高</span></span><br></pre></td></tr></table></figure><blockquote><p>写好之后，依次执行</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">g</span><span class="comment">#生成页面</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span><span class="comment">#上传本地文件到仓库</span></span><br></pre></td></tr></table></figure><blockquote><p>这里小补充一下，因为大部分同学既然有搭博客的想法那应该都知道markdown，没有markdown编辑器的同学，<a href="https://typoraio.cn/">Typora 官方中文站</a>，下载一下，关于语法网上也大把大把</p></blockquote><h1 id="五、Butterfly-主题"><a href="#五、Butterfly-主题" class="headerlink" title="五、Butterfly 主题"></a>五、Butterfly 主题</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1aV411p7Bc/?spm_id_from=333.788">使用Hexo搭建个人博客手摸手教学(1)|前言_哔哩哔哩_bilibili</a>，第五步可以直接看这个up主，已经足够详细了</p></blockquote><blockquote><p>上面一二三四步，终于来到了美化！hexo给咱们写好了一堆框架，给咱们了好多衣服裤子，怎么穿的好看就看咱们怎么搭配了，这里以<code>hexo-theme-butterfly</code>为模板为例子，以下三个链接是官方文档，仓库，咱们直接跟着文档走(至于为什么用这个取决于学长<a href="https://yangchaoyi.vip/posts/520520/">超逸の博客</a>，我就是看了他的博客才有了搭博客的想法，而且他有一些的魔改步骤(如果没学过html基础，一定要仔仔细细跟着他的魔改走)，可以学一学<a href="https://yangchaoyi.vip/posts/520520/"> 超逸の博客 </a></p></blockquote><ul><li><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p></li><li><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/master">jerryc127&#x2F;hexo-theme-butterfly at master (github.com)</a></p></li><li><p><a href="https://gitee.com/immyw/hexo-theme-butterfly">hexo-theme-butterfly: 🦋 A Hexo Theme: Butterfly (gitee.com)</a></p></li></ul><blockquote><p>在Hexo(我之前建的Blog)目录下，<code>右击→Git Brash Here</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><blockquote><p>修改 <code>_config.yml</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>安装依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><blockquote><p>依次执行，<code>hexo clean hexo g hexo s</code>三件套部署本地，每次改完<code>yml</code>配置文件都需要重新运行</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g<span class="comment">#生成页面</span></span><br><span class="line">hexo s<span class="comment">#打开本地看下设置是否成功</span></span><br></pre></td></tr></table></figure><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><p>为了減少升级主题带来的不便(选做)：把theme文件夹中的 <code>_config.yml</code> 复制到 Hexo 根目录下，同重命名为<code>_config.butterfly.yml</code></p><h2 id="设置个人资料"><a href="#设置个人资料" class="headerlink" title="设置个人资料"></a>设置个人资料</h2><blockquote><p>根目录下<code>_config.yml</code></p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">张时贰</span>        <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;小张同学&#x27;</span>       <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;环转码，热爱敲代码的小张！&#x27;</span>     <span class="comment">#个签</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客,张时贰</span> <span class="comment">#浏览器搜索关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">张时贰</span>       <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>     <span class="comment">#语言en/zh-CN/zh-TW</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span><span class="comment">#时区</span></span><br></pre></td></tr></table></figure><h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><blockquote><p>为我们的博客文章添加标签页</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">tags</span> <span class="comment">#新建标签页</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">tags</span> <span class="string">&quot;name&quot;</span> <span class="comment">#新建标签页,带命名</span></span><br></pre></td></tr></table></figure><blockquote><p>生成<code>source/tags/index.md</code>，title自定义，其它不变。因为还没搭完，先用这个访问<code>http://localhost:4000/tags/</code></p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签页</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-04-29 18:08:39</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">&#x27;https://picsum.photos/1920/942&#x27;</span><span class="comment">#封面</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><blockquote><p>为我们的博客文章添加分类页</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure><blockquote><p>生成<code>source/categories/index.md</code>，title自定义，其它不变。同样先用这个访问<code>http://localhost:4000/categories/</code></p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-04-29 18:16:23</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">&#x27;https://picsum.photos/1920/942&#x27;</span><span class="comment">#封面</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="友情连接"><a href="#友情连接" class="headerlink" title="友情连接"></a>友情连接</h2><blockquote><p>添加友情链接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><blockquote><p>生成<code>source/link/index.md</code>，title自定义，同样先用这个访问<code>http://localhost:4000/link/</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: link</span><br><span class="line">date: 2022-04-29 18:22:47</span><br><span class="line">type: &quot;link&quot;</span><br><span class="line">top_img: &#x27;https://picsum.photos/1920/942&#x27;#封面</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>在Hexo博客目录中的<code>source/_data</code>（如果没有 _data 文件夹，请自行创建），创建一个文件<code>link.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平臺</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平臺</span></span><br></pre></td></tr></table></figure><h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><blockquote><p>在<code>_config.butterfly.yml</code>大概132行，开启404界面，同样访问<code>http://localhost:4000/404</code></p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;Page Not Found&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><blockquote><p>修改主题配置文件<code>_config.butterfly.yml</code>，先后顺序、中文命名自由设置</p><p>必须是 &#x2F;xxx&#x2F;，后面||分开，然后写图标名</p><p>如果不希望显示图标，图标名可不写</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">链接||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><blockquote><p>默认子目录是展开的，如果你想要隐藏，在子目录里添加 hide </p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">List||fas</span> <span class="string">fa-list||hide:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">  <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br></pre></td></tr></table></figure><hr><hr><blockquote><p>以下是<a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安裝文檔(三) 主題配置-1 | Butterfly</a></p></blockquote><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><blockquote><p>代码块设置均在<code>_config.butterfly.yml</code>32-40行，大概解释一下</p></blockquote><blockquote><p>主体设置，可选值注释里</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="string">light</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br></pre></td></tr></table></figure><blockquote><p>代码复制按钮</p><ul><li>true开</li><li>false关</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>展示代码语言</p><ul><li>true开</li><li>false关</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>代码展开设置</p><ul><li>true代码不展开，需要点击<code>&gt;</code></li><li>false代码展开，保留<code>&gt;</code></li><li>none不显示<code>&gt;</code></li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span> <span class="comment">#代码框展开</span></span><br></pre></td></tr></table></figure><blockquote><p>代码高度</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># 默认显示全部</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="string">10px</span><span class="comment"># 单位px，多余的部分会折叠</span></span><br></pre></td></tr></table></figure><blockquote><p>代码自动换行</p><ul><li>true换行</li><li>false不换行，代码块下方会有滚动条</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件<code>_config.yml</code>，将line_number改成false，</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件_config.yml，将line_number改成false:</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><blockquote><p>配置<code>_config.butterfly.yml</code>，图标查找<a href="https://fontawesome.com/icons?from=io">矢量图标 Icons | Font Awesome</a> ,QQ移动端无法跳转，需要在<a href="https://shang.qq.com/v3/index.html">官方</a> 开通服务</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># social settings (社交圖標設置)</span></span><br><span class="line"><span class="comment"># formal:</span></span><br><span class="line"><span class="comment">#   icon: link || the description</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"> <span class="attr">fab fa-github:</span> <span class="string">https://github.com/GC-ZF</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line"> <span class="attr">fa fa-book-open:</span> <span class="string">https://blog.csdn.net/qq_49488584</span> <span class="string">||</span> <span class="string">CSDN</span></span><br><span class="line"> <span class="attr">fab fa-qq:</span>  <span class="string">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=1310446718&amp;website=www.oicqzone.com</span> <span class="string">||</span> <span class="string">QQ</span></span><br><span class="line"> <span class="attr">fas fa-envelope-open-text:</span> <span class="string">mailto:1310446718@qq.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-social-icon-pc.png"></p><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><blockquote><p>description在<code>front-matter</code>(即自动生成时MD时前面的内容)</p><ul><li>description： 只显示description</li><li>both： 优先选择description，如果没有配置description，则显示自动节选的内容</li><li>auto_excerpt：只显示自动节选</li><li>false： 不显示文章内容</li></ul></blockquote><blockquote><p>配置<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span><span class="comment"># 模式2both</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># 节选长度</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-description.png" alt="img"></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><blockquote><p>图片存放位置<code>博客根目录/source/Hexo_img</code>，配置文件<code>_config.butterfly.yml</code></p></blockquote><blockquote><p>主页封面图片</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/Hexo_img/background.jpg</span></span><br></pre></td></tr></table></figure><blockquote><p>文章详情页顶部图片，当没有在<code>front-matter</code>设置<code>top_img</code>和<code>cover</code>的情况下会显示该图</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/Hexo_img/default_top_img.jpeg</span></span><br></pre></td></tr></table></figure><blockquote><p>归档页顶部图片</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">https://picsum.photos/1920/942</span></span><br></pre></td></tr></table></figure><blockquote><p>tag页顶部图</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標签頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="string">https://picsum.photos/470/315</span></span><br></pre></td></tr></table></figure><blockquote><p>category页顶部图</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#category页</span></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="string">https://picsum.photos/470/315</span></span><br></pre></td></tr></table></figure><blockquote><p>tag_per_img 和 category_per_img 是 3.2.0 新增的内容，可对 tag 和 category 进行单独的配置</p><p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">tag_per_img：</span></span><br><span class="line">  <span class="attr">aplayer:</span> <span class="string">https://xxxxxx.png</span></span><br><span class="line">  <span class="attr">android:</span> <span class="string">ddddddd.png</span></span><br><span class="line">  </span><br><span class="line"><span class="string">category_per_img：</span></span><br><span class="line">  <span class="string">随想:</span> <span class="string">hdhdh.png</span></span><br><span class="line">  <span class="string">推荐:</span> <span class="string">ddjdjdjd.png</span></span><br></pre></td></tr></table></figure><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><blockquote><p>文章的markdown文档上,在<code>Front-matter</code>添加<code>cover</code>,并填上要显示的图片地址</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-cover.png"></p><blockquote><p>如果不配置cover,可以设置显示默认的cover</p><p>如果不想在首页显示cover,可以设置为false，配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line"><span class="comment">#多个默认封面，随机显示一个</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">https://picsum.photos/id/1018/470/315</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">https://picsum.photos/id/1044/470/315</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">https://picsum.photos/id/1056/470/315</span></span><br></pre></td></tr></table></figure><h2 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h2><h3 id="文章meta显示"><a href="#文章meta显示" class="headerlink" title="文章meta显示"></a>文章meta显示</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，这个选项是用来显示文章的相关信息的，配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">data</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，为你的博客文章展示文章版权和许可协议，配置文件<code>_config.butterfly.yml</code></p><ul><li>默认true，如果不展示修改enable</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><blockquote><p>从3.0.0开始，支持对单独文章设置版权信息，可以在文章<code>Front-matter</code>单独设置</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copyright_author:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">https://xxxxxx.com</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">此文章版权归xxxxx所有，如有转载，请註明来自原作者</span></span><br></pre></td></tr></table></figure><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，打赏，给文章结尾设置打赏按钮，可以放上收款二维码</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sponsor/reward</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.png</span></span><br><span class="line">       <span class="attr">link:</span></span><br><span class="line">       <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">       <span class="attr">link:</span></span><br><span class="line">       <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-donate.png"></p><h3 id="TOC目录"><a href="#TOC目录" class="headerlink" title="TOC目录"></a>TOC目录</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>,在文章页，会有一个目录，用于显示TOC</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span><span class="comment">#文章是否显示TOC</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span><span class="comment">#普通页面是否显示TOC</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span><span class="comment">#是否显示章节数</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span><span class="comment">#是否展开TOC</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post#true的话显示一级目录，其它隐藏</span></span><br></pre></td></tr></table></figure><h3 id="为特定文章配置"><a href="#为特定文章配置" class="headerlink" title="为特定文章配置"></a>为特定文章配置</h3><blockquote><p>在你的文章md文件的头部，加入<code>toc_number</code>是否显示章节数和<code>toc</code>是否显示目录，并配置true或者false即可。</p><p>主题会优先判断文章Markdown的Front-matter是否有配置，如有，则以Front-matter的配置为准。否则，以主题配置文件中的配置为准</p></blockquote><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，相关文章推荐的原理是根据文章tags的比重来推荐</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure><h3 id="文章锚点"><a href="#文章锚点" class="headerlink" title="文章锚点"></a>文章锚点</h3><blockquote><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题ID进行替换<br>(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p><p>配置文件<code>_config.butterfly.yml</code>，默认false</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h3><blockquote><p>可设置是否显示文章过期提醒，以更新时间为基准</p><ul><li>limit_day： 距离更新时间多少天才显示文章过期提醒</li><li>message_prev ： 天数之前的文字</li><li>message_next：天数之后的文字</li></ul><p>配置文件<code>_config.butterfly.yml</code>，我没开，开了的话文章最前面会提示你更新</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butteffly-docs-outdate-flat.png"></p><h3 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h3><blockquote><p>可设置分页的逻辑，也可以关闭分页显示</p><ul><li>post_pagination: false，默认关</li></ul><p>配置文件<code>_config.butterfly.yml</code>，我没开，开了的话是二者都显示，最后一行模式一是显示下一篇，模式二反之</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-post-pagination.png"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><blockquote><p>配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/Hexo_img/avatar.jpg</span> <span class="comment">#图片路径</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span> <span class="comment">#头像会一直转圈  </span></span><br></pre></td></tr></table></figure><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><blockquote><p>可开启图片Figcaption描述文字显示</p><p>优先显示图片的 title 属性，然后是 alt 属性</p><p>配置文件<code>_config.butterfly.yml</code>，默认关闭</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-photo-figcaption.png"></p><h2 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h2><blockquote><p>可配置网站是否可以复制、复制的内容是否添加版权信息</p><ul><li>enable：是否开启网站复制权限</li><li>copyright：复制的内容后面加上版权信息</li><li>enable：是否开启复制版权信息添加</li><li>limit_count：字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (複制的內容後面加上版權信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><h2 id="Footer设置"><a href="#Footer设置" class="headerlink" title="Footer设置"></a>Footer设置</h2><h3 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h3><blockquote><p>since是一个来展示你站点起始时间的选项。它位于页面的最底部</p><p>配置文件<code>_config.butterfly.yml</code>，ICP备案号也在这里加</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;div&gt;小张小张出口成章&lt;/div&gt;&lt;div&gt;&lt;a</span> <span class="string">onclick=&quot;window.open(&#x27;url&#x27;)&quot;</span> <span class="string">class=&quot;footer-a&quot;&gt;备ICP&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-since.png"></p><h3 id="页脚自定义脚本"><a href="#页脚自定义脚本" class="headerlink" title="页脚自定义脚本"></a>页脚自定义脚本</h3><blockquote><p>custom_text是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。</p><p>配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure><blockquote><p>对于部分人需要写 ICP 的，也可以写在 custom_text里</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="右下角导航"><a href="#右下角导航" class="headerlink" title="右下角导航"></a>右下角导航</h2><h3 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h3><blockquote><p>简体繁体互换，右下角会有简繁转换按钮。</p><p>配置文件<code>_config.butterfly.yml</code>，默认关闭</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><blockquote><p>右下角会有夜间模式按钮</p><p>配置文件<code>_config.butterfly.yml</code>，默认开启</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>V2.0.0 开始增加一个选项，可开启自动切换light mode 和 dark mode</p><ul><li><p>autoChangeMode: 1 跟随系统而变化，不支持的浏览器&#x2F;系统将按照时间晚上6点到早上6点之间切换为 dark mode</p></li><li><p>autoChangeMode: 2 只按照时间 晚上6点到早上6点之间切换为 dark mode,其余时间为light mode</p></li><li><p>autoChangeMode: false 取消自动切换</p></li></ul></blockquote><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><blockquote><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。只会出现在文章页面，右下角会有阅读模式按钮</p><p>配置文件<code>_config.butterfly.yml</code>，默认开启</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，默认即可</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重复</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="comment"># readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><h3 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h3><blockquote><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏，配置文件<code>_config.butterfly.yml</code></p><ul><li>left左边</li><li>right右边</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手机页面（ 显示宽度 &lt; 768px ）是否显示aside内容</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br></pre></td></tr></table></figure><blockquote><p>个人信息</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span> <span class="comment">#按钮文字</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/GC-ZF</span> <span class="comment">#可以放上自己的github地址</span></span><br></pre></td></tr></table></figure><blockquote><p>公告栏设置</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span> <span class="comment">#修改公告栏信息</span></span><br></pre></td></tr></table></figure><blockquote><p>其它，我保持不变</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">card_recent_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line"><span class="attr">card_categories:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line"><span class="attr">card_tags:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">card_archives:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"><span class="attr">card_webinfo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="访问人数统计"><a href="#访问人数统计" class="headerlink" title="访问人数统计"></a>访问人数统计</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code>，默认全开</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-busuanzi-site-pv.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-pv.png"></p><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><blockquote><p>网页已运行时间</p><p>配置文件<code>_config.butterfly.yml</code>，默认false，需要自己配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><h3 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h3><blockquote><p>最新评论只会在刷新时才会去读取，并不会实时变化</p><p>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分鐘。也就是説，调用后资料会存在 localStorage 里，10分鐘内刷新网站只会去 localStorage 读取资料。 10 分鐘期限一过，刷新页面时才会去调取 API 读取新的数据。（ 3.6.0 新增了 storage 配置，可自行配置缓存时间）</p></blockquote><blockquote><p>在侧边栏显示最新评论板块</p><p>配置文件<code>_config.butterfly.yml</code>，默认关闭</p><ul><li>limit：显示数量</li><li>storage：设置缓存时间</li><li>avatar：是否显示头像</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="自定义添加栏目"><a href="#自定义添加栏目" class="headerlink" title="自定义添加栏目"></a>自定义添加栏目</h3><blockquote><p>没弄，参考官方文档<a href="https://butterfly.js.org/posts/ea33ab97/#%E4%BE%8B%E5%AD%90">自定義側邊欄 | Butterfly</a></p></blockquote><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><blockquote><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">查看官方文档</a></p></blockquote><h3 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h3><h3 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h3><h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><blockquote><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字( content不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字(可选)</li><li>bg: 按钮的背景颜色(可选)</li><li>color: 按钮文字的颜色(可选)</li></ul><p>测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">闪</span></span></p><blockquote><p>block独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li><div class="hide-block"><button type="button" class="hide-button" style="background-color: bg;color: color">display    </button><div class="hide-content"><ul><li>content</li><li></li></ul></div></div></li></ul><p>测试</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div><blockquote><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><blockquote><p>使用mermaid标籤可以绘製Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a></p><p>修改 主题配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mermaid</span><br><span class="line"># see https://github.com/mermaid-js/mermaid</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # built-in themes: default/forest/dark/neutral</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: dark</span><br></pre></td></tr></table></figure><blockquote><p>书写格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><blockquote><p>Demo 1 - 预设选择第一个【默认】</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 2 - 预设选择tabs</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 3 - 没有预设值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line">                      按钮字体和边框顔色(outline时)</span><br><span class="line">                      default/blue/pink/red/purple/orange/green</span><br><span class="line">[style]       : [可选] 按钮样式 默认实心</span><br><span class="line">                      outline/留空</span><br><span class="line">[layout]      : [可选] 按钮佈局 默认为line</span><br><span class="line">                      block/留空</span><br><span class="line">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span><br><span class="line">                      center/right/留空</span><br><span class="line">[size]        : [可选] 按钮大小</span><br><span class="line">                      larger/留空</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block center larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block right outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><blockquote><p>more than one button in center</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><blockquote><p>主题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你看我长得漂亮不</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png)</span><br><span class="line"></span><br><span class="line">我觉得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"/></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><blockquote><p>高亮所需的文字</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><ul><li>title标题&#x2F;时间线</li><li>color可选</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,red %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,purple %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,orange %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,green %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 2022,green %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><blockquote><p>可在任何界面插入类似友情链接列表效果，内容格式与友情链接界面一样，支持 yml 格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">- class_name: 友情链接</span><br><span class="line">  class_desc: 那些人，那些事</span><br><span class="line">  link_list:</span><br><span class="line">    - name: JerryC</span><br><span class="line">      link: https://jerryc.me/</span><br><span class="line">      avatar: https://jerryc.me/img/avatar.png</span><br><span class="line">      descr: 今日事,今日毕</span><br><span class="line">    - name: Hexo</span><br><span class="line">      link: https://hexo.io/zh-tw/</span><br><span class="line">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span><br><span class="line">      descr: 快速、简单且强大的网誌框架</span><br><span class="line"></span><br><span class="line">- class_name: 网站</span><br><span class="line">  class_desc: 值得推荐的网站</span><br><span class="line">  link_list:</span><br><span class="line">    - name: Youtube</span><br><span class="line">      link: https://www.youtube.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span><br><span class="line">      descr: 视频网站</span><br><span class="line">    - name: Weibo</span><br><span class="line">      link: https://www.weibo.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span><br><span class="line">      descr: 中国最大社交分享平臺</span><br><span class="line">    - name: Twitter</span><br><span class="line">      link: https://twitter.com/</span><br><span class="line">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span><br><span class="line">      descr: 社交分享平臺</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/Hexo_img/friend_404.gif"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/Hexo_img/friend_404.gif"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网誌框架">快速、简单且强大的网誌框架</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/Hexo_img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/Hexo_img/friend_404.gif"' alt="Weibo" />              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中国最大社交分享平臺">中国最大社交分享平臺</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/Hexo_img/friend_404.gif"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平臺">社交分享平臺</div>            </a>          </div></div></div><hr><hr><blockquote><p>以下来自<a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p></blockquote><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>评论有很多，参考官方文档，本博客目前使用tiwkoo</p><p>Valine一部分功能(表情库、邮件提醒等等)需要借助其它第三方，只实现了基本功能，尝试未果。Valine配置Leancloud有个小坑，如果认证支付宝显示当前设备不支持刷脸，支付宝退出重登就好</p><ul><li><p><a href="https://blog.csdn.net/aeneag/article/details/121330002?ops_request_misc=%7B%22request_id%22:%22165138422116782425199399%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165138422116782425199399&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-3-121330002.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=Valine&spm=1018.2226.3001.4187">Valine评论+配置开启邮箱提醒_艾恩凝的博客-CSDN博客</a></p></li><li><p>第三方<a href="https://github.com/zhaojun1998/Valine-Admin">Github  Valine 的拓展应用 增强 Valine 的邮件通知</a></p></li></ul><p>改为livere(韩国)配置很快，大概五分钟就好，支持表情、图片，但是不能自定义评论框的样式，必须登录QQ等才能发表评论</p><hr><p>2022.5.1 最后的倔强，还是喜欢免登录，更改评论为tiwkoo</p><ul><li><p>支持QQ号自动识别，支持最新评论发送邮件提醒(包括博主、游客)，邮件内容自定义模板，支持图片、表情包…</p></li><li><p><a href="https://www.bilibili.com/video/BV1Fh411e7ZH">Twikoo Vercel 部署教程_哔哩哔哩_bilibili</a></p></li><li><p><a href="https://blog.csdn.net/weixin_58068682/article/details/122770936?spm=1001.2014.3001.5502">(165条消息) 部署Twikoo评论系统及其邮件推送(Vercel)_Amnesia_Fu的博客-CSDN博客</a></p></li><li><p><a href="https://twikoo.js.org/#%E7%89%B9%E8%89%B2">Twikoo 中文文档</a></p></li></ul><blockquote><p>小坑：MongoDB数据库配置时，连接字符串密码,<code>mongodb+srv://xxxxxx:&lt;password&gt;@cluster0.i7omd.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority</code>，替换密码时尖括号<code>&lt; &gt;</code>需要去掉</p></blockquote><h2 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h2><blockquote><p>感觉也用不到…</p></blockquote><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><blockquote><p>官方提供三种格式，本博客使用的默认服务商sharejs</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span>  <span class="comment">#想要显示的内容</span></span><br></pre></td></tr></table></figure><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><blockquote><p>安装依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>_config.yml</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 1000#最多多少条</span><br></pre></td></tr></table></figure><h2 id="网站验证与分析统计"><a href="#网站验证与分析统计" class="headerlink" title="网站验证与分析统计"></a>网站验证与分析统计</h2><blockquote><p>官方文档描述不是很多，参考B站up主</p></blockquote><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><blockquote><p>等有人找我贴广告再弄吧hhh(大概网站崩了也不会有)</p></blockquote><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><blockquote><p>暂时不用，图片直接引入就行了，用代码敲格式有点繁琐，用了再回来写</p></blockquote><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="自定义主题色"><a href="#自定义主题色" class="headerlink" title="自定义主题色"></a>自定义主题色</h3><blockquote><p>可以修改大部分UI颜色</p><p>配置文件<code>_config.butterfly.yml</code>，<strong>颜色值必须被双引号包裹，就像”#000”而不是#000。否则将会在构建的时候报错！</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#49B1F5&quot;</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#FF7242&quot;</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#A4D8FA&quot;</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br></pre></td></tr></table></figure><h3 id="网站背景-未配置"><a href="#网站背景-未配置" class="headerlink" title="网站背景(未配置)"></a>网站背景(未配置)</h3><blockquote><p>默认显示白色，可设置图片或者颜色</p><p>配置文件<code>_config.butterfly.yml</code></p><p>留意: 如果你的网站根目录不是’&#x2F;‘,使用本地图片时，需加上你的根目录。<br>例如：网站是 <a href="https://yoursite.com/blog,%E5%BC%95%E7%94%A8%E4%B8%80%E5%BC%A0img/xx.png%E5%9B%BE%E7%89%87%EF%BC%8C%E5%88%99%E8%AE%BE%E7%BD%AEbackground%E4%B8%BA">https://yoursite.com/blog,引用一张img/xx.png图片，则设置background为</a> url(&#x2F;blog&#x2F;img&#x2F;xx.png)</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片格式 url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="comment"># 颜色（HEX值/RGB值/颜色单词/渐变色)</span></span><br><span class="line"><span class="comment"># 留空 不显示背景</span></span><br><span class="line"><span class="attr">background:</span></span><br></pre></td></tr></table></figure><blockquote><p>background:’#49B202’</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-set-body-background-color.png"></p><h3 id="footer背景"><a href="#footer背景" class="headerlink" title="footer背景"></a>footer背景</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code></p><ul><li>留空&#x2F;false: 显示默认的颜色</li><li>img链接:图片的链接，显示所配置的图片<br>颜色(HEX值 - #0000FF,RGB值 - rgb(0,0,255),颜色单词 - orange,渐变色 - linear-gradient( 135deg, #E2B0FF 10%, #9F44D3 100%)）</li><li>true:显示跟 top_img 一样</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h3><blockquote><p>配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖动特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-type-animation.gif"></p><h3 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h3><blockquote><p>背景特效，三选一</p><ul><li>enable: true，PC端</li><li>mobile: true，移动端</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Background effects (背景特效)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_ribbon (静止彩带)</span></span><br><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fluttering Ribbon (动态彩带)</span></span><br><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#星空特效</span></span><br><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span> <span class="comment">#color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(<span class="doctag">note:</span> use &#x27;,&#x27; to separate.)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h3><blockquote><p>鼠标点击，三选一</p><ul><li>enable: true，PC端</li><li>mobile: true，移动端</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Mouse click effects: words (鼠標點擊效果: 文字)</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">鬼</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">才</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">小</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">张</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">同</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">学</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="页面美化"><a href="#页面美化" class="headerlink" title="页面美化"></a>页面美化</h3><blockquote><p>会改变ol、ul、h1-h5的样式</p><p>field配置生效的区域</p><ul><li><p>post 只在文章页生效</p></li><li><p>site 在全站生效</p><p>配置文件<code>_config.butterfly.yml</code></p></li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 美化页面显示</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&quot;#F47466&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>title-prefix-icon填写的是fontawesome的icon的Unicode数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-fontwesome-unicode.png"></p><blockquote><p>未开启美化</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-beautify.png"></p><blockquote><p>开启美化</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-post-beautif.png"></p><h3 id="自定义字体和字体大小-未设置"><a href="#自定义字体和字体大小-未设置" class="headerlink" title="自定义字体和字体大小(未设置)"></a>自定义字体和字体大小(未设置)</h3><h4 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h4><blockquote><p>可自行设置字体的font-family<br>如不需要配置，请留空</p><p>配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">-apple-system,</span> <span class="string">BlinkMacSystemFont,</span> <span class="string">&quot;Segoe UI&quot;</span><span class="string">,</span> <span class="string">&quot;Helvetica Neue&quot;</span><span class="string">,</span> <span class="string">Lato,</span> <span class="string">Roboto,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft JhengHei&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><h4 id="blog标题字体"><a href="#blog标题字体" class="headerlink" title="blog标题字体"></a>blog标题字体</h4><blockquote><p>可自行设置字体的font-family<br>如不需要配置，请留空。<br>如不需要使用网络字体，只需要把font_link留空就行</p><p>配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角网站名字 主页居中网站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span> <span class="string">https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">Titillium</span> <span class="string">Web,</span> <span class="string">&#x27;PingFang SC&#x27;</span><span class="string">,</span> <span class="string">&#x27;Hiragino Sans GB&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft JhengHei&#x27;</span><span class="string">,</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure><h3 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h3><blockquote><p>可设置主页中显示的网站副标题或者喜欢的座右铭,修改主题配置文件，将enable设置为true开启，默认关闭</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主页subtitle</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循环打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 调用第三方服务</span></span><br><span class="line">  <span class="comment"># source: false 关闭调用</span></span><br><span class="line">  <span class="comment"># source: 1  调用一言网的一句话（简体） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  调用一句网（简体） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  调用今日诗词（简体） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 会先显示 source , 再显示 sub 的内容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 如果关闭打字效果，subtitle 只会显示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-index-subtitle.gif"></p><blockquote><p>修改副标题字体样式，位置<code>\themes\butterfly\source\css\_layout\head.styl</code>，43行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#site-subtitle</span><br><span class="line">    color: var(--white)   //此处修改为白色</span><br><span class="line">    font-size: 1.05em     // 字体大小</span><br><span class="line">    +minWidth768()</span><br><span class="line">    font-size: 1.40em   // 字体大小</span><br></pre></td></tr></table></figure><h3 id="主页top-img大小"><a href="#主页top-img大小" class="headerlink" title="主页top_img大小"></a>主页top_img大小</h3><blockquote><p>默认的显示为全屏。site-info的区域会居中显示</p><p>注意：index_top_img_height的值不能使用百分比<br>2个都不填的话，会使用默认值</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主页设置</span></span><br><span class="line"><span class="comment"># 默认top_img全屏，site_info在中间</span></span><br><span class="line"><span class="comment"># 使用默认, 都无需填写（建议默认）</span></span><br><span class="line"><span class="attr">index_site_info_top:</span> <span class="comment"># 主页标题距离顶部距离  例如 300px/300em/300rem/10%</span></span><br><span class="line"><span class="attr">index_top_img_height:</span>  <span class="comment">#主页top_img高度 例如 300px/300em/300rem  不能使用百分比</span></span><br></pre></td></tr></table></figure><h3 id="页面加载动画preloader"><a href="#页面加载动画preloader" class="headerlink" title="页面加载动画preloader"></a>页面加载动画preloader</h3><blockquote><p>当进入网页时，因为加载速度的问题，可能会导致top_img图片出现断层显示，或者网页加载不全而出现等待时间，开启preloader后，会显示加载动画，等页面加载完，加载动画会消失,配置<code>_config.butterly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载动画 Loading Animation</span></span><br><span class="line"><span class="attr">preloader:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-preloader.gif"></p><h2 id="PWA-未配置"><a href="#PWA-未配置" class="headerlink" title="PWA(未配置)"></a>PWA(未配置)</h2><blockquote><p>用处不大,我先跳过</p></blockquote><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><blockquote><p>1、项目目录右键打开 Git Bash Here,</p><p>2、<code>npm install hexo-wordcount --save or yarn add hexo-wordcount</code></p><p>3、修改主题配置文件<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-doc-word-count.png"></p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-wordcount-totalcount.png"></p><h2 id="图片大图查看"><a href="#图片大图查看" class="headerlink" title="图片大图查看"></a>图片大图查看</h2><blockquote><p>修改主题配置文件<code>_config.butterfly.yml</code>，二选一，默认第二个</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lightbox (圖片大圖查看模式)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># You can only choose one, or neither (只能選擇一個 或者 兩個都不選)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># medium-zoom</span></span><br><span class="line"><span class="comment"># https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="attr">medium_zoom:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fancybox</span></span><br><span class="line"><span class="comment"># http://fancyapps.com/fancybox/3/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Snackbar弹窗-未配置"><a href="#Snackbar弹窗-未配置" class="headerlink" title="Snackbar弹窗(未配置)"></a>Snackbar弹窗(未配置)</h2><blockquote><p>Snackbar 弹窗,根据自己爱好开启，用处不大，我也没开，配置<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Snackbar 弹窗</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># position 弹窗位置</span></span><br><span class="line"><span class="comment"># 可选 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span> <span class="comment">#light mode时弹窗背景</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#2d3035&#x27;</span> <span class="comment">#dark mode时弹窗背景</span></span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><blockquote><p>文档中其它没设置，用处不大</p></blockquote><h3 id="Instantpage"><a href="#Instantpage" class="headerlink" title="Instantpage"></a>Instantpage</h3><blockquote><p>鼠标悬停到链接上超过 65 毫秒时，Instantpage 会对该链接进行预加载，可以提升访问速度，配置<code>_config.butterfly.yml</code>，默认关闭</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://instant.page/</span></span><br><span class="line"><span class="comment"># prefetch (预加载)</span></span><br><span class="line"><span class="attr">instantpage:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h2><blockquote><p>当用户点击链接，通过ajax更新页面需要变化的部分，然后使用HTML5的pushState修改浏览器的URL地址，这样可以不用重复加载相同的资源（css&#x2F;js）， 从而提升网页的加载速度</p><p>配置<code>_config.butterfly.yml</code>，默认关闭，可以开一下</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pjax [Beta]</span></span><br><span class="line"><span class="comment"># It may contain bugs and unstable, give feedback when you find the bugs.</span></span><br><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/music/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/no-pjax/</span></span><br></pre></td></tr></table></figure><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p><a href="https://blog.sky03.cn/posts/42790.html#toc-heading-11">Hexo进阶之各种优化 | Sky03我的薰衣草</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局安装gulp模块 npm unistall -g gulp</span><br><span class="line">npm install gulp -g</span><br><span class="line"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"># 额外的功能模块</span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></table></figure><blockquote><ul><li>以后的执行方式有两种：<ol><li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo clean &amp;&amp; hexo g</code> 并且再把代码和图片压缩</li><li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了</li></ol></li><li>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</li></ul></blockquote><hr><hr><blockquote><p>以下来自<a href="https://butterfly.js.org/posts/4073eda/">Butterfly 安裝文檔(六) 進階教程 | Butterfly</a>，只做了播放器，音乐、电影、说说都没有配的打算所以就不写了</p></blockquote><h2 id="全局吸底播放器"><a href="#全局吸底播放器" class="headerlink" title="全局吸底播放器"></a>全局吸底播放器</h2><blockquote><p><a href="https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80">Butterfly添加全局吸底Aplayer教程 | Butterfly</a></p></blockquote><blockquote><p>开启主题的 aplayerInject</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>插入 Aplayer html，我用网易云，找一个歌单点击分享，复制链接，把网址里的id换一下(其它平台data-server参考官方文档)</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line"><span class="comment">#   - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;60198&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;true&quot;&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插入代码自定义样式-鼠标或footer-及备案信息实现"><a href="#插入代码自定义样式-鼠标或footer-及备案信息实现" class="headerlink" title="插入代码自定义样式(鼠标或footer)及备案信息实现"></a>插入代码自定义样式(鼠标或footer)及备案信息实现</h2><blockquote><p>新建样式表<code>source/css/style.css</code>，在博客界面右击想要修改的地方，点击检查。</p><p>以底部为例，查到#footer-wrap</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#footer</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#footer-wrap</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0d0d0d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>回到配置文件，引入css文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/style.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其它样式，来自up主<a href="https://github.com/constown/HexoStaticFile">constown&#x2F;HexoStaticFile: HexoStaticFile (github.com)</a></p></blockquote><blockquote><p>备案信息，配置<code>_config.butterfly.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;div&gt;满地都是六便士</span> <span class="string">我想抬头看月亮&lt;/div&gt;&lt;div&gt;&lt;a</span> <span class="string">onclick=&quot;window.open(&#x27;url&#x27;)&quot;</span> <span class="string">class=&quot;footer-a&quot;&gt;备没服务器...&lt;/a&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><blockquote><p>同样在style.css中修改样式</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#footer-a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0d0d0d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="icon矢量图标"><a href="#icon矢量图标" class="headerlink" title="icon矢量图标"></a>icon矢量图标</h2><blockquote><p>icon图标就太多太多了，我常用的是阿里和主题内助<a href="https://fontawesome.com/icons?from=io">矢量图标 Icons | Font Awesome</a>，内置是国外的可能访问会有问题</p></blockquote><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><blockquote><p>想要用二级域名参考第二篇</p></blockquote><p><a href="https://blog.csdn.net/linshuhe1/article/details/73013730?ops_request_misc=%7B%22request_id%22:%22165138667616782395343158%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165138667616782395343158&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-73013730.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D&spm=1018.2226.3001.4187">Hexo个人免费博客(五) 使用自己的域名_河乐不为的博客-CSDN博客_hexo 自定义域名</a></p><p><a href="https://blog.csdn.net/qq_46311811/article/details/122227773?ops_request_misc=%7B%22request_id%22:%22165132219216780357235947%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=165132219216780357235947&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-122227773.nonecase&utm_term=%E5%9F%9F%E5%90%8D&spm=1018.2226.3001.4450">如何添加二级域名(图文超级详细)_Hydrion-Qlz的博客-CSDN博客_怎么添加二级域名</a></p><h1 id="六、一百个Chocolate的魔改"><a href="#六、一百个Chocolate的魔改" class="headerlink" title="六、一百个Chocolate的魔改"></a>六、一百个Chocolate的魔改</h1><blockquote><p><a href="https://yangchaoyi.vip/posts/520520/">超逸の博客 (yangchaoyi.vip)</a></p></blockquote><p>根据博客做了以下设置</p><ul><li>跳动的心</li><li>bilibili播放(已取消，不是很喜欢)</li><li>地址栏添加 abbrlink(<a href="https://yangchaoyi.vip/posts/520520/#%E5%9C%B0%E5%9D%80%E6%A0%8F%E6%B7%BB%E5%8A%A0-abbrlink"> 超逸の博客</a>)(<a href="https://blog.juanertu.com/archives/9013c8d8.html"> 你真是一个美好的人类</a>)，第一个默认格式，第二个修改了规则为哈希地址</li></ul><h2 id="内置工具箱-未配置"><a href="#内置工具箱-未配置" class="headerlink" title="内置工具箱(未配置)"></a>内置工具箱(未配置)</h2><blockquote><p><a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStackPage官方仓库</a></p><p>页面效果<a href="https://yangchaoyi.vip/">https://yangchaoyi.vip/</a></p><p>刚开始配置了，但是感觉东西太多了！就取消了，用flink外挂标签代替</p><p>buffterfly中没有写，因为是基于hexo-theme-matery写的，看了下hexo-theme-matery，可以把Webstackpage的html直接拉到<code>source/</code>下工具箱路径，然后跳过渲染</p></blockquote><p>跳过渲染可以在<code>Front matter</code>中设置layout属性</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tools</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-05-01 00:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>或者在<code>_config.yaml</code>中设置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定目录跳过hexo渲染</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;文件名/*&#x27;</span></span><br></pre></td></tr></table></figure><p>可以把官网的克隆下来，把仓库里的东西放到工具箱路径里，即<code>source/工具箱(hexo n 来的)</code>。也可以直接把这位学长<a href="https://github.com/Chocolate1999/hexo-blog-lionkk">Chocolate1999&#x2F;hexo-blog-lionkk: 魔改自butterfly 主题</a>仓库里的<code>source/about</code>里的东西复制下来，他进行了一部分修改，感觉比官方的好看也好用，然后按上面配置跳过渲染</p><h1 id="七、juanertu的博客SEO优化引擎收录"><a href="#七、juanertu的博客SEO优化引擎收录" class="headerlink" title="七、juanertu的博客SEO优化引擎收录"></a>七、juanertu的博客SEO优化引擎收录</h1><blockquote><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E7%B6%B2%E7%AB%99%E9%A9%97%E8%AD%89">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a>，官方文档说明不多，跟着下面的up看</p></blockquote><h2 id="网站验证-分析统计"><a href="#网站验证-分析统计" class="headerlink" title="网站验证  分析统计"></a>网站验证  分析统计</h2><blockquote><p>如果需要搜索引擎收录网站，可能需要登录对应搜索引擎的管理平台进行提交，各自的验证码可从各自管理平台拿到</p><p>如果不做网站推送搜索引擎，除了输入我们的域名或者搜索文章，是没法发现我们的博文</p></blockquote><p><a href="https://www.bilibili.com/video/BV1W34y1o7yK/?spm_id_from=333.788">使用Hexo搭建个人博客手摸手教学(17)|博客SEO优化引擎收录_哔哩哔哩_bilibili</a></p><p><a href="https://blog.juanertu.com/archives/9013c8d8.html">Hexo 框架 (六)：SEO 优化及站点被搜索引擎收录设置 | 你真是一个美好的人类 (juanertu.com)</a></p><p>小tips：跟着B站走，如果绑定了域名，不要使用xxx.github.io这个地址，绑定站点配置时会失败(301错误)</p><h2 id="添加nofollow标签"><a href="#添加nofollow标签" class="headerlink" title="添加nofollow标签"></a>添加nofollow标签</h2><blockquote><p><a href="https://blog.juanertu.com/archives/9013c8d8.html">Hexo 框架 (六)：SEO 优化及站点被搜索引擎收录设置</a></p><p>给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重</p></blockquote><h1 id="八、对博客版本控制"><a href="#八、对博客版本控制" class="headerlink" title="八、对博客版本控制"></a>八、对博客版本控制</h1><blockquote><p>学习过git的同学,对网站进行备份,忽略规则<code>.gitignore</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><blockquote><p>克隆下来以后，直接安装依赖，<code>npm install</code>会检查你的<code>package.json</code>里记录了那些依赖，所以就不用一个一个安了，安装主题文件就可以部署了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本博客用到的所有依赖</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署命令</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># 主题依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-search</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># 字数统计 </span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-wordcount</span> <span class="string">--save</span> <span class="string">or</span> <span class="string">yarn</span> <span class="string">add</span> <span class="string">hexo-wordcount</span></span><br><span class="line"><span class="comment"># 站点地图</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-baidu-sitemap</span> <span class="string">--save</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-sitemap</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># nofollow 标签</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-filter-nofollow</span> <span class="string">--save</span></span><br><span class="line"><span class="comment"># webstack 已卸</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-theme-webstack</span> <span class="string">-S</span></span><br></pre></td></tr></table></figure><hr><p>其它百度的配置</p><blockquote><p>网站图标</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Favicon（网站图标）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br></pre></td></tr></table></figure><blockquote><p>图片懒加载</p><p>图片没加载出来的时候，出现一个动图转转转的文章页样式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><blockquote><p>在主目录配置文件_config.yml增加配置，793行</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/img/loading.gif</span></span><br></pre></td></tr></table></figure><h1>特别鸣谢</h1><blockquote><ul><li><p>一百个Chocolate博客搭建整理以及部分魔改(就是因为这个学长所以学的Hexo！)</p><ul><li><a href="https://yangchaoyi.vip/posts/520520/">【源码开放】Hexo+Github 博客butterfly 和 matery 主题 搭建完全教程【整理】 | 超逸の博客 (yangchaoyi.vip)</a></li></ul></li><li><p>你真是一个美好的人类，B站系列教程及博客</p><ul><li><a href="https://www.bilibili.com/video/BV1W34y1o7yK/?spm_id_from=333.788">使用Hexo搭建个人博客手摸手教学(17)|博客SEO优化引擎收录_哔哩哔哩_bilibili</a></li><li><a href="https://blog.juanertu.com/archives/5b20fbd0.html">Hexo 框架 (十三)：关于博客主题持续更新的问题和我的新配置方式 | 你真是一个美好的人类 (juanertu.com)</a></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB开发技术作业 JS 实现学生列表及增加、删除修改</title>
      <link href="/posts/8380/"/>
      <url>/posts/8380/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.18 作业</h1><h2>🚀 要求</h2><blockquote><p>编写html、css及js（不可以使用JQuery等js库）</p><p>功能要点：</p><ol><li>模态框遮罩层实现，位置固定并占满整个窗口，背景灰色并半透明</li><li>表单在遮罩层中居中的实现，表单所在的遮罩层flex布局，主轴副轴都居中</li><li>动画效果的实现使用css中transition属性，并结合js代码，淡入淡出opacity变化，变大变小transform结合scale</li><li>卡片的增加，可以创建li后，将其内部的html编码（innerHTML）设置为已有的某个li的内部编码，然后再更改具体的内容</li><li>可以编写一个js函数实现由form表单填写的内容，设置li卡片内容；编写一个js函数实现有li卡片内容，初始化表单元素的值</li><li>html代码已经截图给出且最好不要修改</li></ol></blockquote><h2>🚀 效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF26.gif" alt="JAVA WEB开发技术26"></p><h2>🚀 代码</h2><blockquote><p>小张自己的代码，仅供参考。<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/JAVA%20WEB/Task">源文件</a></p></blockquote><blockquote><p>.html</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>学生信息列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;99list.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;99form.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-div light-blue&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add-btn&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">id</span>=<span class="string">&quot;del-btn&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">id</span>=<span class="string">&quot;modify-btn&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;msgList-ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/9901.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;num-span&quot;</span>&gt;</span>182056101<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>张伞<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/9902.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;num-span&quot;</span>&gt;</span>182056102<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>李斯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/9903.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;num-span&quot;</span>&gt;</span>182056103<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>王武<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../img/9904.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;num-span&quot;</span>&gt;</span>182056104<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>赵柳<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-div&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msgForm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;act&quot;</span> <span class="attr">id</span>=<span class="string">&quot;act-input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;form-div&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;modal-close-btn danger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;close-modal-btn&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;margin: 8px;justify-content: center;&quot;</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>学号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;9&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;read&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>所属院系：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;无&quot;</span>&gt;</span>无<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;计算机工程系&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;电子工程系&quot;</span>&gt;</span>电子工程系<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;机械工程系&quot;</span>&gt;</span>机械工程系<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人主页：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>个人主页地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit-button&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cancel-button&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;99list.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>99form.css</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.modal-div</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#999</span>;</span><br><span class="line"><span class="comment">/* 透明 */</span></span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭表单按钮 */</span></span><br><span class="line"><span class="selector-class">.modal-close-btn</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: -<span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0rem</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">#FF0000</span> <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ffcccc</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">25rem</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#form-div</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#form-div</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line"><span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#submit-button</span>,</span><br><span class="line"><span class="selector-id">#cancel-button</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#FF6688</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0.3rem</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>99list.css</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 三个按钮div */</span></span><br><span class="line"><span class="selector-class">.head-div</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">3rem</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#cceeff</span>;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">1rem</span> <span class="number">#CCCCCC</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 三个按钮布局 */</span></span><br><span class="line"><span class="selector-class">.head-div</span>&gt;<span class="selector-tag">button</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0.2rem</span> <span class="number">0.5rem</span>;</span><br><span class="line"><span class="comment">/* 鼠标样式 */</span></span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按钮拾取焦点样式 */</span></span><br><span class="line"><span class="selector-class">.head-div</span>&gt;<span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新增按钮样式 */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#33ff55</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">#11ff22</span> solid <span class="number">0.1rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">0.2rem</span> <span class="number">#88ffaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除按钮样式 */</span></span><br><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff3355</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fee</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">#ff1111</span> solid <span class="number">0.1rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">0.2rem</span> <span class="number">#ff99cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改按钮样式 */</span></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#eeee22</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">#ffff11</span> solid <span class="number">0.1rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">0.2rem</span> <span class="number">#eeee22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.add-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#aaff22</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.danger</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#c70000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#eea222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 整个ul布局 */</span></span><br><span class="line"><span class="selector-id">#msgList-ul</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="comment">/* 不够宽时换行 */</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul中的li布局 */</span></span><br><span class="line"><span class="selector-id">#msgList-ul</span>&gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">#CCCCCC</span>;</span><br><span class="line"><span class="comment">/* 动画时长 */</span></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* li失去焦点 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="comment">/* 动画效果：放大 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="comment">/* 鼠标样式 */</span></span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* li女 */</span></span><br><span class="line"><span class="selector-class">.female</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#F2F2F2</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ffccdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* li男 */</span></span><br><span class="line"><span class="selector-class">.male</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#F2F2F2</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#abccff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 信息中的img */</span></span><br><span class="line"><span class="selector-class">.img-div</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下均是信息中的样式 */</span></span><br><span class="line"><span class="selector-class">.msg-span-div</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg-span-div</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name-span</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.like-span</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.depart-span</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.like-span</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0.2rem</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0.3rem</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.female</span> <span class="selector-class">.like-span</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff8844</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.male</span> <span class="selector-class">.like-span</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#4488ff</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ddf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sex-span</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10rem</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.2rem</span> <span class="number">0.2rem</span> <span class="number">#F2F2F2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>99list.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取新增按钮，点击显示表单</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;add-btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;modal-div&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;inline&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取x按钮，点击关闭表单</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;close-modal-btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;modal-div&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给新增按钮添加监听</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;add-btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, newadd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newadd</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit-button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">checkForm</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改按钮添加监听</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;modify-btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, modify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit-button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">update</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkForm</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 创建add</span></span><br><span class="line"><span class="keyword">var</span> mylist = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;msgList-ul&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">lis.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;female&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">d.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;img-div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">e.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;img&quot;</span>)</span><br><span class="line">e.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;../img/9901.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">w.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;msg-span-div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;modal-div&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(d).<span class="title function_">appendChild</span>(e)</span><br><span class="line"></span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">t.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;num-span&quot;</span>)</span><br><span class="line">t.<span class="property">innerHTML</span> = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>].<span class="property">value</span></span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">u.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;name-span&quot;</span>)</span><br><span class="line">u.<span class="property">innerHTML</span> = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">2</span>].<span class="property">value</span></span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(y).<span class="title function_">appendChild</span>(u)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">i.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;sex-span&quot;</span>)</span><br><span class="line"><span class="comment">// 性别判断</span></span><br><span class="line"><span class="keyword">let</span> radioArr = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> value;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> radioArr) &#123;</span><br><span class="line"><span class="keyword">if</span> (radioArr[index].<span class="property">checked</span>) &#123;</span><br><span class="line">value = index;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> descArr = [<span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;选中：&quot;</span> + value + <span class="string">&quot; ,&quot;</span> + descArr[value]);</span><br><span class="line"><span class="keyword">if</span>(value!=<span class="number">1</span>)&#123;</span><br><span class="line">lis.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">i.<span class="property">innerHTML</span> = descArr[value]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(y).<span class="title function_">appendChild</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">o.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;depart-span&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myselect = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;department&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> index = myselect.<span class="property">selectedIndex</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oper_value = myselect.<span class="property">options</span>[index].<span class="property">value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oper_value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oper_text = myselect.<span class="property">options</span>[index].<span class="property">text</span></span><br><span class="line"></span><br><span class="line">o.<span class="property">innerHTML</span> = oper_text</span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line">p.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;like-span&quot;</span>)</span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;like&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> baseTable = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj[i].<span class="property">checked</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> n = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (obj[i].<span class="property">value</span> == <span class="string">&#x27;music&#x27;</span>) &#123;</span><br><span class="line">n.<span class="property">innerHTML</span> = <span class="string">&#x27;音乐&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i].<span class="property">value</span> == <span class="string">&#x27;sport&#x27;</span>) &#123;</span><br><span class="line">n.<span class="property">innerHTML</span> = <span class="string">&#x27;运动&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i].<span class="property">value</span> == <span class="string">&#x27;read&#x27;</span>) &#123;</span><br><span class="line">n.<span class="property">innerHTML</span> = <span class="string">&#x27;读书&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i].<span class="property">value</span> == <span class="string">&#x27;study&#x27;</span>) &#123;</span><br><span class="line">n.<span class="property">innerHTML</span> = <span class="string">&#x27;学习&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">mylist.<span class="title function_">appendChild</span>(lis).<span class="title function_">appendChild</span>(w).<span class="title function_">appendChild</span>(p).<span class="title function_">appendChild</span>(n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> msglistUI = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msgList-ul&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> liList = msglistUI.<span class="property">childNodes</span></span><br><span class="line">liList.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">item.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">clickItem</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active-li&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> msgForm = <span class="variable language_">document</span>.<span class="property">msgForm</span></span><br><span class="line"><span class="keyword">var</span> numSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;num-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">numSpan.<span class="property">innerHTML</span> = msgForm[<span class="string">&#x27;number&#x27;</span>].<span class="property">value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;name-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">nameSpan.<span class="property">innerHTML</span> = msgForm[<span class="string">&#x27;name&#x27;</span>].<span class="property">value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sexSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;sex-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">sexSpan.<span class="property">innerHTML</span> = msgForm[<span class="string">&#x27;sex&#x27;</span>].<span class="property">value</span> == <span class="string">&#x27;male&#x27;</span> ? <span class="string">&#x27;男&#x27;</span> : <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sexSpan.<span class="property">innerHTML</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> departSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;depart-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">departSpan.<span class="property">innerHTML</span> = msgForm[<span class="string">&#x27;department&#x27;</span>].<span class="property">value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> likeSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;like-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;like&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (likeSpan.<span class="property">innerHTML</span>.<span class="title function_">indexOf</span>(item.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">item.<span class="property">checked</span> = <span class="string">&#x27;checked&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;modal-div&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickItem</span>(<span class="params">ele</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ele.<span class="property">className</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;active-li&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">ele.<span class="property">className</span> = ele.<span class="property">className</span>.<span class="title function_">replace</span>(<span class="string">&#x27; active-li&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> activeItems = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27; active-li&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (activeItems.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; activeItems.<span class="property">length</span>; i++) &#123;</span><br><span class="line">activeItems[i].<span class="property">className</span> = activeItems[i].<span class="property">className</span>.<span class="title function_">replace</span>(<span class="string">&#x27; active-li&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ele.<span class="property">className</span> = ele.<span class="property">className</span> + <span class="string">&#x27; active-li&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showModal</span>(<span class="params">type</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&#x27;modify&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active-li&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (li.<span class="property">length</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;请选择要修改的学生&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setFormByLi</span>(li[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> modalDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form-div&#x27;</span>)</span><br><span class="line">modalDiv.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;flex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = modalDiv.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;form-title&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">title.<span class="property">innerHTML</span> = <span class="string">&#x27;新增&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">title.<span class="property">innerHTML</span> = <span class="string">&#x27;修改&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> msglistUI = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msgList-ul&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> liList = msglistUI.<span class="property">childNodes</span></span><br><span class="line">liList.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">item.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">clickItem</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;del-btn&quot;</span>)</span><br><span class="line">delBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">deleteMsg</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active-li&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modifyBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modify-btn&#x27;</span>)</span><br><span class="line">modifyBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active-li&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (li.<span class="property">length</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;请选择一个人&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active-li&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> msgForm = <span class="variable language_">document</span>.<span class="property">msgForm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;num-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;number&#x27;</span>].<span class="property">value</span> = numSpan.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;name-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;name&#x27;</span>].<span class="property">value</span> = nameSpan.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sexSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;sex-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;sex&#x27;</span>].<span class="property">value</span> == sexSpan.<span class="property">innerHTML</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sexSpan.<span class="property">innerHTML</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> departSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;depart-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;department&#x27;</span>].<span class="property">value</span> = departSpan.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> likeSpan = li[<span class="number">0</span>].<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;like-span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">msgForm[<span class="string">&#x27;like&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (likeSpan.<span class="property">innerHTML</span>.<span class="title function_">indexOf</span>(item.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">item.<span class="property">checked</span> = <span class="string">&#x27;checked&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;modal-div&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;inline&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>🚀 简略版</h2><blockquote><p>简略版是同学写的，老师前提是css与js分开，不能修改html，但是改一改html，js写html里，代码会更简洁</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;99list.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;99form.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;add()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sucess&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;upd()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;msgList-ul&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-box&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clo()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;modal-close-btn&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>学号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;stuid&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>专业：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;profession&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;00&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;计算机科学与技术&quot;</span>&gt;</span>计算机科学与技术<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;软件工程&quot;</span>&gt;</span>软件工程<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;数字媒体&quot;</span>&gt;</span>数字媒体<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;网络工程&quot;</span>&gt;</span>网络工程<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;体育&quot;</span> /&gt;</span>体育</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游&quot;</span> /&gt;</span>旅游</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;听音乐&quot;</span> /&gt;</span>听音乐</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;读书&quot;</span> /&gt;</span>读书</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>email：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sub()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;introduction&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = []</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//关闭弹框</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//新增</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">form.<span class="property">stuid</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">name</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">pass</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">profession</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">sex</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">email</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">introduction</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> like = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;like&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;like.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">like[i].<span class="property">checked</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//删除</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> num = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;check&#x27;</span>,event.<span class="property">target</span>.<span class="property">classList</span>[<span class="number">1</span>])</span></span><br><span class="line"><span class="language-javascript">ul.<span class="title function_">removeChild</span>(ul.<span class="property">childNodes</span>[num])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> liarr = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;liarr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">liarr[i].<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;scale(1)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;check&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">upd</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> num = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;check&#x27;</span>,event.<span class="property">target</span>.<span class="property">classList</span>[<span class="number">1</span>])</span></span><br><span class="line"><span class="language-javascript">form.<span class="property">stuid</span>.<span class="property">value</span> = arr[num].<span class="property">stuid</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">name</span>.<span class="property">value</span> = arr[num].<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">pass</span>.<span class="property">value</span> = arr[num].<span class="property">pass</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">profession</span>.<span class="property">value</span> = arr[num].<span class="property">profession</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">sex</span>.<span class="property">value</span> = arr[num].<span class="property">sex</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">email</span>.<span class="property">value</span> = arr[num].<span class="property">email</span></span></span><br><span class="line"><span class="language-javascript">form.<span class="property">introduction</span>.<span class="property">value</span> = arr[num].<span class="property">introduction</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> like = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;like&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;like.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr[num].<span class="property">like</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(arr[num].<span class="property">likeArr</span>[i] === like[i].<span class="property">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">like[i].<span class="property">checked</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//提交</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> stuid = form.<span class="property">stuid</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = form.<span class="property">name</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pass = form.<span class="property">pass</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> profession = form.<span class="property">profession</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sex = form.<span class="property">sex</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> email = form.<span class="property">email</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> introduction = form.<span class="property">introduction</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> like = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;like&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> likeArr = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;like.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(like[i].<span class="property">checked</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">likeArr.<span class="title function_">push</span>(like[i].<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;     </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">stuid</span>:form.<span class="property">stuid</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:form.<span class="property">stuid</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">pass</span>:form.<span class="property">pass</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">profession</span>:form.<span class="property">profession</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:form.<span class="property">sex</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">email</span>:form.<span class="property">email</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">introduction</span>:form.<span class="property">introduction</span>.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">likeArr</span>:likeArr</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">arr.<span class="title function_">push</span>(obj)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> liarr = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> length = liarr.<span class="property">length</span> + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> a = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;likeArr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">a += <span class="string">&quot;&lt;span&gt;&quot;</span>+ likeArr[i] + <span class="string">&quot;&lt;/span&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(sex === <span class="string">&#x27;男&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;male&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;female&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">li.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">`<span class="subst">$&#123;length&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">li.<span class="property">innerHTML</span> = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div class=&quot;img-div&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;img class=&quot;img&quot; src=&quot;../img/04.jpeg&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div class=&quot;msg-span-div&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span class=&quot;number-span&quot;&gt;<span class="subst">$&#123;stuid&#125;</span>&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span class=&quot;name-span&quot;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span class=&quot;sex-span&quot;&gt;<span class="subst">$&#123;sex&#125;</span>&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span class=&quot;depart-span&quot;&gt;<span class="subst">$&#123;profession&#125;</span>&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;span class=&quot;like-span&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="subst">$&#123;a&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript">ul.<span class="title function_">appendChild</span>(li)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//选中</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> checked = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.checked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">checked.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> liarr = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;liarr.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">liarr[i].<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;scale(1)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;li&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="property">target</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;scale(1.1)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;check&#x27;</span>,event.<span class="property">target</span>.<span class="property">classList</span>[<span class="number">1</span>])</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验五 二维图形修改器的综合应用</title>
      <link href="/posts/26222/"/>
      <url>/posts/26222/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.18 下午 实验五</h1><h2 align="center">实验五 二维图形修改器的综合应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用二维图形修改器的操作方法制作三个姿态各异的酒瓶</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient&#x2F;Experiment 5 Wine bottle.max)</p></blockquote><blockquote><p>1.使用直线画一个酒瓶的轮廓，并用Bezier角点调整，使轮廓平滑</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF103.png" alt="三维建模技术103"></p><blockquote><p>2.修改轴的位置到轴对称线</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF104.png" alt="三维建模技术104"></p><blockquote><p>3.对轮廓利用二维图形修改器中的车削，得到酒瓶三维图形</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF109.png" alt="三维建模技术109"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF105.png" alt="三维建模技术105"></p><blockquote><p>4.利用实例复制，并通过旋转、平移调整酒瓶位置得到三个酒瓶</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF106.png" alt="三维建模技术106"></p><h1>三、效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF107.png" alt="三维建模技术107"></p><h1>四、小结</h1><blockquote><p>实验五主要是对车削的使用，其中关键的步骤是修改轴默认的位置到轴对称线。另外车削出来会得到黑色的渲染颜色,需要在车削参数中勾选<strong>翻转法线</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF108.png" alt="三维建模技术108"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验四 复合对象综合应用</title>
      <link href="/posts/37285/"/>
      <url>/posts/37285/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.11 下午 实验四</h1><h2 align="center">实验四 复合对象综合应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用复合对象的建模方法创建制作一条公路</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient&#x2F;Experiment 4 Road.max)</p></blockquote><blockquote><p>1.利用直线绘制出公路的一半</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF97.png" alt="三维建模技术97" style="zoom: 50%;" /><blockquote><p>2.利用镜像，复制出公路的另一半</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF98.png" alt="三维建模技术98" style="zoom:50%;" /><blockquote><p>3.对公路进行样条线编辑，对两半公路进行附加并将顶点”焊接”</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF99.png" alt="三维建模技术99" style="zoom:50%;" /><blockquote><p>4.复制出一个公路，并调整高低，上面作为逆时针，下面作为顺时针</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF100.png" alt="三维建模技术100" style="zoom:50%;" /><blockquote><p>5.利用平滑曲线在俯视图中绘制出公路大致样子，之后在左视图中调整高低</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF101.png" alt="三维建模技术101" style="zoom:50%;" /><blockquote><p>6.利用放样，分别拾取两个公路图形</p></blockquote><h1>三、效果图</h1><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF102.png" alt="三维建模技术102" style="zoom:50%;" /><h1>四、小结</h1><blockquote><p>通过实验四，复习了之前的编辑样条线内容，主要练习了对放样的使用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验三 二维图形建模的基本应用</title>
      <link href="/posts/31827/"/>
      <url>/posts/31827/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.4 下午 实验三</h1><h2 align="center">实验三 二维图形建模的基本应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用二维图形的建模方法制作一个汽车车标</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/blob/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient&#x2F;Experiment 3 Log.max)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF86.png" alt="三维建模技术86"></p><blockquote><p>1.为了方便绘制，首先绘制一个平面，调整大小与图片相等</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF87.png" alt="三维建模技术87"></p><blockquote><p>2.通过材质编辑器中的位图导入图片</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF88.png" alt="三维建模技术88"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF89.png" alt="三维建模技术89"></p><blockquote><p>3.绘制一个长方形大致包围外轮廓</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF90.png" alt="三维建模技术90"></p><blockquote><p>4.对长方形通过编辑样条线，与外轮廓贴合</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF91.png" alt="三维建模技术91"></p><blockquote><p>5.对外轮廓长方形利用编辑样条线中的轮廓，绘制出内轮廓</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF92.png" alt="三维建模技术92"></p><blockquote><p>6.绘制一个长方形大致包裹字母H，并用样条线编辑顶点使之贴合</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF93.png" alt="三维建模技术93"></p><blockquote><p>7.绘制两个椭圆</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF94.png" alt="三维建模技术94"></p><blockquote><p>8.对两个椭圆进行样条线编辑，对顶点进行调整，与H贴合</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF95.png" alt="三维建模技术95"></p><blockquote><p>9.将内轮廓长方形与两个椭圆附加并作差集运算</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF96.png" alt="三维建模技术96"></p><h1>三、效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF96.png" alt="三维建模技术96"></p><h1>四、小结</h1><blockquote><p>通过实验三，更加熟练的利用了编辑样条线，尤其是布尔运算(非闭合曲线不能运算！搞了半天被坑到了)，这是前两个实验所没有的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验二 三维图形建模的基本应用</title>
      <link href="/posts/40346/"/>
      <url>/posts/40346/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.3.21 下午 实验二</h1><h2 align="center">实验二 三维图形建模的基本应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用三维几何体的建模方法创建桌子</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient)</p></blockquote><blockquote><p>1.在前视图中绘制弧，在俯视图中绘制圆，如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF39.png" alt="三维建模技术39"></p><blockquote><p>2.利用编辑样条线中Bezier角点调整弧线</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF40.png" alt="三维建模技术40"></p><blockquote><p>3.利用放样，拾取圆形对弧线放样，如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF41.png" alt="三维建模技术41"></p><blockquote><p>4.绘制切角圆柱体，作为桌板</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF42.png" alt="三维建模技术42"></p><blockquote><p>5.利用对齐，调整桌腿位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF43.png" alt="三维建模技术43"></p><blockquote><p>6.调整旋转轴位置(设置仅影响轴，拖动<code>x</code>向左)，z轴与切角圆柱体圆心对齐</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF44.png" alt="三维建模技术44"></p><blockquote><p>7.利用阵列复制，实现对桌腿的复制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF45.png" alt="三维建模技术45"></p><h1>三、效果图</h1><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF46.png" alt="三维建模技术46"></p><h1>四、小结</h1><blockquote><p>通过对桌子的绘制，除了利用了实验一中平滑线条、平移、编辑样条线、Bezier角点，还用了放样与阵列</p><p>其中阵列我也是第一次使用到，因为先前学过soildworks，通过度娘发现，3ds也可以改变旋转轴位置，即步骤6中选中桌腿设置仅影响轴，然后拖动x轴位置，在阵列时选择Z轴90°旋转</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB开发技术作业 学生信息列表效果(display布局)</title>
      <link href="/posts/65203/"/>
      <url>/posts/65203/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS按要求实现学生信息列表效果"><a href="#CSS按要求实现学生信息列表效果" class="headerlink" title="CSS按要求实现学生信息列表效果"></a>CSS按要求实现学生信息列表效果</h2><h1 align="center">🌴 2022.3.24 作业</h1><h2>🚀 要求</h2><blockquote><p>编写CSS，使得所给的学生列表页面实现要求的样式效果，要用到的主要属性如下，自己查阅相关资料进行学习</p><ul><li>主要用<code>flex布局</code>，查阅<code>flex布局</code>相关属性</li><li>元素布局相关<code>box-shadow</code>、<code>padding</code>、<code>margin</code>、<code>border</code>、<code>border-radius</code></li><li>颜色相关<code>background-color</code>、<code>color</code>等</li><li>字体相关<code>font-size</code>、<code>font-weight</code>等</li><li>动画相关<code>transition</code>、<code>tranform</code>等</li></ul></blockquote><h2>🚀 效果图</h2><blockquote><ul><li>1~8将四个信息放在四个块元素中，使用<code>display: flex;</code>让页面块元素占用同一行。<code>flex-wrap: wrap;</code>让块元素随页面大小变化</li><li>62~89使用<code>display: inline-block;</code>行内块元素使兴趣爱好单独占一个块(读书和篮球分开显示)</li><li>91~96<code>display: block;</code>使.msg-span-div下的span为块元素独自一行(学号、姓名、系别、爱好单独一行)</li><li>98~103<code>display: inline-block;</code>单独设置姓名和性别为行内块，在同一行</li></ul><p>主要就是<code>display</code>布局，剩下应该都能看懂，就不解释了</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF14.gif" alt="JAVA WEB开发技术14" style="zoom: 80%;" /><h2>🚀 代码</h2><blockquote><p>小张自己的代码，仅供参考。<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/JAVA%20WEB/Task">源文件</a></p></blockquote><blockquote><p><code>.css</code></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ul */</span></span><br><span class="line"><span class="selector-id">#msgList-ul</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">display</span>: flex;<span class="comment">/* 设置flex容器 */</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;<span class="comment">/* 允许li块元素随页面大小换行 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;<span class="comment">/* 文本不换行 */</span></span><br><span class="line"><span class="attribute">list-style-type</span>: none;<span class="comment">/* 去除列表样式 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 女生背景 */</span></span><br><span class="line"><span class="selector-class">.female</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">330px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ffccdd</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">#999</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 男生背景 */</span></span><br><span class="line"><span class="selector-class">.male</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">330px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#abccff</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">#999</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图片 */</span></span><br><span class="line"><span class="selector-class">.img-div</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;<span class="comment">/* 边框圆角 */</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#F2F2F2</span>;<span class="comment">/* 边框粗细风格颜色 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息div */</span></span><br><span class="line"><span class="selector-class">.msg-span-div</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 姓名 */</span></span><br><span class="line"><span class="selector-class">.name-span</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 性别 */</span></span><br><span class="line"><span class="selector-class">.sex-span</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 女兴趣爱好 */</span></span><br><span class="line"><span class="selector-class">.female</span> <span class="selector-class">.like-span</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">1000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;<span class="comment">/* 设置盒子为行内块 */</span></span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff8844</span>;</span><br><span class="line"><span class="comment">/* 设置盒子内元素水平居中 */</span></span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="comment">/* 设置盒子内容垂直居中 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 男兴趣爱好 */</span></span><br><span class="line"><span class="selector-class">.male</span> <span class="selector-class">.like-span</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#F0FFFF</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="comment">/* 设置盒子为行内块 */</span></span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#4488ff</span>;</span><br><span class="line"><span class="comment">/* 设置盒子内元素水平居中 */</span></span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="comment">/* 设置盒子内容垂直居中 */</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使.msg-span-div下的span为块元素独自一行 */</span></span><br><span class="line"><span class="selector-class">.msg-span-div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单独设置姓名和性别为行内块，在同一行 */</span></span><br><span class="line"><span class="selector-class">.msg-span-div</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置触发样式 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="attribute">cursor</span>: pointer;<span class="comment">/* 鼠标样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>.html</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>学生信息列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/3.24%20学生信息列表.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;msgList-ul&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/9901.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>182056101<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>张伞<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/9902.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>182056102<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>李斯<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/9903.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>172056103<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>王武<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/9904.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;msg-span-div&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>172056101<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name-span&quot;</span>&gt;</span>赵柳<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sex-span&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;depart-span&quot;</span>&gt;</span>计算机工程系<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;like-span&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>🚀 知识总结</h2><blockquote><p>上一节作业刚自己学了一下<a href="https://blog.csdn.net/weixin_30340745/article/details/95404950?ops_request_misc=%7B%22request_id%22:%22164717537816780366519369%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164717537816780366519369&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-95404950.es_vector_control_group&utm_term=display:+flex&spm=1018.2226.3001.4187">flex</a>属性这节就用到了嘿嘿，首先搞清<code>div</code>默认是块级元素即独占一行，<code>span</code>默认是行内块元素即共占一个块，以上代码主要用到：</p><ul><li><code>display: flex;</code>让页面div块级元素占用同一行</li><li><code>display: inline-block;</code>使每一个span单独占一个块(“读书”、”篮球”默认是连在一起的一个块，所以用这个属性来分开)</li><li><code>display: block;</code>使span为块元素独自一行</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3ds Max 实验一 场景对象操作的综合应用-花车</title>
      <link href="/posts/44612/"/>
      <url>/posts/44612/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.3.21 下午 实验一</h1><h2 align="center">实验一 场景对象操作的综合应用</h2><h1>一、实验要求</h1><blockquote><p>熟悉3DS MAX 软件，利用已有的汽车模型，制作一个花车</p></blockquote><h1>二、实验步骤</h1><blockquote><p>小张自己的建模过程简述，仅供参考。[MAX源文件](<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/3D">https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/3D</a> modeling technology&#x2F;Experient)</p></blockquote><blockquote><p>1.利用平滑线条，在正视图大概绘制轮廓线。使用编辑样条线中的顶点模式，利用“优化”、“Bezier角点”细微调整。效果如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF33.png" alt="三维建模技术33"></p><blockquote><p>2.利用镜像，将轮廓线X轴对称</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF34.png" alt="三维建模技术34"></p><blockquote><p>3.在俯视图，使用平滑线条参照机盖大小，绘制出心形，重复1操作，使用编辑样条线中的顶点模式，利用 “优化”、“Bezier角点”细微调整</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF35.png" alt="三维建模技术35"></p><blockquote><p>4.将心型平移到机盖上，在编辑样条线中的顶点模式下，对顶点进行微调，使心型与机车盖贴合</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF36.png" alt="三维建模技术36"></p><blockquote><p>5.利用间隔复制，分别拾取心型路径、汽车轮廓，将花复制在车顶上</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF37.png" alt="三维建模技术37"></p><h1>三、效果图</h1><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF38.png" alt="三维建模技术38" style="zoom:50%;" /><h1>四、小结</h1><blockquote><p>本节主要利用到的操作有：平滑线条、平移、编辑样条线、Bezier角点、间隔复制，实验一基本没什么难度就是练习一下学到的知识</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB开发技术作业 个人基本信息表单</title>
      <link href="/posts/44155/"/>
      <url>/posts/44155/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-form表单-个人基本信息"><a href="#HTML-form表单-个人基本信息" class="headerlink" title="HTML form表单-个人基本信息"></a>HTML form表单-个人基本信息</h2><h1 align="center">🌴 2022.3.13 作业</h1><h2>🚀 要求</h2><blockquote><p>使用html的<code>form</code>表单中的各个标签，完成在上一题目中“个人基本信息”部分的表单输入页面的设计</p><p>个人基本信息中至少包括以下内容：</p><p>姓名、性别、出生日期、所属省份、兴趣爱好、手机号码、个人简介等。大家可以根据各项信息的特点选择合适的表单元素，可以编写css使页面呈现美观的效果</p><p>注意：</p><ul><li>可以参照网络上一些页面，表格中的内容要为自己的真实内容（身份证号除外），所有代码在一个html文件中</li><li>页面上所有的代码自己书写，注意增加一些有别于其他同学的内容，所有的代码都要知道其作用、含义</li><li>编码整洁、规范，清晰易读，添加必要的注释，对页面元素或样式进行说明</li></ul></blockquote><h2>🚀 代码</h2><blockquote><p>小张自己的代码，仅供参考。<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/JAVA%20WEB/Task">源文件</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>个人信息表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 调整页面布局 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;<span class="comment">/* 设置flex容器 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;<span class="comment">/* 居中 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;<span class="comment">/* 交叉轴的中点对齐 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">430px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: papayawhip;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;<span class="comment">/* 设置flex容器，块元素不换行 */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0.2</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* label与label后input/section/textarea的间距 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">section</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">textarea</span>,</span></span><br><span class="line"><span class="language-css">select &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#2233ee</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCCCFF</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#66ff88</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#ffbaff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#CCCCFF</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#CCCCCC</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ff6688</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#aaffaa</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 设置触发样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 姓名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 性别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;women&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 出生日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 所属省份 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>所属省份:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;NeiMenggu&quot;</span>&gt;</span>内蒙古<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;TianJin&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;HeBei&quot;</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;ShanXi&quot;</span>&gt;</span>山西省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 兴趣爱好 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>兴趣爱好:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span> /&gt;</span>体育</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;travel&quot;</span> /&gt;</span>旅游</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> /&gt;</span>音乐</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;book&quot;</span> /&gt;</span>读书</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 手机号码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;nserName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 个人简介 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人简介:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;introduction&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;22&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px; justify-content: space-around;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>🚀 效果图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF10.png" alt="JAVA WEB开发技术10" style="zoom: 67%;" /><h2>🚀 知识总结</h2><blockquote><p>以前没用过太多display的属性，一直实用<code>margin</code>和<code>padding</code>来布局位置，这次自己在CSDN学了一下<code>display:flex;</code>，大概意思就是把当前元素设置为一个容器，默认容器内的所有块元素在同一行内，之后通过容器属性来布局位置会方便很多</p></blockquote><p>其它<code>flex</code>属性详见<a href="https://blog.csdn.net/weixin_30340745/article/details/95404950?ops_request_misc=%7B%22request_id%22:%22164717537816780366519369%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164717537816780366519369&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-95404950.es_vector_control_group&utm_term=display:+flex&spm=1018.2226.3001.4187">display:flex属性详解</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB开发技术作业 HTML国家奖学金申请审批表</title>
      <link href="/posts/49243/"/>
      <url>/posts/49243/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.3.12 作业</h1><h2>🚀 要求</h2><blockquote><p>使用html的表格<code>table</code>相关的各个标签，完成课件中“国家奖学金申请审批表”的页面设计</p><p>注意：</p><ul><li>可以参照网络上一些页面，表格中的内容要为自己的真实内容（身份证号除外），所有代码在一个html文件中</li><li>页面上所有的代码自己书写，注意增加一些有别于其他同学的内容，所有的代码都要知道其作用、含义</li><li>编码整洁、规范，清晰易读，添加必要的注释，对页面元素或样式进行说明</li></ul></blockquote><h2>🚀 代码</h2><blockquote><p>小张自己的代码，仅供参考。<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/JAVA%20WEB/Task">源文件</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 表格和文本内容居中 */</span></span></span><br><span class="line"><span class="language-css">* &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 合并 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 行列属性 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">td</span>,<span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 标题属性 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">caption</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;650px&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom: 20px;&quot;</span>&gt;</span>国家奖学金申请表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 5px;font-weight: 600;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span>学校:xx大学<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 15px;&quot;</span>&gt;</span>院系:xxxxxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px;&quot;</span>&gt;</span>学号:xxxxxxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基本情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;10%&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 800;padding: 0 8px;&quot;</span>&gt;</span>基本情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;12%&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;15%&quot;</span>&gt;</span>张时贰<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;10%&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;13%&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;10%&quot;</span>&gt;</span>出生年月<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span>&gt;</span>2001.10.20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>群众<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>入学时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2019.09.01<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>专业<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>计算机科学与技术<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>学制<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>4年<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>联系电话<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1310446718<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>身份证号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 0px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 45px;border: hidden;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 学习情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 800;padding: 0 8px;&quot;</span>&gt;</span>学习情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>成绩排名:<span class="tag">&lt;<span class="name">u</span>&gt;</span>10;/100;<span class="tag">&lt;/<span class="name">u</span>&gt;</span>(名次/总人数)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>实行综合考评排名:是<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>否<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>必修课<span class="tag">&lt;<span class="name">u</span>&gt;</span>20<span class="tag">&lt;/<span class="name">u</span>&gt;</span>门,其中及格以上<span class="tag">&lt;<span class="name">u</span>&gt;</span>20<span class="tag">&lt;/<span class="name">u</span>&gt;</span>门<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>如是,排名:<span class="tag">&lt;<span class="name">u</span>&gt;</span>10/100<span class="tag">&lt;/<span class="name">u</span>&gt;</span>(名次/总人数)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 大学期间获奖情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 800;padding: 0 8px;&quot;</span>&gt;</span>大学期间主要获奖情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>获奖名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>颁奖单位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;height: 20px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2021.06.11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>优秀志愿者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>院团委<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;height: 20px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2021.12.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>英语四级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>大学英语等级考试<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;height: 20px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2021.10.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>社会实践二等奖<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>院团委<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;height: 20px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 申请理由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>申请<span class="tag">&lt;<span class="name">br</span>&gt;</span>理由<span class="tag">&lt;/<span class="name">b</span>&gt;</span>(200字)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>本人自入学以来一直对自己严格妥求，在各方面认真努力行人生目标。</span><br><span class="line">思想上，作为预各党员。积极向优秀党员学习，认真学习并跤行党章的内容，不断提高自己的党性</span><br><span class="line">修荞.工作上，作为班长我一直兢兢业业，积极配合班主任和系里老师做好学生工作.团结同学，使</span><br><span class="line">大家都能够和睦相处,积极参与学校的社团,各项活动及勒工助学岗位.学习上.我一直严格要求自己。</span><br><span class="line">入学以来各学期成绩优异，拿过多次一等奖学金.在专业方面考取了计算机二级。三级，四级证书，</span><br><span class="line">已成功完成大学生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: -480px;&quot;</span>&gt;</span>创新创业项目<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">                            申请人签名(手签):张时贰</span><br><span class="line">                            </span><br><span class="line">                             2022年03月13日</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>🚀 效果图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF9.png" alt="JAVA WEB开发技术9" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB开发技术作业 HTML个人简历</title>
      <link href="/posts/60053/"/>
      <url>/posts/60053/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.3.9 作业</h1><h2>🚀 要求</h2><blockquote><p>使用html中的各种文本标签，制作一个个人信息介绍页面。信息包括：</p><ul><li>个人基本信息：姓名、出生日期、籍贯、民族…….，尽量全面</li><li>个人教育经历：哪年哪月至哪年哪月在什么学校接受什么教育</li><li>个人工作经历：哪年哪月至哪年哪月在什么单位工作，担任什么职务</li><li>个人家庭情况：父亲、子女等的姓名、出生年月、政治面貌、工作单位等信息</li></ul><p>注意：</p><ul><li><p>可以参照网络上对科学家、领导人的介绍页面</p></li><li><p>页面上所有的代码尽量自己书写，页面内容及代码尽量有明显区别于其他人的地方，所有的代码都要知道其作用、含义</p></li><li><p>编码整洁、规范，清晰易读，添加必要的注释，对页面元素或样式进行说明</p></li></ul></blockquote><h2>🚀 表格版代码</h2><blockquote><p>小张自己的代码，仅供参考。<a href="https://github.com/GC-ZF/TG-Learn/tree/main/Second-semester-of-junior-year/JAVA%20WEB/Task">源文件</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>个人信息介绍页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 整体内容居中 */</span></span></span><br><span class="line"><span class="language-css">* &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 合并表格的线条 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 规定行列线条熟属性 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 标题大小 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">caption</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">700px</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>个信息介绍<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;5%&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700;padding: 0 8px;&quot;</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;15%&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">15%</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">15%</span>&gt;</span>出生年月<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">10%</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>毕业院校<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>专业<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>籍贯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 教育经历 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700;padding: 0 8px;&quot;</span>&gt;</span>教育经历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>学校<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 个人工作经历 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700;padding: 0 8px;&quot;</span>&gt;</span>工作经历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>单位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>任职<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 家庭情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700;padding: 0 8px;&quot;</span>&gt;</span>家庭情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>关系<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>出生年月<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>工作单位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>🚀 效果图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF7.png" alt="JAVA WEB开发技术7" style="zoom: 67%;" /><h2>🚀 网页版代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人简历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 整个页面居中 */</span></span></span><br><span class="line"><span class="language-css">            * &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 为整个页面添加边框颜色 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.page</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">860px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: azure;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 左侧块属性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-left</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: azure;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 头像 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.head</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: -<span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 设置左侧线条 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.line</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: -<span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 线条上文字的位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.lineup</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: -<span class="number">420px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 线条下文字的位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.linedown</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: -<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 右侧块属性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-right</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: -<span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 姓名 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-rightname</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding-top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 右侧标题位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-righttitle</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#3498DB</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 右侧标题内文字位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-righttitle</span> <span class="attribute">font</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 右侧块内容 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.div-righttext</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 合并表格的线条 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 规定行列线条熟属性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: black <span class="number">0.0625rem</span> solid;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--左侧内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/3455174314234152aae31fcef73b09b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byg5pe26LSw,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--个人信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;lineup&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;dodgerblue&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>个人信息：<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;linedown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>地址：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>山西省太原市<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>出生日期：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>2001.01.01<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>民族：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>汉<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>电话：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>1310446718<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>1310446718@qq.com<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--教育经历--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;lineup&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;dodgerblue&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>教育经历：<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;linedown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2007.9.1 xx小学<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2013.9.1 xx初中<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2016.9.1 xx高中<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2019.9.1 xx大学<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 个人工作经历 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;lineup&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;dodgerblue&quot;</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>工作经历：<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;linedown&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2020.01.01-05.01 美团外卖 配送<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                        2020.05.02-10.01 饿了么 配送<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                        2020.10.01-12.31 滴滴 专车<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                        2021.01.01-05.01 曹操 顺风车</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--y--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-rightname&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span>张时贰<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-rightname&quot;</span>&gt;</span>求职意向：Java开发工程师<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttitle&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span> <span class="attr">color</span>=<span class="string">&quot;floralwhite&quot;</span>&gt;</span>教育背景<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttext&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>计算机科学与技术<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>本科<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>2019.9.6-2023.6</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>主修课程：<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>计算机网络、C++、<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Java基础、计算机操作系统、<span class="tag">&lt;<span class="name">br</span> /&gt;</span>数据库原理、计算机组成原理<span class="tag">&lt;<span class="name">br</span> /&gt;</span>JAVA WEB、Python<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttitle&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span> <span class="attr">color</span>=<span class="string">&quot;floralwhite&quot;</span>&gt;</span>项目经验<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttext&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>仿apple官网网页界面设计<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>学生管理系统<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttitle&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span> <span class="attr">color</span>=<span class="string">&quot;floralwhite&quot;</span>&gt;</span>家庭情况<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div-righttext&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 家庭情况 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;5%&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700;padding: 0 8px;&quot;</span>&gt;</span>家庭情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>关系<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>出生年月<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>工作单位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;30px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2>🚀 效果图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF8.png" alt="JAVA WEB开发技术8" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编译原理】判断文法是几型文法</title>
      <link href="/posts/43535/"/>
      <url>/posts/43535/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天上课学习文法，感觉对于概念很模糊，下面两张图截自《编译原理 第四版》。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/69ca38694c824ce6a2d1ffe03fafc661.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byg5pe26LSw,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p><a href="https://blog.csdn.net/weixin_43721056/article/details/117995448?ops_request_misc=%7B%22request_id%22:%22164734919816781685325739%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164734919816781685325739&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-117995448.142%5Ev2%5Epc_search_insert_es_download,143%5Ev4%5Econtrol&utm_term=%E5%87%A0%E5%9E%8B%E6%96%87%E6%B3%95%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD&spm=1018.2226.3001.4187">以下内容转载自梦里一明月的博客-CSDN博客</a><br>首先，应该明确，四种文法，从0型到3型，其规则和约定越来越多，限制条件也越来越多，所以，我们判断时可以从最复杂的3型进行判断，依次向下判断，如果不符合3型的，那再看是不是2型的，不是2型的，再看是不是1型的。</p></blockquote><h3>🚀 3 型文法</h3><p><strong>第一点：</strong> 左边必须只有一个字符，且必须是非终结符<br><strong>第二点：</strong> 其右边最多只能有两个字符，且当有两个字符时必须有一个为终结符而另一个为非终结符。当右边只有一个字符时，此字符必须为终结符<br><strong>第三点：</strong> 对于3型文法中的所有产生式，其右边有两个字符的产生式，这些产生式右边两个字符中终结符和非终结符的相对位置一定要固定，也就是说如果一个产生式右边的两个字符的排列是：终结符＋非终结符，那么所有产生式右边只要有两个字符的，都必须前面是终结符而后面是非终结符。反之亦然，要么，就全是：非终结符＋终结符</p><h3>🚀 2型文法</h3><p><strong>第一点：</strong> 与3型文法的第一点相同，即：左边必须有且仅有一个非终结符<br><strong>第二点：</strong> 2型文法所有产生式的右边可以含有若干个终结符和非终结符（只要是有限的就行，没有个数限制）</p><h3>🚀 1型文法</h3><p><strong>第一点：</strong> 1型文法所有产生式左边可以含有一个、两个或两个以上的字符，但其中必须至少有一个非终结符<br><strong>第二点：</strong> 与2型文法第二点相同</p><h3>🚀 0型文法</h3><p>最后是0型文法，这个就不用看了，只要你能描述出来，都属于这个类型，即0型</p><blockquote><p>看完这个对文法的总结，就会清晰很多，附一个题练习</p><p><img src="https://img-blog.csdnimg.cn/591c0a5bd0dd4cb0b04a900d6d0aecf9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byg5pe26LSw,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA WEB上课笔记汇总</title>
      <link href="/posts/13970/"/>
      <url>/posts/13970/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.3.1 早八</h1><h2 id="1-1-程序开发体系结构"><a href="#1-1-程序开发体系结构" class="headerlink" title="1.1 程序开发体系结构"></a>1.1 程序开发体系结构</h2><h3 id="1-1-1-C-x2F-S体系结构"><a href="#1-1-1-C-x2F-S体系结构" class="headerlink" title="1.1.1 C&#x2F;S体系结构"></a>1.1.1 C&#x2F;S体系结构</h3><blockquote><p>C&#x2F;S是<strong>Client&#x2F;Server</strong>的缩写，即<strong>客户端&#x2F;服务器</strong>结构。这种结构是将需要处理的业务合理地<strong>分配到客户端和服务器端</strong>，这样可以大大降低通信成本，但是升级维护相对困难。比如我们手机中安装的微信、qq、王者荣耀等应用程序就是C&#x2F;S结构</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF1.png" alt="JAVA WEB开发技术1"></p><h3 id="1-1-2-B-x2F-S体系结构"><a href="#1-1-2-B-x2F-S体系结构" class="headerlink" title="1.1.2 B&#x2F;S体系结构"></a>1.1.2 B&#x2F;S体系结构</h3><blockquote><p>B&#x2F;S是<strong>BRower&#x2F;Server</strong>的缩写，即<strong>浏览器&#x2F;服务器</strong>结构。使用浏览器可以直接访问</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF2.png" alt="JAVA WEB开发技术2"></p><h3 id="1-1-3-两种体系结构的比较"><a href="#1-1-3-两种体系结构的比较" class="headerlink" title="1.1.3 两种体系结构的比较"></a>1.1.3 两种体系结构的比较</h3><table><thead><tr><th></th><th>C&#x2F;S结构</th><th>B&#x2F;S结构</th></tr></thead><tbody><tr><td>开发和维护成本方面</td><td>对于不同客户端要开发不同的程序，而且软件的安装、调试和升级均需要在所有的客户机上进行</td><td>不必在客户端进行安装及维护</td></tr><tr><td>客户端负载</td><td>应用程序的功能越复杂，客户端程序也就越庞大</td><td>把事务处理逻辑部分交给了服务器，客户端只需要进行显示</td></tr><tr><td>安全性</td><td>高</td><td>低</td></tr></tbody></table><h2 id="1-2-Web简介"><a href="#1-2-Web简介" class="headerlink" title="1.2 Web简介"></a>1.2 Web简介</h2><h3 id="1-2-1-什么是Web"><a href="#1-2-1-什么是Web" class="headerlink" title="1.2.1 什么是Web"></a>1.2.1 什么是Web</h3><blockquote><p>Web在计算机网页开发设计中就是<strong>网页</strong>的意思</p></blockquote><p>网页是网站中的一个页面，通常是HTML格式的。网页可以展示文字、图片、媒体等，需要通过浏览器阅读</p><h3 id="1-2-2-Web应用程序的工作原理"><a href="#1-2-2-Web应用程序的工作原理" class="headerlink" title="1.2.2 Web应用程序的工作原理"></a>1.2.2 Web应用程序的工作原理</h3><h4>🌵静态网站</h4><p>早期的Web应用主要是静态页面的浏览，即静态网站</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF3.png" alt="JAVA WEB开发技术3"></p><h4>🌵动态网站</h4><p>随着网络的发展，很多线下服务开始向网上发展，基于Internet的Web应用也变得越来越复杂，用户所访问的资源已不能只是局限于服务器上保存的静态网页，更多的内容需要根据用户的请求动态生成页面信息，即动态网站</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF4.png" alt="JAVA WEB开发技术4"></p><h3 id="1-2-3-Web的发展历程"><a href="#1-2-3-Web的发展历程" class="headerlink" title="1.2.3 Web的发展历程"></a>1.2.3 Web的发展历程</h3><blockquote><p>静态网站→动态网站→Web 2.0</p></blockquote><p>Web 2.0：以用户为中心，通过网络应用(Web Applications)促进网络上人与人间的信息交换和协同合作(eg：博客)</p><h2 id="1-3-Web-开发技术"><a href="#1-3-Web-开发技术" class="headerlink" title="1.3 Web 开发技术"></a>1.3 Web 开发技术</h2><h3 id="1-3-1-客户端应用技术-前端技术"><a href="#1-3-1-客户端应用技术-前端技术" class="headerlink" title="1.3.1 客户端应用技术(前端技术)"></a>1.3.1 客户端应用技术(前端技术)</h3><h4>🚀 HTML</h4><blockquote><p>超文本标记语言（HyperTeLxt Markup Language，简称：HTML）是一种用于创建网页的标准标记语言</p><p>可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由<strong>浏览器</strong>来解析</p></blockquote><h4>🚀 HTML5</h4><blockquote><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。HTML5的设计<strong>目的</strong>是为了在移动设备上支持多媒体</p></blockquote><h4>🚀 CSS</h4><blockquote><p>CSS 指层叠样式表 (Cascading Style Sheets)，样式定义如何显示HTML 元素。CSS可以对页面元素的布局、字体、颜色、背景和其它效果实现控制</p></blockquote><h4>🚀 CSS预处理</h4><blockquote><p>为CSS增加编程特性，允许用变量、嵌套规则、 mixin、导入等众多功能， 并且完全兼容 CSS 语法，使 CSS 更易维护和扩展</p></blockquote><h4>🚀 Flash</h4><blockquote><p>Flash是一种交互式矢量动画制作技术，它可能只是很简单的动画。也可以通过添加图片、声音、视频和特殊效果，构建包含丰富媒体的Flash应用程序</p></blockquote><h4>🚀 客户端脚本技术</h4><blockquote><ul><li>JavaScript</li><li>VBScript</li></ul></blockquote><h3 id="1-3-2-服务器端应用技术"><a href="#1-3-2-服务器端应用技术" class="headerlink" title="1.3.2 服务器端应用技术"></a>1.3.2 服务器端应用技术</h3><h4>🌴 CGI</h4><blockquote><p>CGI(Common Gateway Interface) 通用网关接口。CGI是外部应用程序（CGI程序）与WEB服务器之间的接口标准，是在CGI程序和Web服务器之间传递信息的过程。CGI规范允许Web服务器执行外部程序，并将它们的输出发送给Web浏览器，CGI将Web的一组简单的静态超媒体文档变成一个完整的新的交互式媒体</p></blockquote><h4>🌴 ASP</h4><blockquote><p>ASP 为 Active Server Pages （动态服务器页面），是一项微软公司的技术</p><p>ASP 是在 <strong>IIS</strong> （ Internet Information Services ， Internet 信息服务）中运行的程序</p></blockquote><h4>🌴 PHP</h4><blockquote><p>PHP（Hypertext Preprocessor，PHP：超文本预处理器）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域</p></blockquote><h4>🌴 ASP.NET</h4><blockquote><p>ASP 为Active Server Pages （动态服务器页面）</p><p>ASP.NET 是一个使用 HTML、CSS、JavaScript 和服务器脚本创建网页和网站的开发框</p><p>ASP.NET是.NET框架的一部分，ASP.NET 支持三种不同的开发模式：</p><ul><li><p>lWeb Pages（Web 页面）</p></li><li><p>lMVC（Model View Controller 模型-视图-控制器）</p></li><li><p>lWeb Forms（Web 窗体）</p></li></ul></blockquote><h4>🌴 JSP</h4><blockquote><p>JSP全称<strong>Java Server Pages</strong>，是一种动态网页开发技术</p><p>使用JSP标签在HTML网页中插入Java代码。标签通常以<code>&lt;%</code>开头以<code>%&gt;</code>结束</p><p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP</p><p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页</p></blockquote><blockquote><p>另外还有 Python Web，Ruby on rails</p></blockquote><h1 align="center">🌴 2022.3.3 早十</h1><h2 id="2-1-HTML"><a href="#2-1-HTML" class="headerlink" title="2.1 HTML"></a>2.1 HTML</h2><h3 id="2-1-1-创建第一个HTML文件"><a href="#2-1-1-创建第一个HTML文件" class="headerlink" title="2.1.1 创建第一个HTML文件"></a>2.1.1 创建第一个HTML文件</h3><h4>🚀 什么是HTML?</h4><blockquote><p>HTML 是用来描述网页的一种语言, 指的是超文本标记语言: <strong>HyperText Markup Language</strong>。HTML 不是一种编程语言，而是一种<strong>标记语言</strong>，标记语言是一套标记标签 (markup tag)，HTML 使用<strong>标记标签</strong>来描述网页，HTML 文档包含了HTML 标签及文本内容。HTML文档也叫做 <strong>web 页面</strong></p></blockquote><h4>🚀 HTML标签</h4><blockquote><p>HTML 标签是由<strong>尖括号包围</strong>的关键词，比如 <code>&lt;html&gt;</code></p><p>HTML 标签通常是<strong>成对</strong>出现的，比如 <code>&lt;b&gt;</code> 和<code> &lt;/b&gt;</code></p><p>标签对中的第一个标签是开始标签，第二个标签是结束标签，开始和结束标签也被称为开放标签和闭合标签，<code>&lt;标签&gt;内容&lt;/标签&gt;</code></p></blockquote><h4>🚀 HTML元素</h4><blockquote><p>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.但是严格来讲, 一个 HTML 元素包含了开始标签与结束标签，如<code>&lt;p&gt;内容&lt;/p&gt;</code></p></blockquote><h4>🚀 HTML编辑器</h4><blockquote><p><a href="https://notepad-plus-plus.org/">Notepad++</a>，<a href="http://www.sublimetext.com/">Sublime Text</a>，<a href="http://www.dcloud.io/">HBuilder</a>，<a href="https://www.eclipse.org/downloads/">Eclipse</a></p></blockquote><h3 id="2-1-2-HTML文档结构"><a href="#2-1-2-HTML文档结构" class="headerlink" title="2.1.2 HTML文档结构"></a>2.1.2 HTML文档结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 HTML标记</h4><blockquote><p><code>&lt;html&gt;</code>标记是HTML文档的开头，所有HTML标记都应放置在<html>标记中</p></blockquote><h4>🚀 HEAD标记</h4><blockquote><p><code>&lt;head&gt;</code>元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息，可以添加在头部区域的元素标签为: <code>&lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;, &lt;base&gt;</code></p></blockquote><table><thead><tr><th align="center"><code>&lt;title&gt;</code></th><th>定义了文档的标题</th></tr></thead><tbody><tr><td align="center"><code>&lt;base&gt;</code></td><td>定义了页面链接标签的默认链接地址</td></tr><tr><td align="center"><code>&lt;link&gt;</code></td><td>定义了一个文档和外部资源之间的关系</td></tr><tr><td align="center"><code>&lt;meta&gt;</code></td><td>定义了HTML文档中的元数据</td></tr><tr><td align="center"><code>&lt;script&gt;</code></td><td>定义了客户端的脚本文件</td></tr><tr><td align="center"><code>&lt;style&gt;</code></td><td>定义了HTML文档的样式文件</td></tr></tbody></table><h5>🚁 title标记</h5><blockquote><p><code>&lt;title&gt;</code> 标签定义了不同文档的标题</p><p><code>&lt;title&gt;</code> 在 HTML&#x2F;XHTML 文档中是必须的</p><p><code>&lt;title&gt;</code> 元素:定义了浏览器工具栏的标题,当网页添加到收藏夹时，显示在收藏夹中的标题</p><p>显示在搜索引擎结果页面的标题</p></blockquote><h5>🚁 body标记</h5><blockquote><p><code>&lt;body&gt; </code>标签定义文档的主体</p><p><code>&lt;body&gt;</code>元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等）</p></blockquote><h3 id="2-1-3-HTML文本标记"><a href="#2-1-3-HTML文本标记" class="headerlink" title="2.1.3 HTML文本标记"></a>2.1.3 HTML文本标记</h3><blockquote><p>换行标记<code>&lt;br&gt;</code>,无结束标记</p><p>段落标记<code>&lt;p&gt;</code></p><p>标题标记<code>&lt;h1&gt;</code> <code>&lt;h2&gt;</code>…<code>&lt;h6&gt;</code></p><p>居中标记<code>&lt;center&gt;</code></p><p>无序列表 <code>&lt;ul&gt;</code>,<code> &lt;li&gt;</code></p><p>有序列表 <code>&lt;ol&gt;</code>,<code> &lt;li&gt;</code></p><p>区域标记<code>&lt;span&gt;</code></p></blockquote><h4>🚀 块级元素特点</h4><blockquote><ul><li><p>总是在新行上开始，占据一整行</p></li><li><p>高度，行高以及外边距和内边距都可控制</p></li><li><p>宽度始终是与浏览器宽度一样，与内容无关</p></li><li><p>它可以容纳内联元素和其他块元素</p></li></ul></blockquote><h4>🚀 行内元素特点</h4><blockquote><ul><li>和其他元素都在一行上</li><li>高，行高及外边距和内边距部分可改变</li><li>宽度只与内容有关</li><li>行内元素只能容纳文本或者其他行内元素</li></ul></blockquote><h3 id="2-1-4-表格标记"><a href="#2-1-4-表格标记" class="headerlink" title="2.1.4 表格标记"></a>2.1.4 表格标记</h3><blockquote><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等</p></blockquote><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td>定义表格</td></tr><tr><td><code> &lt;th&gt;</code></td><td>定义表格的表头</td></tr><tr><td><code>&lt;tr&gt;</code></td><td>定义表格的行</td></tr><tr><td><code>&lt;td&gt;</code></td><td>定义表格单元</td></tr><tr><td><code>&lt;caption&gt;</code></td><td>定义表格标题</td></tr><tr><td><code>&lt;colgroup&gt;</code></td><td>定义表格列的组</td></tr><tr><td><code>&lt;col&gt;</code></td><td>定义用于表格列的属性</td></tr><tr><td><code>&lt;thead&gt;</code></td><td>定义表格的页眉</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>定义表格的主体</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td>定义表格的页脚</td></tr></tbody></table><h1 align="center">🌴 2022.3.8 早八</h1><h3 id="2-1-5-HTML表单标记"><a href="#2-1-5-HTML表单标记" class="headerlink" title="2.1.5 HTML表单标记"></a>2.1.5 HTML表单标记</h3><blockquote><p>表单（ <code>&lt;form&gt;</code> ）是一个包含表单元素的区域</p><p>表单元素是允许用户在表单中输入内容,比如：文本域、下拉列表、单选框、复选框等。表单是用户和网页交互信息的重要手段</p></blockquote><h4>🚀 form标签</h4><blockquote><p>用于创建供用户输入的 HTML 表单</p><p><code>&lt;form&gt;</code> 元素包含一个或多个如下的表单元素：</p><p><code>&lt;input&gt;</code> <code>&lt;textarea&gt;</code>  <code>&lt;button&gt;</code> <code>&lt;select&gt;</code> <code>&lt;option&gt;</code> <code>&lt;optgroup&gt;</code> <code>&lt;fieldset&gt;</code> <code>&lt;label&gt;</code></p></blockquote><h5>🚁 form属性</h5><table><thead><tr><th align="center">属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-accept-charset.html">accept-</a><a href="http://www.runoob.com/tags/att-form-accept-charset.html">charset</a></td><td>character_set</td><td>规定服务器可处理的表单数据字符集</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-action.html">action</a></td><td>URL</td><td>规定当提交表单时向何处发送表单数据</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-autocomplete.html">autocomplete</a>  *</td><td>on  off</td><td>规定是否启用表单的自动完成功能。</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-enctype.html">enctype</a></td><td>application&#x2F;x-www-form-urlencoded     multipart&#x2F;form-data     text&#x2F;plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method&#x3D;”post”  的情况）</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-method.html">method</a></td><td>get   post</td><td>规定用于发送表单数据的 HTTP  方法</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-name.html">name</a></td><td><em>text</em></td><td>规定表单的名称。</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-novalidate.html">novalidate</a></td><td>novalidate</td><td>如果使用该属性，则提交表单时不进行验证</td></tr><tr><td align="center"><a href="http://www.runoob.com/tags/att-form-target.html">target</a></td><td>_blank  _self    _parent _top</td><td>规定在何处打开 action  URL</td></tr></tbody></table><h5>🚁 botton属性</h5><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-autofocus.html">autofocus</a></td><td align="left">autofocus</td><td align="left">规定当页面加载时按钮应当自动地获得焦点。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-disabled.html">disabled</a></td><td align="left">disabled</td><td align="left">规定应该禁用该按钮。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-form.html">form</a></td><td align="left">form_id</td><td align="left">规定按钮属于一个或多个表单。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-formaction.html">formaction</a></td><td align="left">URL</td><td align="left">规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-formenctype.html">formenctype</a></td><td align="left">application&#x2F;x-www-form-urlencoded multipart&#x2F;form-data text&#x2F;plain</td><td align="left">规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-formmethod.html">formmethod</a></td><td align="left">get post</td><td align="left">规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-formnovalidate.html">formnovalidate</a></td><td align="left">formnovalidate</td><td align="left">如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-formtarget.html">formtarget</a></td><td align="left">_blank _self _parent _top <em>framename</em></td><td align="left">规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type&#x3D;”submit” 配合使用。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-name.html">name</a></td><td align="left">name</td><td align="left">规定按钮的名称。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-type.html">type</a></td><td align="left">button reset submit</td><td align="left">规定按钮的类型。</td></tr><tr><td align="left"><a href="https://www.runoob.com/tags/att-button-value.html">value</a></td><td align="left">text</td><td align="left">规定按钮的初始值。可由脚本进行修改。</td></tr></tbody></table><h5>🚁 select下拉菜单标记</h5><table><thead><tr><th>属性</th><th>值</th><th align="center">描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/tags/att-select-autofocus.html">Autofocus</a></td><td>autofocus</td><td align="center">规定在页面加载时下拉列表自动获得焦点。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-disabled.html">disabled</a></td><td>disabled</td><td align="center">当该属性为 true  时，会禁用下拉列表。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-form.html">form</a></td><td>form_id</td><td align="center">定义 select  字段所属的一个或多个表单。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-multiple.html">multiple</a></td><td>multiple</td><td align="center">当该属性为 true  时，可选择多个选项。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-name.html">name</a></td><td>name</td><td align="center">定义下拉列表的名称。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-required.html">required</a></td><td>required</td><td align="center">规定用户在提交表单前必须选择一个下拉列表中的选项。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-select-size.html">size</a></td><td><em>number</em></td><td align="center">规定下拉列表中可见选项的数目。</td></tr></tbody></table><h5>🚁 textarea多行文本标记</h5><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/tags/att-textarea-autofocus.html">autofocus</a> *</td><td>autofocus</td><td>规定当页面加载时，文本区域自动获得焦点。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-cols.html">cols</a></td><td><em>number</em></td><td>规定文本区域内可见的列数。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-disabled.html">disabled</a></td><td>disabled</td><td>规定禁用文本区域。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-form.html">form</a>  *</td><td>form_id</td><td>定义文本区域所属的一个或多个表单。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-maxlength.html">maxlength</a> *</td><td>number</td><td>规定文本区域允许的最大字符数。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-name.html">name</a></td><td>text</td><td>规定文本区域的名称。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-placeholder.html">Placeholder</a> *</td><td>text</td><td>规定一个简短的提示，描述文本区域期望的输入值。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-readonly.html">readonly</a></td><td>readonly</td><td>规定文本区域为只读。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-required.html">Required</a>  *</td><td>required</td><td>规定文本区域是必需的&#x2F;必填的。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-rows.html">rows</a></td><td>number</td><td>规定文本区域内可见的行数。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-textarea-wrap.html">Wrap</a> *</td><td>hard     soft</td><td>规定当提交表单时，文本区域中的文本应该怎样换行。</td></tr></tbody></table><h5>🚁 练习</h5><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF6.png" alt="JAVA WEB开发技术6" style="zoom:67%;" /><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>: <span class="number">1rem</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">form</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span>&#123;<span class="attribute">display</span>: inline-block;<span class="attribute">width</span>: <span class="number">5rem</span>;<span class="attribute">text-align</span>: right;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;introduction&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;15&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>专业：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">name</span>=<span class="string">&quot;profession&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;00&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>计算机科学与技术<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span>软件工程<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span>数字媒体<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;04&quot;</span>&gt;</span>网络工程<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> /&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span> /&gt;</span>体育</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;travel&quot;</span> /&gt;</span>旅游</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span> /&gt;</span>听音乐</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;book&quot;</span> /&gt;</span>读书</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>email：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-6-超链接与图片标记"><a href="#2-1-6-超链接与图片标记" class="headerlink" title="2.1.6 超链接与图片标记"></a>2.1.6 超链接与图片标记</h3><h4>🚀 超链接标记 a</h4><blockquote><p>HTML使用标签 <code>&lt;a&gt;</code>来设置超文本链接。超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。当把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手</p><p>在标签<code>&lt;a&gt;</code> 中使用了<code>href</code>属性来描述链接的地址</p><p>默认情况下</p><ul><li><p>一个未访问过的链接显示为蓝色字体并带有下划线</p></li><li><p>访问过的链接显示为紫色并带有下划线</p></li><li><p>点击链接时，链接显示为红色并带有下划线</p></li></ul></blockquote><h4>🚀 图像标记 img</h4><blockquote><p>在 HTML 中，图像由<code>&lt;img&gt;</code> 标签定义。<code>&lt;img&gt;</code> 是空标签，它只包含属性，并且没有闭合标签。要在页面上显示图像，需要使用源属性（src）。源属性的值是图像的 URL 地址</p></blockquote><table><thead><tr><th>属性</th><th>值</th><th align="center">描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/tags/att-img-alt.html">alt</a></td><td>text</td><td align="center">规定图像的替代文本。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-img-height.html">height</a></td><td>pixels</td><td align="center">规定图像的高度。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-img-src.html">src</a></td><td>URL</td><td align="center">规定显示图像的 URL。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-img-usemap.html">usemap</a></td><td>#mapname</td><td align="center">将图像定义为客户器端图像映射。</td></tr><tr><td><a href="http://www.runoob.com/tags/att-img-width.html">width</a></td><td>pixels</td><td align="center">规定图像的宽度。</td></tr></tbody></table><h2 id="2-2-CSS"><a href="#2-2-CSS" class="headerlink" title="2.2 CSS"></a>2.2 CSS</h2><h4>🚀 什么是CSS？</h4><blockquote><p>CSS 指<strong>层叠样式表</strong> (Cascading Style Sheets)，定义如何显示 HTML 元素</p><p>通过将样式通常存储在样式表中，是为了<strong>解决内容与表现分离</strong>的问题，外部样式表可以极大提高工作效率，通常存储在 CSS 文件中，多个样式定义可层叠为一</p></blockquote><h3 id="2-2-1-CSS-规则"><a href="#2-2-1-CSS-规则" class="headerlink" title="2.2.1 CSS 规则"></a>2.2.1 CSS 规则</h3><blockquote><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明，声明一般由属性及其对应值组成</p></blockquote><ul><li>选择器：选择需要改变样式的 HTML 元素</li><li>声明：由一个属性和一个值组成</li><li>属性（property）是希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开</li></ul><h3 id="2-2-2-CSS选择器"><a href="#2-2-2-CSS选择器" class="headerlink" title="2.2.2 CSS选择器"></a>2.2.2 CSS选择器</h3><h4>🚀 标签选择器</h4><blockquote><p>HTML页面是由很多标记组成，例如图片标记<img>、超链接标记<a>、表格标记<table>等。而CSS标记选择器就是<strong>声明页面中哪些标签</strong>采用哪些CSS样式。例如p选择器，就是用于声明页面中<strong>所有</strong><p>标记的样式风格</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>: <span class="number">30px</span>;<span class="attribute">color</span>: <span class="number">#0000FF</span>;<span class="attribute">font-family</span>: 黑体;&#125;<span class="comment">/* 标签选择器 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS选择器类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 类选择器</h4><blockquote><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。<br>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点“.”号显示。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.p2</span>&#123;<span class="attribute">color</span>: <span class="number">#FFC0CB</span>;&#125;<span class="comment">/* CSS类选择器 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>CSS类选择器类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 ID选择器</h4><blockquote><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#p1</span>&#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&#125;<span class="comment">/* CSS ID选择器 */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>CSS ID选择器类型<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后代选择器：<code>标签 标签 标签</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div span&#123;color: #008000;&#125;  /*对div下所有的span标签都作用*/</span><br></pre></td></tr></table></figure><p>子代选择器：<code>标签&gt;标签&gt;标签</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&gt;p&gt;span&#123;color: #008000;&#125;/*对div下的p下的span作用*/</span><br></pre></td></tr></table></figure><blockquote><p>前三个是必用，后代选择器与子代选择器也经常用，其它选择器不怎么用，可以看看这篇<a href="https://blog.csdn.net/qq_37165235/article/details/80657792?ops_request_misc=%7B%22request_id%22:%22164670464216780265466061%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164670464216780265466061&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-80657792.article_score_rank&utm_term=HTML%E9%80%89%E6%8B%A9%E5%99%A8&spm=1018.2226.3001.4187">HTML各类选择器</a>，</p></blockquote><h3 id="2-2-3-CSS书写位置"><a href="#2-2-3-CSS书写位置" class="headerlink" title="2.2.3 CSS书写位置"></a>2.2.3 CSS书写位置</h3><ul><li>外部样式表(CSS文件内)</li><li>内部样式表(body标签内)：可以将CSS样式写到元素的style属性中</li><li>内联样式(head标签内)：写在head标记里面，通过style标记包含</li></ul><h4>🚀 外部样式表</h4><blockquote><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，可以通过改变一个文件来改变整个站点的外观。每个页面使用 <code>&lt;link&gt;</code> 标签链接到样式表</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>rel：定义外部文档和调用文档的关系</li><li>href：CSS文档的路径</li><li>type：外部文件的类型</li></ul><h4>🚀 内部样式表</h4><blockquote><p>当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125; </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 内联样式</h4><blockquote><p>内联样式，在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性<br>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。<strong>慎用这种方法</strong>，例如当样式仅需要在一个元素上应用一次时</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 多重样式优先级</h4><blockquote><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。<br>一般情况下，<strong>优先级</strong>如下：内联样式、内部样式表、外部样式表、浏览器默认样式</p></blockquote><h1>📕 小结</h1><blockquote><p>本章为大家介绍的是网页设计中不可缺少的内容HTML标记与CSS样式，HTML是构成网页的灵魂，对于制作一般的网页，尤其是静态网页来说，HTML完全可以胜任，但如果要制作漂亮的网页，CSS是不可缺少的</p></blockquote><h1 align="center">🌴 2022.3.15 早八</h1><h2 id="3-1-JavaScript脚本语言"><a href="#3-1-JavaScript脚本语言" class="headerlink" title="3.1 JavaScript脚本语言"></a>3.1 JavaScript脚本语言</h2><h3 id="3-1-1什么是JavaScript"><a href="#3-1-1什么是JavaScript" class="headerlink" title="3.1.1什么是JavaScript"></a>3.1.1什么是JavaScript</h3><blockquote><p>JavaScript是一种基于对象和事件驱动并具有安全性能的解释型脚本语言。它不需要进行编译，而是直接嵌入在HTTP页面中，把静态页面转变成支持用户交互并响应应用事件的动态页面</p></blockquote><h4>🚀 JavaScript 是脚本语言</h4><ul><li>JavaScript 是一种轻量级的编程语言</li><li>JavaScript 是可插入 HTML 页面的编程代码</li><li>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行</li><li>JavaScript 很容易学习</li></ul><h3 id="3-1-2-JavaScript的特点"><a href="#3-1-2-JavaScript的特点" class="headerlink" title="3.1.2 JavaScript的特点"></a>3.1.2 JavaScript的特点</h3><h4>🚀 解释性</h4><blockquote><p>JavaScript不同于一些编译性的程序语言，例如C、C++等，它是一种解释性的程序语言，它的源代码不需要经过编译，而直接在浏览器中<strong>运行时被解释</strong></p></blockquote><h4>🚀 基于对象→封装、继承、多态</h4><blockquote><p>JavaScript是一种基于对象的语言。这意味着它能运用自己已经创建的对象。因此，许多功能可以来自于脚本环境中对象的方法与脚本的相互作用</p></blockquote><h4>🚀 事件驱动</h4><blockquote><p>JavaScript可以直接对用户或客户输入做出响应，无须经过Web服务程序。它对用户的响应，是<strong>以事件驱动的方式进行的</strong></p></blockquote><h4>🚀 跨平台</h4><blockquote><p>JavaScript<strong>依赖于浏览器</strong>本身，与操作环境无关，只要能运行支持JavaScript的浏览器就可正确执行</p></blockquote><h4>🚀 安全性</h4><blockquote><p>JavaScript是一种安全性语言，它不允许访问本地的硬盘，并不能将数据存入到服务器上，不允许对网络文档进行修改和删除，只能通过浏览器实现信息浏览或动态交互</p></blockquote><h3 id="3-1-3-JavaScript与Java的区别"><a href="#3-1-3-JavaScript与Java的区别" class="headerlink" title="3.1.3 JavaScript与Java的区别"></a>3.1.3 JavaScript与Java的区别</h3><h4>🚀 基于对象和面向对象</h4><blockquote><p>javaScript是一种基于对象和事件驱动的脚本语言，它本身提供了非常丰富的内部对象供设计人员使用；而Java是一种真正的面向对象的语言，即使是开发简单的程序，也必须设计对象</p></blockquote><h4>🚀 解释和编译</h4><blockquote><p>JavaScript是一种解释性编程语言，其源代码在发往客户端执行之前<strong>不需经过编译</strong>，而是将文本格式的字符代码发送给客户端由浏览器解释执行；而Java的源代码在传递到客户端执行之前，<strong>必须经过编译才可以执行</strong></p></blockquote><h4>🚀 弱变量和强变量</h4><blockquote><p>JavaScript采用弱变量，即变量在使用前无须声明，解释器在运行时将检查其数据类型；而Java则使用强类型变量检查，即所有变量在编译之前必须声明</p></blockquote><h2 id="3-2-在Web页面中使用JavaScript"><a href="#3-2-在Web页面中使用JavaScript" class="headerlink" title="3.2 在Web页面中使用JavaScript"></a>3.2 在Web页面中使用JavaScript</h2><h3 id="3-2-1-在页面中直接嵌入JavaScript"><a href="#3-2-1-在页面中直接嵌入JavaScript" class="headerlink" title="3.2.1 在页面中直接嵌入JavaScript"></a>3.2.1 在页面中直接嵌入JavaScript</h3><blockquote><p>JS脚本必须位于 <code>&lt;script&gt;</code> 标签内，可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 部分中</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> t=<span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;现在是&quot;</span>+t.<span class="title function_">getHours</span>()+<span class="string">&quot;:&quot;</span>+t.<span class="title function_">getMinutes</span>()+<span class="string">&quot;欢迎访问本站点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF5.png" alt="JAVA WEB开发技术5"></p><h3 id="3-2-2-链接外部JavaScript"><a href="#3-2-2-链接外部JavaScript" class="headerlink" title="3.2.2 链接外部JavaScript"></a>3.2.2 链接外部JavaScript</h3><blockquote><p>可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。如需使用外部文件，在 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性中设置该 .js 文件</p></blockquote><p><code>.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t=<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;现在是&quot;</span>+t.<span class="title function_">getHours</span>()+<span class="string">&quot;:&quot;</span>+t.<span class="title function_">getMinutes</span>()+<span class="string">&quot;欢迎访问本站点&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>.html</code>文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-JavaScript语言基础"><a href="#3-3-JavaScript语言基础" class="headerlink" title="3.3 JavaScript语言基础"></a>3.3 JavaScript语言基础</h2><h3 id="3-3-1-JavaScript的语法"><a href="#3-3-1-JavaScript的语法" class="headerlink" title="3.3.1 JavaScript的语法"></a>3.3.1 JavaScript的语法</h3><blockquote><p>JavaScript的语法与JAVA、C++大同小异</p></blockquote><ul><li>JavaScript区分大小写</li><li>每行结尾的分号<strong>可有可无</strong></li><li>变量是<strong>弱类型</strong></li><li>使用大括号标记代码块</li><li>注释:单行<code>//</code>，多行<code>/* */</code></li></ul><h3 id="3-3-2-JavaScript中的关键字"><a href="#3-3-2-JavaScript中的关键字" class="headerlink" title="3.3.2 JavaScript中的关键字"></a>3.3.2 JavaScript中的关键字</h3><table><thead><tr><th>abstract</th><th>continue</th><th>finally</th><th>instanceof</th><th>private</th><th>this</th></tr></thead><tbody><tr><td>boolean</td><td>default</td><td>float</td><td>int</td><td>public</td><td>throw</td></tr><tr><td>break</td><td>do</td><td>for</td><td>interface</td><td>return</td><td>typeof</td></tr><tr><td>byte</td><td>double</td><td>function</td><td>long</td><td>short</td><td>true</td></tr><tr><td>case</td><td>else</td><td>goto</td><td>native</td><td>static</td><td>var</td></tr><tr><td>catch</td><td>extends</td><td>implements</td><td>new</td><td>super</td><td>void</td></tr><tr><td>char</td><td>false</td><td>import</td><td>null</td><td>switch</td><td>while</td></tr><tr><td>class</td><td>final</td><td>in</td><td>package</td><td>synchronized</td><td>with</td></tr></tbody></table><h3 id="3-3-3-JavaScript的数据类型"><a href="#3-3-3-JavaScript的数据类型" class="headerlink" title="3.3.3 JavaScript的数据类型"></a>3.3.3 JavaScript的数据类型</h3><blockquote><p>JavaScript 数据类型主要有字符串<code>String</code>、数字<code>Number</code>、布尔<code>Boolean</code>、数组<code>Array</code>、对象<code>Object</code>、空<code>Null</code>、未定义<code>Undefined</code></p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">数值型</td><td align="center">JavaScript的数值型数据又可以分为整型和浮点型两种</td><td align="center">729  3.1415926</td></tr><tr><td align="center">字符型</td><td align="center">字符型数据是使用单引号或双引号括起来的一个或多个字符</td><td align="center">‘a’</td></tr><tr><td align="center">布尔型</td><td align="center">布尔型数据只有两个值，即true或false，主要用来说明或代表一种状态或标志。在JavaScript中，也可以使用整数0表示false，使用非0的整数表示true</td><td align="center">true,false,0,1</td></tr><tr><td align="center">转义字符</td><td align="center">以反斜杠开头的不可显示的特殊字符通常称为控制字符，也被称为转义字符</td><td align="center"><code>\b</code>   <code>\n</code> <code>\f</code>   <code>\t</code> <code>\r</code>  <code>\’ </code>  <code>\”</code> <code>\\ </code></td></tr><tr><td align="center">空值</td><td align="center">JavaScript中有一个空值（null），用于定义空的或不存在的引用。如果试图引用一个没有定义的变量，则返回一个null值</td><td align="center">var tmp &#x3D; null;</td></tr><tr><td align="center">未定义值</td><td align="center">当使用了一个并未声明的变量，或者使用了一个已经声明但没有赋值的变量时，将返回未定义值（undefined）</td><td align="center">var tmp ;</td></tr></tbody></table><h4>🚀 JavaScript 数字</h4><blockquote><p>JavaScript 拥有动态类型，相同的变量可用作不同的类型.即“弱变量”</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;<span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;<span class="comment">// 现在 x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;John&quot;</span>;<span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><h4>🚀 JavaScript 字符串</h4><blockquote><p>可在字符串中使用引号，只要不匹配包围字符串的引号</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;It&#x27;s alright&quot;</span>;  </span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><h4>🚀 JavaScript 数组</h4><p><code>new Array()</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>[ ]</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars= [ ];</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> cars= [<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW“];</span></span><br></pre></td></tr></table></figure><h4>🚀 JavaScript 对象</h4><blockquote><p><strong>对象由花括号分隔</strong>。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。<strong>属性由逗号分隔</strong></p><p><code>JAVAScript</code>的对象不像<code>JAVA</code>,<code>C++</code>,需要声明定义，而是直接建立</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name : <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">    sex  : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    like  :  <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">        <span class="keyword">return</span>  ‘篮球、音乐<span class="string">&#x27;; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var person=new Object(); </span></span><br><span class="line"><span class="string">person.name=&#x27;</span>小明<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">person.sex=&#x27;</span>男<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">person.like=function()&#123; </span></span><br><span class="line"><span class="string">    return  ‘篮球、音乐&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寻址方式两种</span></span><br><span class="line">name=person.<span class="property">name</span>;</span><br><span class="line">sex=person[<span class="string">&quot;sex&quot;</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(person.<span class="property">name</span> + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(person[<span class="string">&quot;sex&quot;</span>] + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-3-4-变量的定义及使用"><a href="#3-3-4-变量的定义及使用" class="headerlink" title="3.3.4 变量的定义及使用"></a>3.3.4 变量的定义及使用</h3><h4>🚀 变量的命名规则</h4><blockquote><p>变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）</p><ul><li>变量必须以字母开头，变量也能以 $ 和 _ 符号开头</li><li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li><li>不能使用关键字</li></ul></blockquote><h4>🚀 变量的声明</h4><blockquote><p>使用 var 关键词来声明变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname;      <span class="comment">//未赋值，默认为undefined    </span></span><br></pre></td></tr></table></figure><blockquote><p>可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>, age=<span class="number">30</span>, job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure><h4>🚀 变量的作用域</h4><blockquote><p>局部作用域和全局变量与C+和JAVA同理，变量生命周期有点像C++的析构，不知道一样不一样</p></blockquote><h5>🚁 JavaScript 局部作用域</h5><blockquote><p>变量在函数内声明，为局部作用域，只能在函数内访问</p></blockquote><h5>🚁 JavaScript 全局变量</h5><blockquote><p>变量在函数外定义，即为全局变量，网页中所有脚本和函数均可使用</p></blockquote><h5>🚁 JavaScript 变量生命周期</h5><blockquote><p>JavaScript 变量生命周期在声明时初始化</p><p>局部变量在函数执行完毕后销毁</p><p>全局变量在页面关闭后销毁</p></blockquote><h5>🚁 举个栗子</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">20</span>;<span class="comment">//局部变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();<span class="comment">//无法访问局部变量b</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> a=<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> b=<span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a++,b++);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!-- 每点一次a++，b不变，因为局部变量每次执行完都会销毁，再次调用函数，b=10 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-5-运算符的应用"><a href="#3-3-5-运算符的应用" class="headerlink" title="3.3.5 运算符的应用"></a>3.3.5 运算符的应用</h3><h4>🚀 赋值运算符</h4>| 运算符 |                            描  述                            |        示  例        || :----: | :----------------------------------------------------------: | :------------------: ||   =    |                将右边表达式的值赋给左边的变量                |    userName="mr"     ||   +=   |      将运算符左边的变量加上右边表达式的值赋给左边的变量      |  a+=b //相当于a=a+b  ||   -=   |      将运算符左边的变量减去右边表达式的值赋给左边的变量      |  a-=b //相当于a=a-b  ||   *=   |      将运算符左边的变量乘以右边表达式的值赋给左边的变量      | a\*=b //相当于a=a*b  ||   /=   |      将运算符左边的变量除以右边表达式的值赋给左边的变量      |  a/=b //相当于a=a/b  ||   %=   | 将运算符左边的变量用右边表达式的值求模，并将结果赋给左边的变量 |  a%=b //相当于a=a%b  ||   &=   | 将运算符左边的变量与右边表达式的值进行逻辑与运算，并将结果赋给左边的变量 |  a&=b //相当于a=a&b  ||  \|=   | 将运算符左边的变量与右边表达式的值进行逻辑或运算，并将结果赋给左边的变量 | a\|=b //相当于a=a\|b ||   ^=   | 将运算符左边的变量与右边表达式的值进行异或运算，并将结果赋给左边的变量 |  a^=b //相当于a=a^b  |<h4>🚀 算术运算符</h4><table><thead><tr><th align="center">运 算 符</th><th align="center">描  述</th><th align="center">示  例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加运算符</td><td align="center">4+6  &#x2F;&#x2F;返回值为10</td></tr><tr><td align="center">-</td><td align="center">减运算符</td><td align="center">7-2  &#x2F;&#x2F;返回值为5</td></tr><tr><td align="center">*</td><td align="center">乘运算符</td><td align="center">7*3  &#x2F;&#x2F;返回值为21</td></tr><tr><td align="center">&#x2F;</td><td align="center">除运算符</td><td align="center">12&#x2F;3  返回值为4</td></tr><tr><td align="center">%</td><td align="center">求模运算符</td><td align="center">7%4 返回值为3</td></tr><tr><td align="center">++</td><td align="center">自增运算符。该运算符有两种情况：i++（在使用i之后，使i的值加1）；++i（在使用i之前，先使i的值加1）</td><td align="center">i&#x3D;1; j&#x3D;i++ &#x2F;&#x2F;j的值为1，i的值为2  i&#x3D;1; j&#x3D;++i  &#x2F;&#x2F;j的值为2，i的值为2</td></tr><tr><td align="center">–</td><td align="center">自减运算符。该运算符有两种情况：i–（在使用i之后，使i的值减1）；–i（在使用i之前，先使i的值减1）</td><td align="center">i&#x3D;6;  j&#x3D;i– &#x2F;&#x2F;j的值为6，i的值为5  i&#x3D;6;  j&#x3D;–i  &#x2F;&#x2F;j的值为5，i的值为5</td></tr></tbody></table><h4>🚀 比较运算符</h4><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF11.png" alt="JAVA WEB开发技术11" style="zoom: 67%;" /><h4>🚀 逻辑运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">and</td><td align="center">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="center">||</td><td align="center">or</td><td align="center">(x=&#x3D;5 || y&#x3D;&#x3D;5) 为 false</td></tr><tr><td align="center">!</td><td align="center">not</td><td align="center">!(x&#x3D;&#x3D;y) 为 true</td></tr></tbody></table><h4>🚀 条件运算符</h4><p><code>variablename=(condition)?value1:value2 </code></p><h1 align="center">🌴 2022.3.17 早十</h1><h2 id="3-4-函数"><a href="#3-4-函数" class="headerlink" title="3.4 函数"></a>3.4 函数</h2><h3 id="3-4-1-函数的定义"><a href="#3-4-1-函数的定义" class="headerlink" title="3.4.1 函数的定义"></a>3.4.1 函数的定义</h3><h4>🚀 格式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  执行的代码</span><br><span class="line">    ........</span><br><span class="line">    [<span class="keyword">return</span> expression;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>🚀 举例</h4><blockquote><p>编写函数，根据出生日期<code>yyyy-mm-dd</code>，计算年龄</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">birthdy</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前日期</span></span><br><span class="line">    <span class="keyword">var</span> year0 = now.<span class="title function_">getYear</span>();<span class="comment">//获取当前年份</span></span><br><span class="line">    <span class="keyword">var</span> month0 = now.<span class="title function_">getMonth</span>();<span class="comment">//获取当前月份</span></span><br><span class="line">    <span class="keyword">var</span> year1 = birthday.<span class="title function_">getYear</span>();<span class="comment">//获取出生日期</span></span><br><span class="line">    <span class="keyword">var</span> month1 = birthday.<span class="title function_">getMonth</span>();<span class="comment">//获取出生年份</span></span><br><span class="line">    <span class="keyword">var</span> age = month0 &gt;= month1 ? year0 - year1 : year0 - year1 - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2001-3-17&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">getAge</span>(d);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure><h3 id="3-4-2-函数的调用"><a href="#3-4-2-函数的调用" class="headerlink" title="3.4.2 函数的调用"></a>3.4.2 函数的调用</h3><blockquote><p>编写函数实现输出</p><p>大学排名</p><ol><li><p>清华</p><p>2.北大</p><ol start="3"><li><p>复旦</p><p>4.交大</p></li></ol></li></ol></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>大学排名<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>清华<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>北大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>复旦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>交大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> liList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liList.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">liList[i].<span class="property">style</span>.<span class="property">marginLeft</span> = (i + <span class="number">1</span>) + <span class="string">&quot;rem&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fun</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-3-匿名函数"><a href="#3-4-3-匿名函数" class="headerlink" title="3.4.3 匿名函数"></a>3.4.3 匿名函数</h3><blockquote><p>没有函数名，只需使用一次的函数可以定义为匿名函数</p></blockquote><h4>🚀 格式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">  执行的代码</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>🚀 调用</h4><blockquote><p>放进一个变量里，这个变量就相当于一个函数名了。没有名字的匿名函数，变成有“名”函数了</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span>  myFun = <span class="keyword">function</span>(<span class="params"> a,b </span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>( a+b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">myFun</span>( <span class="number">10</span>,<span class="number">30</span> );</span><br></pre></td></tr></table></figure><blockquote><p>干脆不要名字，直接执行。这么做可以在内容形成局部变量和局部函数，防止全局污染</p><p><code>(匿名函数)();</code></p><p><code>(匿名函数() );</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>( a+b );</span><br><span class="line">&#125;)(<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>( a+b );</span><br><span class="line">&#125;(<span class="number">10</span>,<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h4>🚀 实践</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF12.gif" alt="JAVA WEB开发技术12"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#myDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#FF8888</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">6rem</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">8rem</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;fun()&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> n = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag=<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> f=<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(flag)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">clearTimer</span>()</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">setTimer</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">clearTimer</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timer)</span></span><br><span class="line"><span class="language-javascript">            flag=<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = setTimer;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">setTimer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(n&lt;<span class="number">0</span>||(n+<span class="number">8</span>)*<span class="number">16</span>&gt;<span class="variable language_">window</span>.<span class="property">innerWidth</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    f=!f</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(f)&#123;</span></span><br><span class="line"><span class="language-javascript">                    n=n+<span class="number">0.1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    n=n-<span class="number">0.1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">style</span>.<span class="property">left</span> = n + <span class="string">&quot;rem&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            flag=<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-事件和事件处理程序"><a href="#3-5-事件和事件处理程序" class="headerlink" title="3.5 事件和事件处理程序"></a>3.5 事件和事件处理程序</h2><h3 id="3-5-1-什么是事件和事件处理程序"><a href="#3-5-1-什么是事件和事件处理程序" class="headerlink" title="3.5.1 什么是事件和事件处理程序"></a>3.5.1 什么是事件和事件处理程序</h3><blockquote><ul><li>JavaScript与Web页面之间的交互是通过用户操作浏览器页面时触发相关事件来实现的。例如，在页面载入完毕时将触发<strong>onload（载入）事件</strong>、当用户单击按钮时将触发按钮的<strong>onclick事件</strong>等</li><li>事件处理程序则是用于响应某个事件而执行的处理程序</li><li>事件处理程序可以是任意JavaScript语句，但通常使用特定的自定义函数（Function）来对事件进行处理</li></ul></blockquote><h3 id="3-5-2-JavaScript的常用事件"><a href="#3-5-2-JavaScript的常用事件" class="headerlink" title="3.5.2 JavaScript的常用事件"></a>3.5.2 JavaScript的常用事件</h3><h4>🚀 鼠标事件</h4><table><thead><tr><th align="center"><strong>属性</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onclick.html">onclick</a></td><td align="center">当用户点击某个对象时调用的事件句柄</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-oncontextmenu.html">oncontextmenu</a></td><td align="center">在用户点击鼠标右键打开上下文菜单时触发</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-ondblclick.html">ondblclick</a></td><td align="center">当用户双击某个对象时调用的事件句柄</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmousedown.html">onmousedown</a></td><td align="center">鼠标按钮被按下</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmouseenter.html">onmouseenter</a></td><td align="center">当鼠标指针移动到元素上时触发</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmouseleave.html">onmouseleave</a></td><td align="center">当鼠标指针移出元素时触发</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmousemove.html">onmousemove</a></td><td align="center">鼠标被移动</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmouseover.html">onmouseover</a></td><td align="center">鼠标移到某元素之上</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmouseout.html">onmouseout</a></td><td align="center">鼠标从某元素移开</td></tr><tr><td align="center"><a href="http://www.runoob.com/jsref/event-onmouseup.html">onmouseup</a></td><td align="center">鼠标按键被松开</td></tr></tbody></table><blockquote><p>示例：为按钮添加事件，点击按钮在页面中增加div，激活div可以使其随鼠标移动</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF13.gif" alt="JAVA WEB开发技术13"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">4rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#888888</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ff8888</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;my-p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建一个按钮,每点击一次创建一个div --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// onclik事件，点击按钮创建div元素</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeDiv</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(div, btn)<span class="comment">//在btn之前插入div</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">changeDiv</span>(<span class="params">ele</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> className = ele.<span class="property">className</span><span class="comment">//获取类名，className = active 就置空，当前点击的div为active</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (className == <span class="string">&#x27;active&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">ele.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> activeDivs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; activeDivs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">activeDivs[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">ele.<span class="property">className</span> = <span class="string">&#x27;active&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> activeDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;active&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//getElement返回值是数组，如果当前数组不为空且长度大于0</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (activeDiv &amp;&amp; activeDiv.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">activeDiv = activeDiv[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">activeDiv.<span class="property">style</span>.<span class="property">top</span> = event.<span class="property">clientY</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">activeDiv.<span class="property">style</span>.<span class="property">left</span> = event.<span class="property">clientX</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">activeDiv.<span class="property">innerHTML</span> = event.<span class="property">clientX</span> + <span class="string">&#x27;,&#x27;</span> + event.<span class="property">clientY</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.3.22 早八</h1><h4>🚀 键盘事件</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/event-onkeydown.html">onkeydown</a></td><td>某个键盘按键被按下</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onkeypress.html">onkeypress</a></td><td>某个键盘按键被按下并松开</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onkeyup.html">onkeyup</a></td><td>某个键盘按键被松开</td></tr></tbody></table><blockquote><p>按下键盘，屏幕显示按键</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;my-p&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">p.<span class="property">innerHTML</span> +=event.<span class="property">key</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 框架对象事件</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/event-onload.html">onload</a></td><td>一张页面或一幅图像完成加载</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onresize.html">onresize</a></td><td>窗口或框架被重新调整大小</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onscroll.html">onscroll</a></td><td>当文档被滚动时发生的事件</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onunload.html">onunload</a></td><td>用户退出页面。 (  <code>&lt;body&gt;</code> 和 <code>&lt;frameset&gt;</code>)</td></tr></tbody></table><h4>🚀 表单事件</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/event-onblur.html">onblur</a></td><td>元素失去焦点时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onchange.html">onchange</a></td><td>该事件在表单元素的内容改变时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onfocus.html">onfocus</a></td><td>元素获取焦点时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onfocusin.html">onfocusin</a></td><td>元素即将获取焦点时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onfocusout.html">onfocusout</a></td><td>元素即将失去焦点时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onreset.html">onreset</a></td><td>表单重置时触发</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onselect.html">onselect</a></td><td>用户选取文本时触发 (  <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code>)</td></tr><tr><td><a href="http://www.runoob.com/jsref/event-onsubmit.html">onsubmit</a></td><td>表单提交时触发</td></tr></tbody></table><h3 id="3-5-3-事件处理程序的调用"><a href="#3-5-3-事件处理程序的调用" class="headerlink" title="3.5.3 事件处理程序的调用"></a>3.5.3 事件处理程序的调用</h3><h4>🚀 在JavaScript中</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px;height:300px;background-color:red ;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 在HTML中</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;divClick(event)&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">&quot;width: 400px;height:300px;background-color:red ;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">divClick</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">type</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-6-常用对象"><a href="#3-6-常用对象" class="headerlink" title="3.6 常用对象"></a>3.6 常用对象</h2><h3 id="3-6-1-String对象"><a href="#3-6-1-String对象" class="headerlink" title="3.6.1 String对象"></a>3.6.1 String对象</h3><h4 id="🚀-属性"><a href="#🚀-属性" class="headerlink" title="🚀 属性"></a>🚀 属性</h4><h5>🚁 length</h5><blockquote><p>返回字符串的长度(字符数)</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> txt = <span class="string">&quot;Hello World!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(txt.<span class="property">length</span>); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="🚀-方法"><a href="#🚀-方法" class="headerlink" title="🚀 方法"></a>🚀 方法</h4><h5>🚁 indexOf()</h5><blockquote><p><strong>作用</strong>：可返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1</p><p><strong>语法：</strong><code>string.substr(start,length)</code></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是  0 到  string  Object.length  - 1。如省略该参数，则将从字符串的首字符开始检索</td></tr></tbody></table><h5>🚁 substr()</h5><blockquote><p><strong>作用：</strong>在字符串中抽取从开始下标开始的指定数目的字符<br><strong>语法：</strong><code>string.substr(start,length)</code></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1  指字符串中最后一个字符，-2  指倒数第二个字符，以此类推</td></tr><tr><td>length</td><td>可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject  的开始位置到结尾的字串</td></tr></tbody></table><h5>🚁 substring()</h5><blockquote><p><strong>作用：</strong>用于提取字符串中介于两个指定下标之间的字符。返回的子串包括 <strong>开始处</strong>的字符，但<strong>不包括 结束 处的字符</strong><br><strong>语法：</strong> <code>string.substring(from, to)</code></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>from</td><td>起始下标是1</td></tr><tr><td>to</td><td>一个非负的整数，如果大于字符串长度或省略该参数，那么返回的子串会一直到字符串的结尾</td></tr></tbody></table><h5>🚁 replace()</h5><blockquote><p><strong>作用：</strong>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串<br><strong>语法：</strong> <code>string.replace(searchvalue,newvalue)</code>。默认<strong>区分大小写</strong></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchvalue</td><td>规定子字符串或要替换的对象。如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp  对象</td></tr><tr><td>newvalue</td><td>必需。一个字符串值。规定了替换文本或生成替换文本的函数</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Mr Blue has a blue house and a blue car&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> a = s.<span class="title function_">replace</span>(<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//Mr Blue has a red house and a blue car</span></span><br><span class="line"><span class="keyword">var</span> b = s.<span class="title function_">replace</span>(<span class="regexp">/blue/g</span>,<span class="string">&quot;red&quot;</span>);<span class="comment">//Mr Blue has a red house and a red car</span></span><br><span class="line"><span class="keyword">var</span> c = s.<span class="title function_">replace</span>(<span class="regexp">/blue/gi</span>,<span class="string">&quot;red&quot;</span>);<span class="comment">//Mr red has a red house and a red car</span></span><br></pre></td></tr></table></figure><h5>🚁 split()</h5><blockquote><p><strong>作用：</strong>用于把一个字符串分割成字符串数组。如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割<br><strong>语法：</strong> <code>string.split(separator,limit)</code></p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>字符串或正则表达式，从该参数指定的地方分割 string  Object。</td></tr><tr><td>limit</td><td>该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;How are you doing today?&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n=str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>,<span class="number">3</span>); <span class="comment">//[&#x27;How&#x27;, &#x27;are&#x27;, &#x27;you&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="3-6-2-Math对象"><a href="#3-6-2-Math对象" class="headerlink" title="3.6.2 Math对象"></a>3.6.2 Math对象</h3><h4 id="🚀-属性-1"><a href="#🚀-属性-1" class="headerlink" title="🚀 属性"></a>🚀 属性</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/jsref-e.html">E</a></td><td>返回算术常量  e，即自然对数的底数（约等于2.718）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-ln2.html">LN2</a></td><td>返回 2  的自然对数（约等于0.693）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-ln10.html">LN10</a></td><td>返回 10  的自然对数（约等于2.302）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-log2e.html">LOG2E</a></td><td>返回以  2 为底的  e 的对数（约等于  1.414）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-log10e.html">LOG10E</a></td><td>返回以  10 为底的  e 的对数（约等于0.434）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-pi.html">PI</a></td><td>返回圆周率（约等于3.14159）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-sqrt1-2.html">SQRT1_2</a></td><td>返回返回  2 的平方根的倒数（约等于  0.707）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-sqrt2.html">SQRT2</a></td><td>返回 2  的平方根（约等于  1.414）</td></tr></tbody></table><h4 id="🚀-方法-1"><a href="#🚀-方法-1" class="headerlink" title="🚀 方法"></a>🚀 方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/jsref-abs.html">abs(x)</a></td><td>返回 x 的绝对值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-acos.html">acos(x)</a></td><td>返回 x 的反余弦值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-asin.html">asin(x)</a></td><td>返回 x 的反正弦值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-atan.html">atan(x)</a></td><td>以介于 -PI&#x2F;2  与 PI&#x2F;2  弧度之间的数值来返回  x 的反正切值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-atan2.html">atan2(y,x)</a></td><td>返回从 x  轴到点  (x,y)  的角度（介于  -PI&#x2F;2  与 PI&#x2F;2  弧度之间）</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-ceil.html">ceil(x)</a></td><td>对数进行上舍入</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-cos.html">cos(x)</a></td><td>返回数的余弦</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-exp.html">exp(x)</a></td><td>返回 Ex 的指数</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-floor.html">floor(x)</a></td><td>对 x  进行下舍入</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-log.html">log(x)</a></td><td>返回数的自然对数</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-max.html">max(x,y,z,…,n)</a></td><td>返回 x,y,z,…,n  中的最高值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-min.html">min(x,y,z,…,n)</a></td><td>返回 x,y,z,…,n中的最低值</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-pow.html">pow(x,y)</a></td><td>返回 x  的  y 次幂</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-random.html">random()</a></td><td>返回 0  ~ 1 之间的随机数</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-sin.html">sin(x)</a></td><td>返回数的正弦</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-sqrt.html">sqrt(x)</a></td><td>返回数的平方根</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tan.html">tan(x)</a></td><td>返回角的正切</td></tr></tbody></table><h3 id="3-6-3-Date对象"><a href="#3-6-3-Date对象" class="headerlink" title="3.6.3 Date对象"></a>3.6.3 Date对象</h3><h4>🚀 创建Date对象</h4><blockquote><p>格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(milliseconds); </span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(dateString); </span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, day, hours, minutes, seconds, milliseconds);</span><br></pre></td></tr></table></figure><blockquote><p>注意月份、日期是从0开始</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;September 24, 2017 11:13:00&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2017</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">33</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/jsref-getdate.html">getDate</a><a href="http://www.runoob.com/jsref/jsref-getdate.html">()</a></td><td>从 Date  对象返回一个月中的某一天  (1 ~ 31)</td><td><a href="http://www.runoob.com/jsref/jsref-setdate.html">setDate</a><a href="http://www.runoob.com/jsref/jsref-setdate.html">()</a></td><td>设置 Date  对象中月的某一天  (1 ~ 31)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getday.html">getDay</a><a href="http://www.runoob.com/jsref/jsref-getday.html">()</a></td><td>从 Date  对象返回一周中的某一天  (0 ~ 6)</td><td><a href="http://www.runoob.com/jsref/jsref-setfullyear.html">setFullYear</a><a href="http://www.runoob.com/jsref/jsref-setfullyear.html">()</a></td><td>设置 Date  对象中的年份（四位数字）。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getfullyear.html">getFullYear()</a></td><td>从 Date  对象以四位数字返回年份</td><td><a href="http://www.runoob.com/jsref/jsref-sethours.html">setHours</a><a href="http://www.runoob.com/jsref/jsref-sethours.html">()</a></td><td>设置 Date  对象中的小时  (0 ~ 23)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-gethours.html">getHours()</a></td><td>返回 Date  对象的小时  (0 ~ 23)</td><td><a href="http://www.runoob.com/jsref/jsref-setmilliseconds.html">setMilliseconds()</a></td><td>设置 Date  对象中的毫秒  (0 ~ 999)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getmilliseconds.html">getMilliseconds()</a></td><td>返回 Date  对象的毫秒(0  ~ 999)</td><td><a href="http://www.runoob.com/jsref/jsref-setminutes.html">setMinutes()</a></td><td>设置 Date  对象中的分钟  (0 ~ 59)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getminutes.html">getMinutes</a><a href="http://www.runoob.com/jsref/jsref-getminutes.html">()</a></td><td>返回 Date  对象的分钟  (0 ~ 59)</td><td><a href="http://www.runoob.com/jsref/jsref-setmonth.html">setMonth()</a></td><td>设置 Date  对象中月份  (0 ~ 11)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getmonth.html">getMonth()</a></td><td>从 Date  对象返回月份  (0 ~ 11)</td><td><a href="http://www.runoob.com/jsref/jsref-setseconds.html">setSeconds()</a></td><td>设置 Date  对象中的秒钟  (0 ~ 59)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getseconds.html">getSeconds()</a></td><td>返回 Date  对象的秒数  (0 ~ 59)</td><td><a href="http://www.runoob.com/jsref/jsref-settime.html">setTime</a><a href="http://www.runoob.com/jsref/jsref-settime.html">()</a></td><td>setTime()  方法以毫秒设置  Date 对象。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-gettime.html">getTime()</a></td><td>返回 1970  年 1  月 1  日至今的毫秒数</td><td><a href="http://www.runoob.com/jsref/jsref-setutcdate.html">setUTCDate()</a></td><td>根据世界时设置 Date  对象中月份的一天  (1 ~ 31)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-gettimezoneoffset.html">getTimezoneOffset</a><a href="http://www.runoob.com/jsref/jsref-gettimezoneoffset.html">()</a></td><td>返回本地时间与格林威治标准时间 (GMT)  的分钟差</td><td><a href="http://www.runoob.com/jsref/jsref-setutcfullyear.html">setUTCFullYear()</a></td><td>根据世界时设置 Date  对象中的年份（四位数字）。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcdate.html">getUTCDate</a><a href="http://www.runoob.com/jsref/jsref-getutcdate.html">()</a></td><td>根据世界时从 Date  对象返回月中的一天  (1 ~ 31)</td><td><a href="http://www.runoob.com/jsref/jsref-setutchours.html">setUTCHours</a><a href="http://www.runoob.com/jsref/jsref-setutchours.html">()</a></td><td>根据世界时设置 Date  对象中的小时  (0 ~ 23)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcday.html">getUTCDay</a><a href="http://www.runoob.com/jsref/jsref-getutcday.html">()</a></td><td>根据世界时从 Date  对象返回周中的一天  (0 ~ 6)</td><td><a href="http://www.runoob.com/jsref/jsref-setutcmilliseconds.html">setUTCMilliseconds()</a></td><td>根据世界时设置 Date  对象中的毫秒  (0 ~ 999)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcfullyear.html">getUTCFullYear</a><a href="http://www.runoob.com/jsref/jsref-getutcfullyear.html">()</a></td><td>根据世界时从 Date  对象返回四位数的年份</td><td><a href="http://www.runoob.com/jsref/jsref-setutcminutes.html">setUTCMinutes()</a></td><td>根据世界时设置 Date  对象中的分钟  (0 ~ 59)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutchours.html">getUTCHours()</a></td><td>根据世界时返回 Date  对象的小时  (0 ~ 23)</td><td><a href="http://www.runoob.com/jsref/jsref-setutcmonth.html">setUTCMonth()</a></td><td>根据世界时设置 Date  对象中的月份  (0 ~ 11)。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcmilliseconds.html">getUTCMilliseconds</a><a href="http://www.runoob.com/jsref/jsref-getutcmilliseconds.html">()</a></td><td>根据世界时返回 Date  对象的毫秒(0  ~ 999)</td><td><a href="http://www.runoob.com/jsref/jsref-setutcseconds.html">setUTCSeconds()</a></td><td>setUTCSeconds()  方法用于根据世界时  (UTC)  设置指定时间的秒字段。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcminutes.html">getUTCMinutes()</a></td><td>根据世界时返回 Date  对象的分钟  (0 ~ 59)</td><td><a href="http://www.runoob.com/jsref/jsref-parse.html">parse()</a></td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-getutcmonth.html">getUTCMonth()</a></td><td>根据世界时从 Date  对象返回月份  (0 ~ 11)</td><td><a href="http://www.runoob.com/jsref/jsref-getutcseconds.html">getUTCSeconds</a><a href="http://www.runoob.com/jsref/jsref-getutcseconds.html">()</a></td><td>根据世界时返回 Date  对象的秒钟  (0 ~ 59)</td></tr></tbody></table><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/jsref-todatestring.html">toDateString</a><a href="http://www.runoob.com/jsref/jsref-todatestring.html">()</a></td><td>把 Date  对象的日期部分转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-toisostring.html">toISOString</a><a href="http://www.runoob.com/jsref/jsref-toisostring.html">()</a></td><td>使用 ISO  标准返回字符串的日期格式。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tojson.html">toJSON()</a></td><td>以 JSON  数据格式返回日期字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tolocaledatestring.html">toLocaleDateString()</a></td><td>根据本地时间格式，把 Date  对象的日期部分转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tolocaletimestring.html">toLocaleTimeString()</a></td><td>根据本地时间格式，把 Date  对象的时间部分转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tolocalestring.html">toLocaleString()</a></td><td>据本地时间格式，把 Date  对象转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-tostring-date.html">toString()</a></td><td>把 Date  对象转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-totimestring.html">toTimeString</a><a href="http://www.runoob.com/jsref/jsref-totimestring.html">()</a></td><td>把 Date  对象的时间部分转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-toutcstring.html">toUTCString()</a></td><td>根据世界时，把 Date  对象转换为字符串。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-utc.html">UTC()</a></td><td>根据世界时返回 1970  年 1  月 1  日  到指定日期的毫秒数。</td></tr><tr><td><a href="http://www.runoob.com/jsref/jsref-valueof-date.html">valueOf()</a></td><td>返回 Date  对象的原始值。</td></tr></tbody></table><blockquote><p>世界时间即东八区，咱们的时间减八个小时就是UTC时间</p></blockquote><blockquote><p>示例，在页面动态显示时间</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;my-p&quot;</span>&gt;</span>asd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> p=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">p.<span class="property">innerHTML</span>=<span class="title function_">getDateStr</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getDateStr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//toLocaleDateString()将日期转换为字符串。并替换掉&#x27;/&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> s=date.<span class="title function_">toLocaleDateString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;年&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;月&#x27;</span>)+<span class="string">&#x27;日&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> arr=[<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">s=s+arr[date.<span class="title function_">getDay</span>()]<span class="comment">//星期</span></span></span><br><span class="line"><span class="language-javascript">s=s+<span class="string">&#x27;    &#x27;</span>+date.<span class="title function_">toLocaleTimeString</span>()<span class="comment">//时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.3.29 早八</h1><h3 id="3-6-4-Window对象"><a href="#3-6-4-Window对象" class="headerlink" title="3.6.4 Window对象"></a>3.6.4 Window对象</h3><h4>🚀 Window对象的属性</h4><blockquote><p>所有浏览器都支持 window 对象。它表示浏览器窗口。所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法。甚至 HTML DOM 的 document 也是 window 对象的属性之一</p></blockquote><p><a href="https://www.runoob.com/jsref/obj-window.html">Window 对象属性、方法</a></p><h5>🚁 open()方法</h5><blockquote><p><strong>作用：</strong>用于打开一个新的浏览器窗口或查找一个已命名的窗口</p><p><strong>语法：</strong> <code>window.open(URL,name,specs,replace)</code></p><ul><li>URL<ul><li>可选。打开指定的页面的URL。如果没有指定URL，打开一个新的空白窗口</li></ul></li><li>name:可选。指定target属性或窗口的名称。支持以下值<ul><li>默认_blank - URL加载到一个新的窗口</li><li>_parent - URL加载到父框架</li><li>_self - URL替换当前页面</li><li>_top - URL替换任何可加载的框架集</li><li><em>name</em> - 窗口名称</li></ul></li><li>specs:可选。一个逗号分隔的项目列表。修改窗口属性，长宽高，是否可以滚动、缩放…</li><li>replace:在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目<ul><li>true - URL 替换浏览历史中的当前条目</li><li>false - URL 在浏览历史中创建新的条目</li></ul></li></ul></blockquote><blockquote><p>示例：打开一个新窗口，并控制其外观</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF17.gif" alt="JAVA WEB开发技术17"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open_win</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://blog.csdn.net/qq_49488584?spm=1011.2124.3001.5343&quot;</span>, <span class="string">&quot;_blank&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400&quot;</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;open_win()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5>🚁 close()方法</h5><blockquote><p><strong>作用：</strong>用于关闭浏览器窗口<br><strong>语法：</strong> <code>window.close()</code></p></blockquote><blockquote><p>示例：在上一个示例的基础上加上关闭功能</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open_win</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">myWindow=<span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://blog.csdn.net/qq_49488584?spm=1011.2124.3001.5343&quot;</span>, <span class="string">&quot;_blank&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400&quot;</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">close_win</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               myWindow.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打开窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;open_win()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;close_win()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7-Ajax技术"><a href="#3-7-Ajax技术" class="headerlink" title="3.7 Ajax技术"></a>3.7 Ajax技术</h2><h3 id="3-7-1-什么是Ajax"><a href="#3-7-1-什么是Ajax" class="headerlink" title="3.7.1 什么是Ajax"></a>3.7.1 什么是Ajax</h3><blockquote><ul><li>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</li><li>AJAX 不是新的编程语言，而是一种使用现有<strong>标准的新方法</strong></li><li>AJAX 最大的优点是在<strong>不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</strong>。AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行</li><li>XMLHttpRequest 是 AJAX 的基础。XMLHttpRequest 用于在后台与服务器交换数据。可以在不重新加载整个网页的情况下，对网页的某部分进行更新(例如B站实时弹幕)</li></ul></blockquote><h3 id="3-7-2-Ajax的开发模式"><a href="#3-7-2-Ajax的开发模式" class="headerlink" title="3.7.2 Ajax的开发模式"></a>3.7.2 Ajax的开发模式</h3><h4>🚀 Web应用的传统模式</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF15.png" alt="JAVA WEB开发技术15"></p><h4>🚀 Web应用的Ajax模式</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF16.png" alt="JAVA WEB开发技术16"></p><blockquote><p>图太死板了，简而言之，就比如实时的弹幕，虽然整个网页没有刷新，但可以一直保持弹幕的更新</p></blockquote><h3 id="3-7-3-Ajax的优点"><a href="#3-7-3-Ajax的优点" class="headerlink" title="3.7.3 Ajax的优点"></a>3.7.3 Ajax的优点</h3><blockquote><ul><li>减轻服务器的负担。Ajax的原则是“按需求获取数据”，这可以最大程度地减少冗余请求和响应对服务器造成的负担</li><li>可以把一部分以前由服务器负担的工作转移到客户端，利用客户端闲置的资源进行处理，<strong>减轻服务器和带宽的负担</strong>，节约空间和成本  </li><li><strong>无刷新更新页面</strong>，从而使用户不用再像以前一样在服务器处理数据时，只能在死板的白屏前焦急地等待</li><li>可以调用XML等外部数据，进一步<strong>促进页面显示和数据的分离</strong></li><li>基于标准化的并被广泛支持的技术，<strong>不需要下载插件或者小程序</strong></li></ul></blockquote><h2 id="3-8-传统Ajax工作流程"><a href="#3-8-传统Ajax工作流程" class="headerlink" title="3.8 传统Ajax工作流程"></a>3.8 传统Ajax工作流程</h2><h3 id="3-8-1-发送请求"><a href="#3-8-1-发送请求" class="headerlink" title="3.8.1 发送请求"></a>3.8.1 发送请求</h3><blockquote><p>通常情况下，Ajax发送请求有两种，一种是GET请求，一种是POST请求</p><p>发送请求的4个步骤：</p><ul><li>初始化XMLHttpRequest对象</li><li>指定回调函数，用于对返回结果的处理</li><li>创建一个与服务器的链接</li><li>向服务器发送请求</li></ul></blockquote><h4>🚀 初始化XMLHttpRequest对象</h4><blockquote><p>语法：<code>variable=new XMLHttpRequest();</code>，老版本IE5，IE7用<code>variable=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></p></blockquote><blockquote><p>示例：为了兼容浏览器，创建对象前，先判断浏览器执行哪个代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// IE6, IE5 浏览器执行代码</span></span><br><span class="line">    xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5>🚁 XMLHttpRequest对象</h5><blockquote><p>可在不重新加载整个页面的情况下更新网页中的某部分</p></blockquote><blockquote><p>方法</p></blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abort()</td><td align="left">取消当前的请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回指定的头信息</td></tr><tr><td align="left">open(method,url,async)</td><td align="left">规定请求的类型，URL(JSON地址)，请求是否应该进行异步处理，以及请求的其他可选属性</td></tr><tr><td align="left">send(string)</td><td align="left">发送请求到服务器。string：仅用于  POST  请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">把标签&#x2F;值对添加到要发送的头文件</td></tr></tbody></table><blockquote><p>属性</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>存储函数（或函数的名称）在每次 readyState  属性变化时被自动调用</td></tr><tr><td>readyState</td><td>存放了  XMLHttpRequest  的状态。从  0 到 4 变化：     <br/>0：请求未初始化    <br/>1：服务器建立连接   <br/>2：收到的请求   <br/>3：处理请求     <br/>4：请求完成和响应准备就绪</td></tr><tr><td>responseText</td><td>返回作为一个字符串的响应数据</td></tr><tr><td>responseXML</td><td>返回作为 XML  数据响应数据</td></tr><tr><td>status</td><td>返回状态数（例如 “404”  为 “Not  Found” 或 “200”  为 “OK”）</td></tr><tr><td>statusText</td><td>返回状态文本（如 “Not  Found” 或 “OK”）</td></tr></tbody></table><h4>🚀 指定回调函数，用于对返回结果的处理</h4><blockquote><p>通过对 <code>onreadystatechange</code> 事件指定执行的函数来实现</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//数据接收完毕且已成功处理了请求</span></span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.<span class="property">readystate</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> std=xmlhttp.<span class="property">responseText</span>;</span><br><span class="line">        std = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(std);<span class="comment">//转为JSON对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(std);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementBtId</span>(<span class="string">&quot;myDIv&quot;</span>).<span class="property">innerHTML</span>+=<span class="string">&quot;姓名:&quot;</span>+std.<span class="property">name</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;性别:&quot;</span>+std.<span class="property">sex</span>+<span class="string">&quot;&lt;br&gt;&quot;</span>+<span class="string">&quot;出生日期:&quot;</span>+std.<span class="property">birthday</span>+<span class="string">&quot;&lt;br&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4>🚀 创建一个与服务器的链接</h4><blockquote><p>创建到服务器的连接，使用 XMLHttpRequest 对象的 <code>open()</code> 方法</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;ajax_info.json&quot;,true);</span><br></pre></td></tr></table></figure><blockquote><p>为了避免可能得到的是缓存的结果，可向 URL 添加一个唯一的 ID：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;demo_get.php?t=&quot; + Math.random(),true);</span><br></pre></td></tr></table></figure><h4>🚀 创建一个与服务器的链接</h4><blockquote><p>通过使用 XMLHttpRequest 对象的 send() 方法。若为POST方式，可以在send方法中增加参数</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;/try/ajax/demo_post2.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;); </span><br><span class="line">xmlhttp.send(&quot;fname=Henry&amp;lname=Ford&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>Q：POST与GET有什么区别？<br>A：与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。<br>并且POST 请求：可以向服务器发送大量数据（POST 没有数据量限制），发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p></blockquote><blockquote><p>点击按钮，通过Ajax加载数据</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF18.gif" alt="JAVA WEB开发技术18"></p><p><strong>new_file.json</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张时贰&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2001.01.01&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>std.html</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">loadMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">                    xmlhttp = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//数据接收完毕且已成功处理了请求</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> std = xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        std = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(std); <span class="comment">//转为JSON对象</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(std);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span> += <span class="string">&quot;姓名:&quot;</span> + std.<span class="property">name</span> + <span class="string">&quot;&lt;br&gt;&quot;</span> + <span class="string">&quot;性别:&quot;</span> + std.<span class="property">sex</span> + <span class="string">&quot;&lt;br&gt;&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;出生日期:&quot;</span> + std.<span class="property">birthday</span> + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;new_file.json&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadMsg()&quot;</span>&gt;</span>点击加载信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-8-2-处理服务器响应"><a href="#3-8-2-处理服务器响应" class="headerlink" title="3.8.2 处理服务器响应"></a>3.8.2 处理服务器响应</h3><blockquote><p>当向服务器发送请求以后，服务器会返回响应结果，获得服务器的响应可以通过responseText属性和responseXML属性</p></blockquote><h4>🚀 处理字符串响应</h4><blockquote><p>responseText属性返回一个字符串的响应数据</p></blockquote><h4>🚀 处理XML响应</h4><blockquote><p>responseXML属性返回一个XML的响应数据</p></blockquote><h1 align="center">🌴 2022.3.31 早十</h1><h2 id="3-9-jQuery技术"><a href="#3-9-jQuery技术" class="headerlink" title="3.9 jQuery技术"></a>3.9 jQuery技术</h2><h3 id="3-9-1-jQuery简介"><a href="#3-9-1-jQuery简介" class="headerlink" title="3.9.1 jQuery简介"></a>3.9.1 jQuery简介</h3><h4 id="3-9-1-1-jQuery简介"><a href="#3-9-1-1-jQuery简介" class="headerlink" title="3.9.1.1 jQuery简介"></a>3.9.1.1 jQuery简介</h4><blockquote><p>jQuery是一个JavaScript函数库。一个轻量级的“写的少，做的多”的JavaScript库，jQuery还提供了大量的插件，简而言之，就好比很长的方法与属性，通过重写，对<strong>Javascript的简化</strong></p></blockquote><blockquote><p>jQuery库包含以下功能：</p><ul><li>HTML 元素选取</li><li>HTML 元素操作</li><li>CSS 操作</li><li>HTML 事件函数</li><li>JavaScript 特效和动画</li><li>HTML DOM 遍历和修改</li><li>AJAX1</li></ul></blockquote><h4 id="3-9-1-2-配置jQuery"><a href="#3-9-1-2-配置jQuery" class="headerlink" title="3.9.1.2 配置jQuery"></a>3.9.1.2 配置jQuery</h4><h4>🚀 添加 jQuery</h4><blockquote><p>从 <a href="jquery.com">jquery</a> 下载 jQuery 库，之后在文件中引用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Staticfile CDN、百度、又拍云、新浪、谷歌和微软的服务器都存有 jQuery，我们可以直接引用他们。首选百度和新浪因为访问速度快嘛</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h4>🚀 jQuery版本</h4><blockquote><ul><li>Production version - 用于实际的网站中，已被精简和压缩</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）</li></ul></blockquote><h4 id="3-9-1-3-jQuery语法"><a href="#3-9-1-3-jQuery语法" class="headerlink" title="3.9.1.3 jQuery语法"></a>3.9.1.3 jQuery语法</h4><blockquote><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作</p><p>基础语法： <code>$(selector).action()</code></p></blockquote><blockquote><p>示例：之前学习了利用DOM获取元素，使用<code>document.getElementById(&quot;abc&quot;).style.display=&quot;none&quot;;</code>可以达到隐藏的效果，但jQuery会更简洁</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>() <span class="comment">//隐藏所有 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p.test&quot;</span>).<span class="title function_">hide</span>()  <span class="comment">//隐藏所有 class=&quot;test&quot; 的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>() <span class="comment">//隐藏所有 id=&quot;test&quot; 的元素</span></span><br></pre></td></tr></table></figure><h3 id="3-9-2-jQuery对象和DOM对象"><a href="#3-9-2-jQuery对象和DOM对象" class="headerlink" title="3.9.2 jQuery对象和DOM对象"></a>3.9.2 jQuery对象和DOM对象</h3><h4 id="3-9-2-1-jQuery对象和DOM对象"><a href="#3-9-2-1-jQuery对象和DOM对象" class="headerlink" title="3.9.2.1 jQuery对象和DOM对象"></a>3.9.2.1 jQuery对象和DOM对象</h4><blockquote><ul><li>jQuery 对象是通过jQuery包装之后的DOM对象</li><li>DOM对象是指HTML文档对象</li><li>对于一个DOM对象，使用$()包装后即为jQuery对象</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>)<span class="comment">//DOM对象</span></span><br><span class="line">$(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>))<span class="comment">//jQuery对象</span></span><br></pre></td></tr></table></figure><blockquote><p>为了区分二者，可以用<code>$</code>命名对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>)<span class="comment">//DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $div = $(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>))<span class="comment">//jQuery对象</span></span><br></pre></td></tr></table></figure><h4 id="3-9-2-2-jQuery对象和DOM对象的转换"><a href="#3-9-2-2-jQuery对象和DOM对象的转换" class="headerlink" title="3.9.2.2 jQuery对象和DOM对象的转换"></a>3.9.2.2 jQuery对象和DOM对象的转换</h4><blockquote><p>jQuery 对象只能使用jQuery方法。DOM对象只能使用DOM方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>);</span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> $div = $(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>));</span><br><span class="line">$div.<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;green&quot;</span>)</span><br></pre></td></tr></table></figure><h4>🚀 jQuery 对象转为DOM对象方法一</h4><blockquote><p>jQuery对象实际上是一个数据对象，可以通过<code>[index]</code>方法获得相应的DOM对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">&quot;#msg-div&quot;</span>); <span class="comment">//得到jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&quot;#msg-div&quot;</span>)[<span class="number">0</span>];<span class="comment">//转换成DOM对象</span></span><br></pre></td></tr></table></figure><h4>🚀 jQuery 对象转为DOM对象方法二</h4><blockquote><p>jQuery本身可通过.get(index)方法得到相应的DOM对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">&quot;#msg-div&quot;</span>); <span class="comment">//得到jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> div = = $(<span class="string">&quot;#msg-div&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>); <span class="comment">//转换成DOM对象</span></span><br></pre></td></tr></table></figure><h4>🚀 DOM对象转为jQuery对象</h4><blockquote><p>对于一个DOM对象，只需要用<code>$()</code>将DOM对象包装起来，就能获得jQuery对象了</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg-div&quot;</span>);<span class="comment">//得到DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $div = $(div); <span class="comment">//转换成jQuery对象</span></span><br></pre></td></tr></table></figure><h3 id="3-9-3-jQuery选择器"><a href="#3-9-3-jQuery选择器" class="headerlink" title="3.9.3 jQuery选择器"></a>3.9.3 jQuery选择器</h3><h4 id="3-9-3-1-基本选择器"><a href="#3-9-3-1-基本选择器" class="headerlink" title="3.9.3.1 基本选择器"></a>3.9.3.1 基本选择器</h4><blockquote><p>基本选择器和HTML大同小异，<code>$(&quot;选择器&quot;)</code></p></blockquote><table><thead><tr><th><strong>选择器</strong></th><th align="left"><strong>描述</strong></th><th><strong>返回</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>#id</td><td align="left">根据给定的id匹配一个元素</td><td>单个元素的集合</td><td><code>$(&quot;#test&quot;)</code></td></tr><tr><td>.class</td><td align="left">根据给定的类名匹配元素</td><td>集合元素</td><td><code>$(&quot;.test&quot;)</code></td></tr><tr><td>element</td><td align="left">根据给定的元素名匹配元素</td><td>集合元素</td><td><code>$(&quot;p&quot;)</code></td></tr><tr><td>*</td><td align="left">匹配所有元素</td><td>集合元素</td><td><code>$(&quot;*&quot;)</code></td></tr><tr><td>selector1,s2,s3…</td><td align="left">将每个选择器匹配到的元素合并后一起返回</td><td>集合元素</td><td></td></tr></tbody></table><h4 id="3-9-3-2-层级选择器"><a href="#3-9-3-2-层级选择器" class="headerlink" title="3.9.3.2 层级选择器"></a>3.9.3.2 层级选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th><th>返回</th><th>例</th></tr></thead><tbody><tr><td>ancestor  descendant</td><td>在给定的祖先元素下匹配所有的后代元素</td><td>集合元素</td><td><code>$(&quot;li span&quot;)</code></td></tr><tr><td>parent &gt; child</td><td>在给定的父元素下匹配所有的子元素</td><td>集合元素</td><td><code>$(&quot;li&gt;span&quot;)</code></td></tr><tr><td>prev + next</td><td>匹配所有紧接在  prev 元素后的 next 元素</td><td>集合元素</td><td><code>$(&quot;p+span&quot;)</code></td></tr><tr><td>prev ~ siblings</td><td>匹配  prev 元素之后的所有 siblings(同辈) 元素</td><td>集合元素</td><td><code>$(&quot;p~span&quot;)</code></td></tr></tbody></table><h4 id="3-9-3-3-过滤选择器"><a href="#3-9-3-3-过滤选择器" class="headerlink" title="3.9.3.3 过滤选择器"></a>3.9.3.3 过滤选择器</h4><h4>🚀 基本过滤选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th><th><strong>返回</strong></th><th><strong>例</strong></th></tr></thead><tbody><tr><td>:first</td><td>获取第一个元素</td><td>选中第一个p标签</td><td><code>$(&quot;p:first&quot;)</code></td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td><td>选中span但不包括其中的p</td><td><code>$(&quot;span:not p&quot;)</code></td></tr><tr><td>:even</td><td>匹配所有索引值为偶数的元素，从 0 开始计数</td><td>选中偶数行</td><td><code>$(&quot;tr:even&quot;)</code></td></tr><tr><td>:odd</td><td>匹配所有索引值为奇数的元素，从 0 开始计数</td><td>选中奇数行</td><td><code>$(&quot;tr:odd&quot;)</code></td></tr><tr><td>:eq(index)</td><td>匹配一个给定索引值的元素</td><td>选中第二行</td><td><code>$(&quot;tr:eq(2)&quot;)</code></td></tr></tbody></table><blockquote><p>其它</p></blockquote><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>:gt(index)</td><td>匹配所有大于给定索引值的元素</td></tr><tr><td>:lang1.9+</td><td>选择指定语言的所有元素</td></tr><tr><td>:last</td><td>获取最后个元素</td></tr><tr><td>:lt(index)</td><td>匹配所有小于给定索引值的元素</td></tr><tr><td>:header</td><td>匹配如 h1, h2, h3之类的标题元素</td></tr><tr><td>:animated</td><td>匹配所有正在执行动画效果的元素</td></tr><tr><td>:focus</td><td>匹配当前获取焦点的元素</td></tr><tr><td>:root1.9+</td><td>选择该文档的根元素</td></tr></tbody></table><h4>🚀 内容过滤选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th><th>例</th><th>返回</th></tr></thead><tbody><tr><td>:contains(text)</td><td>匹配包含给定文本的元素</td><td><code>$(&quot;span:contain(&#39;A&#39;)&quot;)</code></td><td>所有包含A字符的span</td></tr><tr><td>:empty</td><td>匹配所有不包含子元素或者文本的空元素</td><td><code>$(&quot;:empty&quot;)</code></td><td>没有结束标签的元素也会返回</td></tr><tr><td>:has(selector)</td><td>匹配含有选择器所匹配的元素的元素</td><td><code>$(&quot;li:has(p:empty)&quot;)</code></td><td>li标签中的空p</td></tr><tr><td>:parent</td><td>匹配含有子元素或者文本的元素</td><td><code>$(&quot;li:has(p:parent)&quot;)</code></td><td>li标签中有内容的p</td></tr></tbody></table><h4>🚀 可见性过滤选择器</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:hidden</td><td>匹配所有不可见元素，或者type为hidden的元素</td></tr><tr><td>:visible</td><td>匹配所有的可见元素</td></tr></tbody></table><h4>🚀 属性过滤选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th><th>例</th><th>返回</th></tr></thead><tbody><tr><td>[attribute]</td><td>匹配包含给定属性的元素</td><td><code>$(&quot;color&quot;)</code></td><td>含有color属性的元素</td></tr><tr><td>[attribute&#x3D;value]</td><td>匹配给定的属性是某个特定值的元素</td><td><code>$(&quot;color=red&quot;)</code></td><td>color是红色的元素</td></tr><tr><td>[attribute!&#x3D;value]</td><td>匹配所有不含有指定的属性，或者属性不等于特定值的元素。</td><td><code>$(&quot;color!=red&quot;)</code></td><td></td></tr><tr><td>[attribute^&#x3D;value]</td><td>匹配给定的属性是以某些值开始的元素</td><td></td><td></td></tr><tr><td>[attribute$&#x3D;value]</td><td>匹配给定的属性是以某些值结尾的元素</td><td></td><td></td></tr><tr><td>[attribute*&#x3D;value]</td><td>匹配给定的属性是以包含某些值的元素</td><td></td><td></td></tr><tr><td>[attrSel1][attrSel2][attrSelN]</td><td>复合属性选择器，需要同时满足多个条件时使用</td><td></td><td></td></tr></tbody></table><h4>🚀 子元素过滤选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>:first-child</td><td>匹配第一个子元素</td></tr><tr><td>:first-of-type1.9+</td><td>选择所有相同的元素名称的第一个兄弟元素</td></tr><tr><td>:last-child</td><td>匹配最后一个子元素</td></tr><tr><td>:last-of-type1.9+</td><td>选择的所有元素之间具有相同元素名称的最后一个兄弟元素</td></tr><tr><td>:nth-child</td><td>匹配其父元素下的第N个子或奇偶元素</td></tr><tr><td>:nth-last-child()1.9+</td><td>选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个</td></tr><tr><td>:nth-last-of-type()1.9+</td><td>选择的所有他们的父级元素的第n个子元素，计数从最后一个元素到第一个</td></tr><tr><td>:nth-of-type()1.9+</td><td>选择同属于一个父元素之下，并且标签名相同的子元素中的第n个</td></tr><tr><td>:only-child</td><td>如果某个元素是父元素中唯一的子元素，那将会被匹配</td></tr><tr><td>:only-of-type1.9+</td><td>选择所有没有兄弟元素，且具有相同的元素名称的元素</td></tr></tbody></table><h4>🚀 表单过滤选择器</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>:input</td><td>匹配所有 input, textarea, select 和 button  元素</td></tr><tr><td>:text</td><td>匹配所有的单行文本框</td></tr><tr><td>:password</td><td>匹配所有密码框</td></tr><tr><td>:radio</td><td>匹配所有单选按钮</td></tr><tr><td>:checkbox</td><td>匹配所有复选框</td></tr><tr><td>:submit</td><td>匹配所有提交按钮</td></tr><tr><td>:image</td><td>匹配所有图像域</td></tr><tr><td>:reset</td><td>匹配所有重置按钮</td></tr><tr><td>:button</td><td>匹配所有按钮</td></tr><tr><td>:file</td><td>匹配所有文件域</td></tr><tr><td>:hidden</td><td>匹配所有不可见元素，或者type为hidden的元素</td></tr></tbody></table><h3 id="3-9-4-jQuery文档操作"><a href="#3-9-4-jQuery文档操作" class="headerlink" title="3.9.4 jQuery文档操作"></a>3.9.4 jQuery文档操作</h3><h4 id="3-9-4-1-插入"><a href="#3-9-4-1-插入" class="headerlink" title="3.9.4.1 插入"></a>3.9.4.1 插入</h4><h4>🚀 内部插入</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>append(content)</td><td>向每个匹配的元素内部追加内容</td></tr><tr><td>appendTo(content)</td><td>把所有匹配的元素追加到另一个指定的元素元素集合中</td></tr><tr><td>prepend(content)</td><td>向每个匹配的元素内部前置内容</td></tr><tr><td>prependTo(content)</td><td>把所有匹配的元素前置到另一个、指定的元素元素集合中</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.title-span&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;123&quot;</span>)<span class="comment">//在span标签内容追加&quot;123&quot;</span></span><br><span class="line">$(<span class="string">&quot;.title-span&quot;</span>).<span class="title function_">append</span>($(<span class="string">&quot;&lt;div&gt;123&lt;/div&gt;&quot;</span>))<span class="comment">//在span标签内加div</span></span><br><span class="line">$(<span class="string">&quot;&lt;div&gt;123&lt;/div&gt;&quot;</span>).<span class="title function_">appendTo</span>($(<span class="string">&quot;.title-span&quot;</span>))<span class="comment">//把div插入到span内</span></span><br></pre></td></tr></table></figure><h4>🚀外部插入</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>after(content|fn)</td><td>在每个匹配的元素之后插入内容</td></tr><tr><td>before(content|fn)</td><td>在每个匹配的元素之前插入内容</td></tr><tr><td>insertAfter(content)</td><td>把所有匹配的元素插入到另一个、指定的元素元素集合的后面</td></tr><tr><td>insertBefore(content)</td><td>把所有匹配的元素插入到另一个、指定的元素元素集合的前面</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.title-span&quot;</span>).<span class="title function_">after</span>($(<span class="string">&quot;&lt;div&gt;123&lt;/div&gt;&quot;</span>))<span class="comment">//在span标签后加div</span></span><br><span class="line">$(<span class="string">&quot;&lt;div&gt;123&lt;/div&gt;&quot;</span>).<span class="title function_">insertBefore</span>($(<span class="string">&quot;.title-span&quot;</span>))<span class="comment">//在span标签之前加div</span></span><br></pre></td></tr></table></figure><h4 id="3-9-4-2-包裹"><a href="#3-9-4-2-包裹" class="headerlink" title="3.9.4.2 包裹"></a>3.9.4.2 包裹</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>wrap(html|ele|fn)</td><td>把所有匹配的元素用其他元素的结构化标记包裹起来</td></tr><tr><td>unwrap()</td><td>移出元素的父元素。匹配的元素（以及他们的同辈元素）会在DOM结构上替换他们的父元素</td></tr><tr><td>wrapAll(html|ele)</td><td>匹配的元素（以及他们的同辈元素）会在DOM结构上替换他们的父元素</td></tr><tr><td>wrapInner(html|ele|fn)</td><td>匹配的元素（以及他们的同辈元素）会在DOM结构上替换他们的父元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.title-span&quot;</span>).<span class="title function_">wrap</span>($(<span class="string">&quot;div&quot;</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;span&gt;&lt;/span&gt;改为</span></span><br><span class="line"><span class="comment">&lt;div&gt;</span></span><br><span class="line"><span class="comment">&lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-9-4-3-替换"><a href="#3-9-4-3-替换" class="headerlink" title="3.9.4.3 替换"></a>3.9.4.3 替换</h4><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>replaceWith(content|fn)</td><td>将所有匹配的元素替换成指定的HTML或DOM元素</td></tr><tr><td>replaceAll(selector)</td><td>用匹配的元素替换掉所有 selector匹配到的元素</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.title-span&quot;</span>).<span class="title function_">replaceWith</span>($(<span class="string">&quot;div&quot;</span>))<span class="comment">//把span标签替换为div</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">replaceAll</span>($(<span class="string">&quot;.title-span&quot;</span>))<span class="comment">//把div替换为span</span></span><br></pre></td></tr></table></figure><h4 id="3-9-4-4-删除"><a href="#3-9-4-4-删除" class="headerlink" title="3.9.4.4 删除"></a>3.9.4.4 删除</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>empty()</td><td>删除匹配的元素集合中所有的子节点(删除所有元素和内容,例如p标签内的文字内容也会被清除)</td></tr><tr><td>remove([expr])</td><td>从DOM中删除所有匹配的元素(删除所有元素，包括绑定事件)</td></tr><tr><td>detach([expr])</td><td>从DOM中删除所有匹配的元素。  不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来</td></tr></tbody></table><h4 id="3-9-4-5-复制"><a href="#3-9-4-5-复制" class="headerlink" title="3.9.4.5 复制"></a>3.9.4.5 复制</h4><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>clone([Even[,deepEven]])</td><td>克隆匹配的DOM元素并且选中这些克隆的副本</td></tr></tbody></table><h1 align="center">🌴 2022.4.12 早八</h1><h3 id="3-9-5-jQuery的ajax请求"><a href="#3-9-5-jQuery的ajax请求" class="headerlink" title="3.9.5 jQuery的ajax请求"></a>3.9.5 jQuery的ajax请求</h3><h4 id="3-9-5-1-ajax请求"><a href="#3-9-5-1-ajax请求" class="headerlink" title="3.9.5.1 ajax请求"></a>3.9.5.1 ajax请求</h4><h4>🚀 $.ajax()</h4><blockquote><p>格式： <code>$.ajax(url,[settings])</code>，所有选项都是可选的</p><ul><li><p>url：发送请求的URL字符串</p></li><li><p>settings：AJAX 请求设置</p></li></ul></blockquote><blockquote><p>常用的settings选项：</p><ul><li>contentType：发送信息至服务器时内容编码类型。默认: “application&#x2F;x-www-form-urlencoded”</li><li>data：发送到服务器的数据。数据类型可以是Object,String</li><li>type：请求方式 (“POST” 或 “GET”)， 默认为 “GET”</li><li>timeout：设置请求超时时间（毫秒）。number</li><li>success(data, textStatus, jqXHR)：请求成功后的回调函数。</li><li>error：请求失败时调用此函数</li></ul></blockquote><h4>🚀 load()</h4><blockquote><p>格式： <code>load(url, [data], [callback])</code></p><p>说明：<code>load()</code> 方法从服务器加载数据，并把返回的数据放入被选元素中</p><ul><li>url：待装入 HTML 网页网址</li><li>data：发送至服务器的 key&#x2F;value 数据</li><li>callback：载入成功时回调函数</li></ul></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;/try/ajax/demo_test.txt&quot;</span>,<span class="keyword">function</span>(<span class="params">responseTxt,statusTxt,xhr</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(statusTxt==<span class="string">&quot;success&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;外部内容加载成功!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(statusTxt==<span class="string">&quot;error&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;Error: &quot;</span>+xhr.<span class="property">status</span>+<span class="string">&quot;: &quot;</span>+xhr.<span class="property">statusText</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 jQuery AJAX 修改该文本<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>获取外部内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 $.get()</h4><blockquote><p>格式：<code>$. get(url, [data], [callback], [type])</code><br>说明：通过远程 HTTP GET 请求载入信息。这是一个简单的 GET 请求功能以取代复杂 <code>$.ajax</code> 。请求成功时可调用回调函数</p><ul><li>url：待装入 HTML 网页网址</li><li>data：发送至服务器的 key&#x2F;value 数据</li><li>callback：载入成功时回调函数</li><li>type：返回内容格式，xml, html, script, json, text, _default</li></ul></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&quot;/try/ajax/demo_test.php&quot;</span>,<span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;数据: &quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>发送一个 HTTP GET 请求并获取返回结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4>🚀 $.getJSON()</h4><blockquote><p>格式：<code>$. get(url, [data], [callback])</code><br>说明：通过 HTTP GET 请求载入 JSON 数据</p><ul><li>url：发送请求地址。</li><li>data：发送至服务器的 key&#x2F;value参数。</li><li>callback：载入成功时回调函数。</li></ul></blockquote><h4>🚀 $. getScript()</h4><blockquote><p>格式：<code>$. getScript(url, [callback])</code><br>说明：通过 HTTP GET 请求载入并执行一个 JavaScript 文件</p><ul><li>url：待载入 JS 文件地址。</li><li>callback：载入成功时回调函数。</li></ul></blockquote><h4>🚀 $.post()</h4><blockquote><p>格式：<code>$. post(url, [data], [callback], [type])</code><br>说明：通过远程 HTTP POST 请求载入信息。这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数</p><ul><li>url：发送请求地址</li><li>data：待发送 Key&#x2F;value 参数</li><li>callback：载入成功时回调函数</li><li>type：返回内容格式，xml, html, script, json, text, _default</li></ul></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">post</span>(<span class="string">&quot;/try/ajax/demo_test_post.php&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&quot;菜鸟教程&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>:<span class="string">&quot;http://www.runoob.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;数据: \n&quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.4.14 早十</h1><h2 id="5-1-JSP概述"><a href="#5-1-JSP概述" class="headerlink" title="5.1 JSP概述"></a>5.1 JSP概述</h2><h3>🚀 5.1.1　什么是JSP</h3><blockquote><p>JSP（Java Server Pages）是由Sun公司倡导、许多公司参与而建立的动态网页技术标准。它在HTML代码中嵌入Java代码片段（Scriptlet）和JSP标签，构成了JSP网页。在接收到用户请求时，服务器会处理Java代码片段，然后生成处理结果的HTML页面返回给客户端，客户端的浏览器将呈现最终页面效果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF19.png" alt="JAVA WEB开发技术19"></p><h3>🚀 5.1.2　如何学好JSP</h3><blockquote><ol><li>了解Web设计流程与工作原理</li><li>了解MVC设计模式</li><li>多实践，多思考，多请教</li><li>努力自己解决问题</li><li>多查阅资料</li><li>多阅读代码</li><li>熟练掌握HTML、CSS、JavaScript</li><li>掌握主流的框架</li><li>掌握数据库技术</li></ol></blockquote><h3>🚀 5.1.3　JSP技术特征</h3><blockquote><ol><li>跨平台</li><li>业务代码分离</li><li>组件重用</li><li>继承Java Servlet功能</li><li>预编译</li></ol></blockquote><h2 id="5-2-开发第一个JSP程序"><a href="#5-2-开发第一个JSP程序" class="headerlink" title="5.2 开发第一个JSP程序"></a>5.2 开发第一个JSP程序</h2><h3>🚀 5.2.1　编写JSP程序</h1><p><code>File-New-Dynamic Web Project(动态项目)</code>，命名项目名称，创建好如图</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF20.png" alt="JAVA WEB开发技术20"></p><p>新建JSP：<code>右击目录webapp-New-JSP File</code></p><blockquote><p>index.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;!-- 自动刷新并指向新页面 --&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Refresh&quot;</span> content=<span class="string">&quot;3;URL=time.jsp&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h2&gt;页面加载中...&lt;/h2&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>time.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;time&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是第一个JSP程序&lt;br&gt;</span><br><span class="line">现在时间是:&lt;%=<span class="keyword">new</span> <span class="title class_">Date</span>().toLocaleString() %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3>🚀 5.2.2　运行JSP程序</h1><blockquote><p>在Servers中添加服务器(服务器是我提前配好的tomcat，servers里是空的话，<a href="https://blog.csdn.net/qq_49488584/article/details/122147212">参考前期准备中2、3点，下载并配置</a>)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF21.gif" alt="JAVA WEB开发技术21"></p><blockquote><p>启动服务器方法一：<code>右击Tomcat-Start-在浏览器输入localhost:8080/工程名字</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF22.gif" alt="JAVA WEB开发技术22"></p><blockquote><p>启动服务器方法二：<code>右击单个jsp文件--Run on Server-localhost-Tomcat-Finish</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF23.gif" alt="JAVA WEB开发技术23"></p><h2 id="5-3-了解JSP的基本构成"><a href="#5-3-了解JSP的基本构成" class="headerlink" title="5.3 了解JSP的基本构成"></a>5.3 了解JSP的基本构成</h2><h3>🚀 JSP指令</h3><blockquote><p>用来设置与整个JSP页面相关的属性(后面具体举例)</p><ul><li><code>&lt;%@ page ... %&gt;</code> ：对当前页面的说明</li><li><code>&lt;%@ include ... %&gt;</code> ：引入外部文件</li><li><code>&lt;%@ taglib ... %&gt;</code> ：引入标签库</li></ul></blockquote><h3>🚀 HTML标记</h3><blockquote><p>页面显示的网页元素</p></blockquote><h3>🚀 注释</h3><blockquote><ul><li>JSP注释（<code>&lt;%-- 注释 --%&gt;</code>）</li><li>HTML注释（<code>&lt;!-- 注释 --&gt;</code>）</li></ul></blockquote><h3>🚀 嵌入Java代码</h3><blockquote><p>可以包含任意量的Java语句、变量、方法或表达式</p><p>格式：<code>&lt;% 代码片段 %&gt;</code>，<code>&lt;%=表达式%&gt;</code></p></blockquote><h3>🚀 JSP行为</h3><blockquote><p>使用XML语法结构来控制<strong>servlet</strong>引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等</p><p>格式:<code>&lt;jsp:action_name attribute=&quot;value&quot; /&gt;</code></p><p>常用的JSP行为：</p><ul><li><code>jsp:include</code></li><li><code>jsp:forward</code></li><li><code>jsp:useBean</code></li></ul></blockquote><h3>🚀 JSP隐含对象</h3><blockquote><p>JSP支持九个自动定义的变量，称隐含对象</p></blockquote><table><thead><tr><th><strong>对象</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>request</td><td><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td>response</td><td><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td>out</td><td><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td>session</td><td><strong>HttpSession</strong>类的实例</td></tr><tr><td>application</td><td><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td>config</td><td><strong>ServletConfig</strong>类的实例</td></tr><tr><td>pageContext</td><td><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>page</td><td>类似于Java类中的this关键字</td></tr><tr><td>Exception</td><td><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><h2 id="5-4-指令标签"><a href="#5-4-指令标签" class="headerlink" title="5.4 指令标签"></a>5.4 指令标签</h2><blockquote><p>指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言</p><p>语法格式：<code>&lt;%@ directive attribute=&quot;value&quot; %&gt;</code></p></blockquote><h3 id="5-4-1-page指令"><a href="#5-4-1-page指令" class="headerlink" title="5.4.1　page指令"></a>5.4.1　page指令</h3><blockquote><p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令</p><p>语法格式：<code>&lt;%@ page attribute=&quot;value&quot; %&gt;</code></p><p>黑体是常用的三个，在我们新建jsp文件默认就有</p></blockquote><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>buffer</td><td>指定out对象使用缓冲区的大小</td></tr><tr><td>autoFlush</td><td>控制out对象的 缓存区</td></tr><tr><td><strong>contentType</strong></td><td>指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td>errorPage</td><td>指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td>isErrorPage</td><td>指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td>extends</td><td>指定servlet从哪一个类继承</td></tr><tr><td><strong>import</strong></td><td>导入要使用的Java类</td></tr><tr><td>info</td><td>定义JSP页面的描述信息</td></tr><tr><td>isThreadSafe</td><td>指定对JSP页面的访问是否为线程安全</td></tr><tr><td><strong>language</strong></td><td>定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td>session</td><td>指定JSP页面是否使用session</td></tr><tr><td>isELIgnored</td><td>指定是否执行EL表达式</td></tr><tr><td>isScriptingEnabled</td><td>确定脚本元素能否被使用</td></tr></tbody></table><h3 id="5-4-2-include指令"><a href="#5-4-2-include指令" class="headerlink" title="5.4.2　include指令"></a>5.4.2　include指令</h3><blockquote><p>通过include指令来<strong>包含其他文件</strong>。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行</p><p>语法格式如下：<code>&lt;%@ include file=&quot;文件相对 url 地址&quot; %&gt;</code></p></blockquote><blockquote><p>time.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%=<span class="keyword">new</span> <span class="title class_">Date</span>().toLocaleString() %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>include.jsp</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;time&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;time.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>include指令相当于是把另一个文件的内容插入到当前位置</p></blockquote><h3 id="5-4-3-taglib指令"><a href="#5-4-3-taglib指令" class="headerlink" title="5.4.3　taglib指令"></a>5.4.3　taglib指令</h3><blockquote><p>JSP允许用户自定义标签，一个自定义标签库就是自定义标签的集合。Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。好处是能使代码重复使用，一次完成只要引用直接完成功能</p><p>语法格式：<code>&lt;%@ taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; %&gt;</code></p><ul><li>prefix属性：指定标签库的前缀</li><li>uri属性：确定标签库的位置</li></ul></blockquote><p><a href="https://blog.csdn.net/jiudihanbing/article/details/19850119?ops_request_misc=&request_id=&biz_id=102&utm_term=taglig&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-19850119.142%5Ev8%5Earticle_score_rank,157%5Ev4%5Econtrol&spm=1018.2226.3001.4187">学习创建taglib标签_jiudihanbing的博客-CSDN博客</a></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span></span><br><span class="line">contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;@% taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;taglib示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;5&quot;</span>&gt;</span><br><span class="line">Item &lt;c:out value=<span class="string">&quot;$&#123;i&#125;&quot;</span> /&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.4.19 早十</h1><h2 id="5-5-嵌入Java代码"><a href="#5-5-嵌入Java代码" class="headerlink" title="5.5 嵌入Java代码"></a>5.5 嵌入Java代码</h2><h3 id="5-5-1-代码片段"><a href="#5-5-1-代码片段" class="headerlink" title="5.5.1 代码片段"></a>5.5.1 代码片段</h3><blockquote><p>代码片段，指的是在JSP页面中嵌入的Java代码。代码片段在页面请求的处理期间被执行，可以通过JSP内置对象在页面输出内容、访问session会话、编写流程控制语句等</p><p>语法格式：<code>&lt;% 代码片段 %&gt;</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF24.png" alt="JAVA WEB开发技术24"></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;<span class="number">99</span>乘法&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">span&#123;</span><br><span class="line">display:inline-block;</span><br><span class="line">width:5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 时间例子 --&gt;</span><br><span class="line">    &lt;%=<span class="keyword">new</span> <span class="title class_">Date</span>().toLocaleString() %&gt;&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//时间例子</span></span><br><span class="line">    Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">out.print(date.toLocaleString());</span><br><span class="line">out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">//99乘法表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">out.print(<span class="string">&quot;&lt;span&gt;&quot;</span>+j+<span class="string">&quot;×&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-5-2-声明"><a href="#5-5-2-声明" class="headerlink" title="5.5.2 声明"></a>5.5.2 声明</h3><blockquote><p>声明用来在JSP页面中定义变量或方法。声明所定义的变量为类成员变量，定义的方法为类成员方法</p><p>语法格式：<code>&lt;%! declaration; [ declaration; ]+ ... %&gt;</code></p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%! <span class="type">int</span> a=<span class="number">0</span>; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">out.print(<span class="string">&quot;i:&quot;</span>+(i++));</span><br><span class="line">out.print(<span class="string">&quot;a:&quot;</span>+(a++));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是两个有什么区别呢？刷新一下</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JAVA%20WEB%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF25.gif" alt="JAVA WEB开发技术25"></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> m)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (m &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m * fac(m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">i++;</span><br><span class="line">out.print(<span class="string">&quot;fac(n)=&quot;</span> + fac(i));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-JSP表达式"><a href="#5-5-3-JSP表达式" class="headerlink" title="5.5.3 JSP表达式"></a>5.5.3 JSP表达式</h3><blockquote><p>JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。由于表达式的值会被转化成String，所以可以在一个文本行中使用表达式而不用去管它是否是HTML标签。表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式<br>语法格式：<code>&lt;%= 表达式 %&gt;</code></p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%=<span class="keyword">new</span> <span class="title class_">Date</span>().toLocaleString() %&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-6-注释"><a href="#5-6-注释" class="headerlink" title="5.6 注释"></a>5.6 注释</h2><h3>🚀 HTML注释</h3><blockquote><p>HTML注释，通过浏览器查看网页源代码时可以看见注释内容。 HTML脚本也可以在html文件中添加</p><p>语法格式：<code>&lt;!-- 注释 --&gt;</code></p></blockquote><h3>🚀 JSP注释</h3><blockquote><p>JSP注释，注释内容不会被发送至浏览器甚至不会被编译</p><p>语法格式：<code>&lt;%-- 注释 --%&gt;</code></p></blockquote><h3>🚀 动态注释</h3><blockquote><p>在HTML脚本注释中添加Java脚本，动态生成HTML脚本注释</p><p>例如：<code>&lt;!-- &lt;%=new Date()%&gt; --&gt;</code></p></blockquote><h3>🚀 代码注释</h3><blockquote><p>在JSP页面中嵌入的Java代码中，可以对代码进行注释，注释方式同Java中的注释方式</p><p>单行注释：<code>//注释内容</code></p><p>多行注释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*注释行1</span><br><span class="line">注释行2*/</span><br></pre></td></tr></table></figure><p>文档注释：<code>/**文档说明内容*/</code></p></blockquote><h2 id="5-7-JSP动作标签"><a href="#5-7-JSP动作标签" class="headerlink" title="5.7 JSP动作标签"></a>5.7 JSP动作标签</h2><h3 id="5-7-1-lt-jsp-include-gt"><a href="#5-7-1-lt-jsp-include-gt" class="headerlink" title="5.7.1  &lt;jsp:include&gt;"></a>5.7.1  &lt;jsp:include&gt;</h3><blockquote><p>&lt;jsp:include&gt;动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面</p><p>语法结构：<code>&lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;</code></p><ul><li><p>page：包含在页面中的相对URL地址</p></li><li><p>flush：布尔属性，定义在包含资源前是否刷新缓存区</p></li></ul></blockquote><h4>🚀 两种include</h4><blockquote><p><code>&lt;%@ include file=&quot;文件相对URL地址&quot; %&gt;</code></p><ul><li><strong>静态</strong>include（静态包含），是JSP指令中的一种。（JSP指令控制JSP编译器如何去生成servlet ）</li><li>执行时间：在翻译阶段执行，先包含，后编译</li><li>引入内容：引入包含文件的静态文本</li></ul><p><code>&lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;</code></p><ul><li><strong>动态</strong>include（动态包含），是JSP动作的一种。（ JSP动作是一系列可以调用内建于网络服务器中的功能的XML标签）</li><li>执行时间：在请求处理阶段执行，先编译，后包含</li><li>引入内容：引入包含文件的动态结果</li></ul></blockquote><p><a href="https://blog.csdn.net/weixin_37380784/article/details/80743857?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165032984316782092944820%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165032984316782092944820&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-80743857.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Econtrol&utm_term=jsp+include%E4%B8%A4%E7%A7%8D&spm=1018.2226.3001.4187">参考</a></p><h3 id="5-7-2-lt-jsp-forward-gt"><a href="#5-7-2-lt-jsp-forward-gt" class="headerlink" title="5.7.2 &lt;jsp:forward&gt;"></a>5.7.2 &lt;jsp:forward&gt;</h3><blockquote><p>jsp:forward动作把请求转到另外的页面。只有一个page属性</p><p>语法格式：<code>&lt;jsp:forward  page=&quot;相对 URL 地址&quot; /&gt;</code></p><p>page： page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet</p></blockquote><blockquote><p>判断今天的日期是单号还是双号，单号转到odd.jsp页面（粉色背景），双号转到even.jsp页面（蓝色背景）</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- forward.jsp --&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;time&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">span &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">width: 5rem;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> date.getDate();</span><br><span class="line">String pageName=<span class="string">&quot;odd.jsp&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (day % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//转到even.jsp</span></span><br><span class="line">pageName=<span class="string">&quot;even.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;&lt;%=pageName %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">&quot;&lt;%=pageName %&gt;&quot;</span> name=<span class="string">&quot;pageName&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- even.jsp --&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;javax.print.attribute.HashPrintRequestAttributeSet&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;time&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: #9999ff1</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">&quot;pageName&quot;</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- odd.jsp --&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;time&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">background-color: red</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">&quot;pageName&quot;</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-7-3-lt-jsp-param-gt"><a href="#5-7-3-lt-jsp-param-gt" class="headerlink" title="5.7.3 &lt;jsp:param&gt;"></a>5.7.3 &lt;jsp:param&gt;</h3><blockquote><p><code>&lt;jsp:param&gt;</code>操作被用来以“名-值”对的形式为其他标签提供附加信息，它和&lt;jsp:include&gt;、&lt;jsp:forward&gt;、&lt;jsp:plugin&gt;一起使用</p></blockquote><h2 id="5-8-request对象"><a href="#5-8-request对象" class="headerlink" title="5.8 request对象"></a>5.8 request对象</h2><h3 id="5-8-1-获取请求参数值"><a href="#5-8-1-获取请求参数值" class="headerlink" title="5.8.1 获取请求参数值"></a>5.8.1 获取请求参数值</h3><blockquote><p><strong>JSP隐式对象</strong>是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量</p><p><strong>request对象</strong>是javax.servlet.http.HttpServletRequest 类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求</p><p>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等</p><p>在一个请求中可以通过“?”的方式（GET）来传递参数，然后通过request对象的getParameter方法来获取参数值</p></blockquote><h4>🚀 GET 方法</h4><blockquote><p>GET方法将请求的编码信息添加在网址后面，网址与编码信息通过”?”号分隔。<br><code>http://localhost:8080/5-06/show.jsp?id=001&amp;name=alan</code></p><ul><li>GET方法是浏览器默认传递参数的方法</li><li>一些敏感信息，如密码等建议不使用GET方法。</li><li>用get时，传输数据的大小有限制 （注意不是参数的个数有限制），最大为1024字节。</li></ul></blockquote><h3 id="5-8-2-获取form表单的信息"><a href="#5-8-2-获取form表单的信息" class="headerlink" title="5.8.2 获取form表单的信息"></a>5.8.2 获取form表单的信息</h3><blockquote><ul><li>JSP中常用表单向服务器提交信息，所提交的信息可以使用request对象获取</li><li>浏览器中向服务器提交信息，使用 GET 和 POST 方法</li><li>POST提交数据是隐式的，GET是通过在url参数传递</li></ul></blockquote><blockquote><p>request获取表单数据的方法：</p><ul><li><code>getParameter()</code>：获取表单参数的值</li><li><code>getParameterValues()</code>：接收数组变量 （名字相同，但值有多个），如checkbox类型</li><li><code>getParameterNames()</code>：取得所有变量的名称，返回一个Emumeration</li><li><code>getInputStream()</code>：读取来自客户端的二进制数据流</li></ul><p>打个比方<code>document.getelementbyID(&quot;ID&quot;).value;</code>等同于jsp中<code>request.getParameter(&quot;ID&quot;);</code></p></blockquote><h1 align="center">🌴 2022.4.24 早十</h1><h3 id="5-8-3-获取请求客户端信息"><a href="#5-8-3-获取请求客户端信息" class="headerlink" title="5.8.3 获取请求客户端信息"></a>5.8.3 获取请求客户端信息</h3><blockquote><ul><li>每当客户端请求一个页面时，JSP引擎就会产生一个新的对象来代表这个请求</li><li>request对象提供了一系列方法来获取HTTP信息头，包括信息提交方式、客户端主机IP、端口号、表单数据，cookies，HTTP方法等等</li></ul></blockquote><h3 id="5-8-4-在作用域中管理属性"><a href="#5-8-4-在作用域中管理属性" class="headerlink" title="5.8.4 在作用域中管理属性"></a>5.8.4 在作用域中管理属性</h3><blockquote><p>在request中可以设置、获取或移除属性</p><ul><li><code>setAttribute()</code>：添加设置一个属性及其值</li><li><code>getAttribute()</code>：获得某属性值</li><li><code>removeAttribute()</code>：移除某属性</li></ul></blockquote><h3 id="5-8-5-cookie管理"><a href="#5-8-5-cookie管理" class="headerlink" title="5.8.5 cookie管理"></a>5.8.5 cookie管理</h3><blockquote><p>Cookie是存储在客户机的文本文件，可以用它保存了大量轨迹信息。在servlet技术基础上，JSP能够提供对HTTP cookie的支持<br>通常有三个步骤来识别用户：</p><ol><li>服务器脚本发送一系列cookie至浏览器。比如名字，年龄等等</li><li>浏览器在本地机中存储这些信息，以备不时之需</li><li>当下一次浏览器发送任何请求至服务器时，它会同时将这些cookie信息发送给服务器，然后服务器使用这些信息来识别用户</li></ol><p>request对象中的<code>getCookies()</code>方法来访问cookie，该方法会返回一个Cookie对象的数组<br>Cookie对象中常用的方法：<br><code>public void setDomain(String pattern)</code>：设置cookie的域名，比如baidu.com<br><code>public String getDomain()</code>：获取cookie的域名，比如baidu.com<br><code>public void setMaxAge(int expiry)</code>：设置cookie有效期，以秒为单位，默认为当前</p><p>session的存活时间<br><code>public int getMaxAge()</code>：获取cookie有效期，默认为-1 ，表明cookie会活到浏览器关闭为止</p><p>Cookie对象中常用的方法：<br><code>public String getName()</code>：返回 cookie的名称，名称创建后将不能被修改<br><code>public void setValue(String newValue)</code>：设置 cookie的值<br><code>public String getValue()</code>：获取cookie的值<br><code>public void setPath(String uri)</code>：设置cookie 的路径，默认为当前页面目录下的所有URL，还有此目录下的所有子目录<br><code>public String getPath()</code>：获取cookie 的路径</p></blockquote><h2 id="5-9-response对象"><a href="#5-9-response对象" class="headerlink" title="5.9 response对象"></a>5.9 response对象</h2><blockquote><p>response 对象是 <code>javax.servlet.http.HttpServletResponse</code> 类的一个实例。就像服务器会创建request对象一样，它也会创建一个客户端响应</p><p>response响应对象主要将JSP容器处理后的结果传回到客户端。可以通过response变量设置HTTP的状态和向客户端发送数据，如Cookie、HTTP文件头信息等</p></blockquote><blockquote><p>response对象的常用方法：<br><code>void addHeader(String name, String value)</code>：添加指定名称的响应头和值<br><code>void addCookie(Cookie cookie)</code>：添加指定的cookie至响应中<br><code>void setHeader(String name, String value)</code>：使用指定名称和值设置响应头的名称和内容<br><code>void sendError(int sc, String msg)</code>：使用指定的状态码和消息向客户端发送一个出错响应<br><code>void sendRedirect(String location)</code>：使用指定的URL向客户端发送一个临时的间接响应</p></blockquote><h3 id="5-9-1-重定向网页"><a href="#5-9-1-重定向网页" class="headerlink" title="5.9.1　重定向网页"></a>5.9.1　重定向网页</h3><blockquote><p>使用response对象的<code>sendRedirect()</code>方法，可以将文档移动到一个新的位置<br>重定向过程：</p><ol><li>客户浏览器发送http请求</li><li>web服务器接受后发送302状态码响应及对应新的location给客户浏览器</li><li>客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址</li><li>服务器根据此请求寻找资源并发送给客户</li></ol><p>地址栏可以看到重定向后的地址。原request失效，产生一个新的request对象。重定向行为是浏览器做了至少两次的访问请求的</p></blockquote><h3 id="5-9-2-处理HTTP文件头"><a href="#5-9-2-处理HTTP文件头" class="headerlink" title="5.9.2　处理HTTP文件头"></a>5.9.2　处理HTTP文件头</h3><blockquote><p>可以使用response对象的addHeader、setHeader、setIntHeader等方法来设置HTTP头信息<br><code>response.setHeader(&quot;refresh&quot;, &quot;5&quot;);</code><br><code>response.setHeader(&quot;refresh&quot;, &quot;2;URL=welcome.jsp&quot;);</code><br><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=UTF-8&quot;);</code><br><code>response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);</code></p></blockquote><h3 id="5-9-3-设置输出缓冲"><a href="#5-9-3-设置输出缓冲" class="headerlink" title="5.9.3　设置输出缓冲"></a>5.9.3　设置输出缓冲</h3><blockquote><p>通常情况下，服务器要输出到客户端的内容不会直接写到客户端，而是先写到一个输出缓冲区中；只有3种情况，才将缓冲区中的内容写到客户端</p><ol><li>JSP页面的输出信息已经全部写入到了缓冲区</li><li>缓冲区已满</li><li>在JSP页面中调用了<code>response.flushBuffer()</code>或者<code>out.flush()</code>方法</li></ol><p><code>void setBufferSize(int size)</code>：设置响应体的缓存区大小<br><code>boolean isCommitted()</code>：返回响应是否已经提交到客户端</p></blockquote><h1 align="center">🌴 2022.4.26 早十</h1><h2 id="5-10-session对象"><a href="#5-10-session对象" class="headerlink" title="5.10 session对象"></a>5.10 session对象</h2><h3 id="5-10-1-创建及获取session信息"><a href="#5-10-1-创建及获取session信息" class="headerlink" title="5.10.1 创建及获取session信息"></a>5.10.1 创建及获取session信息</h3><blockquote><p>Session对象是用来分别保存每一个用户信息的对象，以便于跟踪用户的操作状态。Session的信息保存在服务端，Session的ID保存在客户机的Cookie中。不同的用户对应的Session对象一般是不同的。例如当用户登录站点时，系统就会为他建立一个与其他不相的Session对象，以便于区别其他用户。这个Session对象记录该用户的个人信息，而当该用户退出网站时，该Session对象就会随之消失</p></blockquote><p>session对象常用的方法：<br><code>public Object getAttribute(String name)</code>：返回session对象中与指定名称绑定的对象，不存在则返回null，类似<code>document.getemelentbyID</code>,但是session返回值是对象，要强转换<code>(String)session.getAttribute(&quot;xxx&quot;)</code><br><code>public Enumeration getAttributeNames()</code>：返回session对象中所有的对象名称<br><code>public long getCreationTime()</code>：返回session对象被创建的时间，以毫秒为单位，从1970年1月1号凌晨开始算起<br><code>public String getId()</code>：返回session对象的ID<br><code>public void removeAttribute(String name)</code>：移除session中指定名称的对象<br><code>public void setAttribute(String name, Object value)</code> ：使用指定的名称和值来产生一个对象并绑定到session中</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String sessionMessage=<span class="string">&quot;session练习&quot;</span>;</span><br><span class="line">session.setAttribute(<span class="string">&quot;message&quot;</span>,sessionMessage);</span><br><span class="line">out.print(<span class="string">&quot;保存在session范围内的对象为:&quot;</span>+sessionMessage);</span><br><span class="line">out.print(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;messgae&quot;</span>,sessionMessage);</span><br><span class="line">out.print(<span class="string">&quot;保存在request范围内的对象为:&quot;</span>+request.getAttribute(<span class="string">&quot;message&quot;</span>));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%=session.getId()%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-10-2-从会话中移除指定的绑定对象"><a href="#5-10-2-从会话中移除指定的绑定对象" class="headerlink" title="5.10.2 从会话中移除指定的绑定对象"></a>5.10.2 从会话中移除指定的绑定对象</h3><blockquote><p>对于存储在session中的对象，如果想从中移除，可以使用session对象的<code>removeAttribute()</code>方法</p></blockquote><h3 id="5-10-3-销毁session"><a href="#5-10-3-销毁session" class="headerlink" title="5.10.3 销毁session"></a>5.10.3 销毁session</h3><blockquote><p>session的销毁只有三种方式：</p><ol><li>调用了<code>session.invalidate()</code>方法</li><li>session过期（超时）</li><li>服务器重新启动</li></ol></blockquote><h3 id="5-10-4-会话超时的管理"><a href="#5-10-4-会话超时的管理" class="headerlink" title="5.10.4 会话超时的管理"></a>5.10.4 会话超时的管理</h3><blockquote><p>session的生命周期包括三个阶段：创建、活动、销毁</p><p><strong>创建</strong>：当客户端第一次访问某个jsp或者servlet的时候，服务器会为当前会话创建一个sessionId，每次客户端向服务器发送请求时，都会将此sessionId携带过去，服务端会对此sessionId进行校验</p><p><strong>活动</strong>：某次会话当中通过超链接打开的新页面属于同义词会话。只要当前页面没有全部关闭，重新打开新的浏览器窗口访问同一项目资源时属于同一次会话。本次会话的所有页面都关闭后再重新访问某个Jsp或者Servlet将会创建新的会话</p><p><strong>销毁</strong>：Session的销毁三种</p></blockquote><blockquote><p>Tomcat默认session超时时间为30分。设置session超时时间有两种方式：</p><ol><li><p><code>session.setMaxInactiveInterval(时间)</code>;&#x2F;&#x2F;单位是秒</p></li><li><p>在web.xml中配置</p></li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;</span><br><span class="line">10</span><br><span class="line">&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt; // 单位是分钟</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-11-application对象"><a href="#5-11-application对象" class="headerlink" title="5.11 application对象"></a>5.11 application对象</h2><h3 id="5-11-1-访问应用程序初始化参数"><a href="#5-11-1-访问应用程序初始化参数" class="headerlink" title="5.11.1　访问应用程序初始化参数"></a>5.11.1　访问应用程序初始化参数</h3><blockquote><p>application对象是<code>javax.servlet.ServletContext</code>的实例，该实例代表JSP所属的WEB应用本身，负责提供应用程序在服务器中运行时的一些全局信息</p><p>Application对象将信息保存在服务器中，只要服务器没有关闭，application对象中的数据就会一直存在，在整个服务器的运行过程当中，application对象只有一个，它会被所有的用户共享</p><p>与request和session相比， application的存活范围更大</p></blockquote><p>application对象常用的方法：<br><code>String getAttribute(String name)</code>：根据属性名称获取属性值<br><code>Enumeration getAttributeNames()</code>：获取所有的属性名称<br><code>void setAttribute(String name, Object object)</code>：设置属性，指定属性名称和属性值<br><code>void removeAttribute(String name)</code>：根据属性名称删除对应的属性<br><code>ServletContext getContext(String uripath)</code>：获取指定URL的ServletContext对象<br><code>String getContextPath()</code>：获取当前Web应用程序的根目录<br><code>String getInitParameter(String name)</code>:根据初始化参数名称，获取初始化参数值<br><code>int getMajorVersion()</code>：获取Servlet API的主版本号<br><code>int getMinorVersion()</code>：获取Servlet API的次版本号<br><code>String getMimeType(String file)</code>：获取指定文件的MIME 类型<br><code>String getServletInfo()</code>：获取当前Web服务器的版本信息<br><code>String getServletContextName()</code>：获取当前Web应用程序的名称<br><code>void log(String message)</code>：将信息写入日志文件中</p><blockquote><p> application有一个重要的用处：用于web应用的配置参数。如，通过初始化信息为程序提供访问数据所用的驱动、URL、用户名和密码等，然后web应用中其他servlet和JSP都可以使用它获取连接数据库的信息<br> 在web.xml文件中给出</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA WEB开发技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
            <tag> JAVA WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三维建模技术上课笔记汇总</title>
      <link href="/posts/47125/"/>
      <url>/posts/47125/</url>
      
        <content type="html"><![CDATA[<h1 id="1-界面"><a href="#1-界面" class="headerlink" title="1 界面"></a>1 界面</h1><h1 align="center">🌴 2022.2.28 早十</h1><h2 id="1-1-3ds-Max-2020工作界面"><a href="#1-1-3ds-Max-2020工作界面" class="headerlink" title="1.1 3ds Max 2020工作界面"></a>1.1 3ds Max 2020工作界面</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF8.png" alt="三维建模技术8"></p><h2 id="1-2-三维物体的显示方式"><a href="#1-2-三维物体的显示方式" class="headerlink" title="1.2 三维物体的显示方式"></a>1.2 三维物体的显示方式</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF1.png" alt="三维建模技术1"></p><p><strong>线框覆盖&#x2F;线框</strong><code>F3</code>：当多个物体相互遮挡时，线框模式显示不会遮挡</p><p><strong>默认明暗处理</strong>：显示比较清除</p><p><strong>边面&#x2F;线框+实体</strong><code>F4</code>：既有实体，又有线框</p><p><strong>边界框</strong>：当物体很多时，场景显示很复杂，用边框显示就只是一个框，不会有压力</p><p><strong>半透明</strong><code>ALT+X</code></p><h2 id="1-3-视图布局"><a href="#1-3-视图布局" class="headerlink" title="1.3 视图布局"></a>1.3 视图布局</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF2.png" alt="三维建模技术2"></p><blockquote><p>英文输入法下操作</p></blockquote><p><strong>默认下有四种</strong>：顶视图<code>T</code>，前视图<code>F</code>，左视图<code>L</code>，透视图<code>P</code></p><p><strong>另外</strong>：底视图<code>B</code>，右视图<code>R</code>，后视图<code>K</code>，用户视图<code>U</code>，摄像机视图<code>C</code></p><h2 id="1-4-视图背景"><a href="#1-4-视图背景" class="headerlink" title="1.4 视图背景"></a>1.4 视图背景</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF3.png" alt="三维建模技术3"></p><p><strong>网格的显示&#x2F;隐藏</strong>：<code>G</code></p><p><strong>视图背景调入</strong>：<code>视图→视口背景→配置视口背景</code>。快捷键<code>ALT+B</code></p><h2 id="1-5-物体的隐藏"><a href="#1-5-物体的隐藏" class="headerlink" title="1.5 物体的隐藏"></a>1.5 物体的隐藏</h2><blockquote><p>右击物体</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF4.png" alt="三维建模技术4"></p><blockquote><p>或点小眼睛</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF5.png" alt="三维建模技术5"></p><h2 id="1-6-工具栏"><a href="#1-6-工具栏" class="headerlink" title="1.6 工具栏"></a>1.6 工具栏</h2><blockquote><p>常用的工具栏</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF6.png" alt="三维建模技术6"></p><blockquote><p>区别镜像中的功能</p></blockquote><p><strong>复制</strong>：得到的2个物体是独立的，修改任何1个都不影响另外1个<br><strong>实例</strong>：得到的2个物体是相关联的， 修改其中任何1个，另1个也会有相应改变<br><strong>参考</strong>：得到的2个物体是主次关系，修改源物体会影响复制体 ，而修改复制体则不会影响源物体</p><blockquote><p>渲染，即保存图片效果</p></blockquote><p>目的是为了快速预览，图片本体小。但不能进行二次编辑。<code>先选中四个视角中的一个窗口并调整视角，再保存</code></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF15.gif" alt="三维建模技术15"  /><h2 id="1-7-视图控制区"><a href="#1-7-视图控制区" class="headerlink" title="1.7 视图控制区"></a>1.7 视图控制区</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF7.png" alt="三维建模技术7"></p><table><thead><tr><th>缩放单视口</th><th>四个视口同时缩放</th><th>最大化显示选定对象</th><th>所有视图最大化显示选定对象</th></tr></thead><tbody><tr><td>视觉&#x2F;视野缩放</td><td>平移视觉</td><td>视角旋转</td><td>视口最大化 <code>ALT+W</code></td></tr></tbody></table><h2 id="1-8-菜单栏常用命令"><a href="#1-8-菜单栏常用命令" class="headerlink" title="1.8 菜单栏常用命令"></a>1.8 菜单栏常用命令</h2><p>1.重置命令：当新建文件，坐标系是保留以前的。重置命令，使用默认坐标系。<code>文件→重置</code></p><p>2.组：成组和解组，类似PS里的组。<code>组→组/解组</code></p><p>3.视图：显示变换<strong>Gizmo</strong>。<code>视图→显示变换Gizmo</code></p><h2 id="1-9-3DS-Max-2020基本设置"><a href="#1-9-3DS-Max-2020基本设置" class="headerlink" title="1.9 3DS Max 2020基本设置"></a>1.9 3DS Max 2020基本设置</h2><blockquote><p>自定义用户界面，一般保持默认状态</p></blockquote><p>用户可以自定义用户界面，并将定义好的界面以文件的形式进行保存，以便于在不同情况下调用不同界面布局。</p><p><code>菜单栏→自定义→自定义用户界面</code>包括对<strong>键盘、鼠标、工具栏、四元菜单、菜单、颜色</strong>的自定义</p><blockquote><p>加载自定义用户界面</p></blockquote><p><code>菜单栏→自定义→加载自定义用户界面方案</code>，调背景使用</p><ul><li>ame-dark.ui</li><li>ame-light.ui</li><li>DefaultUI.ui</li></ul><blockquote><p>单位设置，一般用毫米</p></blockquote><p><code>菜单栏→自定义→单位设置</code></p><h1 align="center">🌴 2022.3.7 早十</h1><h1 id="2-三维建模的主体思路"><a href="#2-三维建模的主体思路" class="headerlink" title="2 三维建模的主体思路"></a>2 三维建模的主体思路</h1><h2>🚀 堆砌建模</h2><blockquote><p>堆砌建模长用来建造<strong>非曲面体(建筑、机械、机器零件、机器人)</strong> ，建模流程是将复杂体拆分为一些基础的零部件，再用基础成型命令，将这些小零件制作出来，最后堆砌在一起(类似乐高)</p></blockquote><h2>🚀 细分建模</h2><blockquote><p>细分建模是<strong>编辑多边形建模或编辑网格</strong>.建模流程是用基本几何体，先完成物体的大型，然后通过编辑多边形或编辑网格工具对模型细分</p></blockquote><h2>🚀 区别</h2><blockquote><p>堆砌建模与细分建模是MAX最重要的两种建模方法，各有特色互为补充</p><p><strong>堆砌建模</strong>适合创建能够被拆解开的物体(建筑、机械装置、家具)。<strong>细分建模</strong>适合创建不能拆分的物体(卡通人物、流线型汽车外壳)</p></blockquote><h2 id="2-1-场景对象操作建模"><a href="#2-1-场景对象操作建模" class="headerlink" title="2.1 场景对象操作建模"></a>2.1 场景对象操作建模</h2><blockquote><p>对象复制的多种方式：克隆复制、变换复制、镜像复制、间隔复制、快照复制、阵列变换复制</p></blockquote><h3 id="2-1-1-克隆复制"><a href="#2-1-1-克隆复制" class="headerlink" title="2.1.1 克隆复制"></a>2.1.1 克隆复制</h3><blockquote><p>克隆出来的对象与原对象<strong>重合</strong>在一起，需要用移动命令移开</p><p><code>工具栏→编辑→克隆</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF9.png" alt="三维建模技术9"></p><blockquote><p><strong>复制</strong>：得到的2个物体是独立的，修改任何1个都不影响另外1个<br><strong>实例</strong>：得到的2个物体是相关联的， 修改其中任何1个，另1个也会有相应改变<br><strong>参考</strong>：得到的2个物体是主次关系，修改源物体会影响复制体 ，而修改复制体则不会影响源物体</p></blockquote><h3 id="2-1-2-变换复制"><a href="#2-1-2-变换复制" class="headerlink" title="2.1.2 变换复制"></a>2.1.2 变换复制</h3><blockquote><p>变换复制可以设置副本数量</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF10.png" alt="三维建模技术10"></p><h4>🚀 移动变换复制</h4><blockquote><p><code>shift+选择并移动工具</code>选中物体并拖动</p></blockquote><h4>🚀 旋转变换复制</h4><blockquote><p><code>shift+旋转工具</code>或<code>shift+旋转工具+角度捕捉</code>选中物体并拖动</p></blockquote><h3 id="2-1-3-镜像复制"><a href="#2-1-3-镜像复制" class="headerlink" title="2.1.3 镜像复制"></a>2.1.3 镜像复制</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF6.png" alt="三维建模技术6"></p><blockquote><p>1.6 写过</p></blockquote><h3 id="2-1-4-间隔复制"><a href="#2-1-4-间隔复制" class="headerlink" title="2.1.4 间隔复制"></a>2.1.4 间隔复制</h3><blockquote><p><code>菜单栏→工具→对齐→间隔工具</code>，先选择<strong>路径</strong>再设置拾取点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF11.png" alt="三维建模技术11"></p><h3 id="2-1-5-阵列复制"><a href="#2-1-5-阵列复制" class="headerlink" title="2.1.5 阵列复制"></a>2.1.5 阵列复制</h3><blockquote><p>用于<strong>大批量对象</strong>的复制，可以把对象<strong>沿着某个方向、按不同距离</strong>进行等比例复制，复制后对象在三维空间成矩形排列</p><p><code>菜单栏→工具→阵列</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF12.png" alt="三维建模技术12"></p><h2 id="2-2-3D-Max建模方法"><a href="#2-2-3D-Max建模方法" class="headerlink" title="2.2 3D Max建模方法"></a>2.2 3D Max建模方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    基础建模--&gt;内置模型建模;</span><br><span class="line">    基础建模--&gt;三维形体建模;</span><br><span class="line">    基础建模--&gt;挤出建模;</span><br><span class="line">    基础建模--&gt;车削建模;</span><br><span class="line">    基础建模--&gt;倒角建模;</span><br><span class="line">    基础建模--&gt;复合物体建模;</span><br><span class="line">    </span><br><span class="line">    高级建模--&gt;多边形建模;</span><br><span class="line">    高级建模--&gt;面片建模;</span><br><span class="line">    高级建模--&gt;NURBS;</span><br><span class="line">    </span><br><span class="line">    特殊建模建模--&gt;如置换贴图;</span><br></pre></td></tr></table></figure><h2 id="2-3-基本体建模"><a href="#2-3-基本体建模" class="headerlink" title="2.3 基本体建模"></a>2.3 基本体建模</h2><h3 id="2-3-1-标准基本体"><a href="#2-3-1-标准基本体" class="headerlink" title="2.3.1 标准基本体"></a>2.3.1 标准基本体</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF13.png" alt="三维建模技术13"></p><h3 id="2-3-2-扩展基本体"><a href="#2-3-2-扩展基本体" class="headerlink" title="2.3.2 扩展基本体"></a>2.3.2 扩展基本体</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF14.png" alt="三维建模技术14"></p><h4>🚀 异面体</h4><blockquote><p>创建各种具有奇特表面的多面体，利用它的参数调节，可以创建出种类繁多的奇特造型，如钻石、卫星</p></blockquote><h4>🚀 环形节</h4><blockquote><p>这是扩展基本体中最复杂的一个工具，可控制的参数众多，组合产生的效果多不胜数，制作的造型也时千奇百怪.它常用于制作管状、缠绕、带袁肿类的造型，也可以将环形节造型转化为Nurbs表面物体</p></blockquote><h4>🚀 切角长方体</h4><blockquote><p>切角长方体是长方体的扩展物体，可以快速创建具有<strong>倒角或圆形边</strong>的长方体</p></blockquote><h4>🚀 切角圆柱体</h4><blockquote><p>切角圆柱体是圆柱体的扩展物体，可以快速创建具有<strong>倒角或圆形边</strong>的圆柱体</p></blockquote><h4>🚀 油罐</h4><blockquote><p>创建带有球状凸出顶部的柱体，<strong>油桶、帐篷、飞碟、药片</strong>等模型都可以通过它来完成</p></blockquote><h4>🚀 胶囊</h4><blockquote><p>使用“胶囊”可创建带有半球状端点封口的圆柱体</p></blockquote><h4>🚀 纺锤</h4>> 创建两端带有圆锥尖顶的柱体，在生活中也是比较常见的，如砖石、笔尖、纺锤等物体，都可以用“纺锤”去创建模型<h4>🚀 L-Ext (L形挤出)</h4><blockquote><p>可以建立L.形夹角的立体墙模型，主要用于建筑快速建模</p></blockquote><h4>🚀 球棱柱</h4><blockquote><p>创建一个带有棱角的柱体模型，可以设置圆角面边参数，来创建挤出的规则面多边形</p></blockquote><h4>🚀 C-Ext(C形挤出)</h4><blockquote><p>可以建立C形夹角的立体墙模型，主要用于建筑快速建模</p></blockquote><h4>🚀 环形波</h4><p>使用“环形波”来创建一个环形，可选项是不规则内部和外部边，它的图形可以设置为<strong>动画</strong>。也可以设置环形波对象增长动画，也可以使用关键帧来设置所有数字设置动画。使用各种特效动画的“环形波”</p><h4>🚀 软管</h4><p>软管对象是一个<strong>能连接两个对象的弹性对象</strong>，因而能反映这两个对象的运动。可以指定软管的总直径和长度、圈数以及其“线”的直径和形状</p><h1 align="center">🌴 2022.3.14 早十</h1><h2 id="2-5-二维图形建模"><a href="#2-5-二维图形建模" class="headerlink" title="2.5 二维图形建模"></a>2.5 二维图形建模</h2><h3>🚀 二维图形建模方法</h3><blockquote><p>对于<strong>简单的图形</strong>，可以直接使用<strong>样条线或扩展样条线</strong>绘制。并通过参数的调整形成二维模型</p><p>对于比较<strong>复杂的图形</strong>，可先由样条线绘制，然后使用“编辑样条线”修改器，对次对象进行编辑处理。需要特别指出的是:利用“线”工具可以绘制出任何复杂的二维图形，可以先画出大致的轮廓，然后通过顶点调整形状和位置，最后得到一个复杂的二维模型</p></blockquote><h3 id="2-5-1-创建样条线"><a href="#2-5-1-创建样条线" class="headerlink" title="2.5.1 创建样条线"></a>2.5.1 创建样条线</h3><blockquote><p>样条线，即平面二维图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF16.png" alt="三维建模技术16"></p><h3 id="2-5-2-二维图形的渲染"><a href="#2-5-2-二维图形的渲染" class="headerlink" title="2.5.2 二维图形的渲染"></a>2.5.2 二维图形的渲染</h3><blockquote><p><strong>二维对象</strong>的渲染是比较特殊的，因为二维对象只有形状，没有体积，系统默认情况下是<strong>不能被渲染着色</strong>而显示出来的</p><p>如果要对<strong>二维对象进行渲染着色</strong>，首先要勾选“在渲染中启用”复选框，然后设定“厚度”值。“厚度”用来定义构成二维对象的线的宽度</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF17.png" alt="三维建模技术17" style="zoom:50%;" /><h3 id="2-5-3-编辑样条线"><a href="#2-5-3-编辑样条线" class="headerlink" title="2.5.3 编辑样条线"></a>2.5.3 编辑样条线</h3><blockquote><p>利用“线”工具可以绘制出任何复杂的二维图形，绘制时首先画出大致的轮廓，然后使用“编辑样条线”修改对次对象进行编辑处理。通过顶点调整形状和位置，最后得到一个复杂的二维模型。</p></blockquote><p>编辑样条线有两种进入方式</p><ul><li>选中“图形”按钮创建的二维物体,点修改，修改列表后选择“编辑样条线”</li><li>选中“图形”按钮创建的二维物体，右击鼠标，转换为“转换为可编辑样条线”。【注意:两种方法的区别】</li></ul><blockquote><p>转换后的样条线有3级子对象，分别是<strong>顶点、线段、样条线</strong>。每一个次级对象都能够进行相应的编辑</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF18.png" alt="三维建模技术18" style="zoom:67%;" /><table><thead><tr><th align="center">样条线</th><th align="center">顶点</th><th align="center">线段</th></tr></thead><tbody><tr><td align="center">附加</td><td align="center">优化</td><td align="center">隐藏</td></tr><tr><td align="center">分离</td><td align="center">断开</td><td align="center">删除</td></tr><tr><td align="center">轮廓</td><td align="center">焊接</td><td align="center">拆分</td></tr><tr><td align="center">布尔</td><td align="center">圆角</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">切角</td><td align="center"></td></tr></tbody></table><h4>🚀 样条线</h4><p><strong>附加:<strong>把</strong>多根</strong>样条线结合成一个物体。</p><p><strong>附加多个:<strong>可以一次性的在列表中把符合条件的二维物体都附加进来，比较适合</strong>大量附加</strong>的时候使用</p><p><strong>分离:<strong>分离</strong>和附加正好相反</strong>，它在样条线里面，我们选择某一根，可以把它分离出去</p><p><strong>轮廓:</strong> 就是在样条线级别，选择这条样条线，把它向外或向内收缩，形成一个轮廓线</p><p><strong>布尔:<strong>布尔操作指的是样条线和样条线之间进行</strong>相加、相减或相交的运算</strong>(必须先做附加，效果类似soildworks的裁剪)</p><h4>🚀 顶点</h4><p><strong>优化:<strong>当我们顶点数量不够的时候，可以通过优化命令来</strong>增加顶点的数量</strong></p><p><strong>断开:</strong> 指的是将原本相连的两个顶点或一个顶点，把它断成两个顶点</p><p><strong>焊接:<strong>指的是两个顶点，原本是</strong>不挨在一起的，将它们接在一起</strong></p><p><strong>圆角:<strong>指的是把一个本来是</strong>直角的拐角，把它变成圆角</strong></p><p><strong>切角:<strong>可以把它切成一个</strong>硬边儿的拐角</strong></p><blockquote><p>顶点的四种状态，必须在编辑样条线中选中顶点，再右击图形(贝斯角点移动一侧另一侧不影响，贝斯两侧都影响)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF19.png" alt="三维建模技术19"></p><h4>🚀 线段</h4><p><strong>隐藏:</strong> 用于隐藏选定的线段。要隐藏样条线的分段，需要先选择一个或多个线段，然后单击隐藏按钮，即可将选择的样条线分段隐藏(之前1.5节隐藏不起作用，因为右击是对三维作用)</p><p><strong>删除:</strong> 选择需要删除的线段,，再单击删除按钮,即可将需要删除的边删除(同<code>Delete</code>)</p><p><strong>拆分:</strong> 通过添加由微调器指定的顶点数来细分所选线段。方法是,选择一条或多条线段，设置“拆分”微调器，然后单击拆分按钮，即可将选择的样条线线段拆分</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="3-1-复合几何体建模概述"><a href="#3-1-复合几何体建模概述" class="headerlink" title="3.1 复合几何体建模概述"></a>3.1 复合几何体建模概述</h2><blockquote><p>Q:什么又是复合几何体建模，或什么是复合对象建模呢?</p><p>A:是指必须要两个或两个以上的物体复合在一起形成一个新的物体。<img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF20.png" alt="三维建模技术20"></p></blockquote><p>复合几何体建模最常用：放样建模，布尔建模，散布建模</p><h2 id="3-2-放样建模"><a href="#3-2-放样建模" class="headerlink" title="3.2 放样建模"></a>3.2 放样建模</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF23.png" alt="三维建模技术23"></p><h3>🚀 放样建模要素分析</h3><blockquote><p>放样指的是将<strong>一个或多个二维图形沿着某个路径进行扫描</strong>，进而形成复杂的三维对象。从放样概念可知，放样物体必须具备两个<strong>要素，截面图形和路径曲线</strong>(放样与solidworks一样，都是通过一个图形扫描路径)</p><p>路径和截面图形也是有要求:<strong>路径必须是唯一的</strong>，它可以是一条直线，也可以是一条曲线;截面图形不是唯一的，不受限制的，可以有很多种的截面图形，但是截面图形有一个要求，就是<strong>截面图形里的样条线的数量是要一样多</strong>，不能拿一个圆放样成两圆，又放成三个圆，那是不允许</p></blockquote><h3>🚀 基本放样</h3><blockquote><p>创建截面和路径图形,应用放样工具</p></blockquote><blockquote><p>示例：先画出螺旋线与长方形，然后对螺旋线进行放样(即让长方形沿螺旋形路径旋转)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF21.png" alt="三维建模技术21"></p><h3>🚀 多截面放样</h3><blockquote><p>多截面放样即在路径上放置多个截面，以创建更加复杂的模型</p></blockquote><blockquote><p>炮弹示例：使用样条线在俯视图依次画出五角星，三个圆圈，在正视图画出一条直线。之后利用直线做路径，从下向上依次获取图形五角星，三个圆圈</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF22.png" alt="三维建模技术22" style="zoom: 67%;" /><h1 align="center">🌴 2022.3.21 早十</h1><h2 id="3-2-放样建模-1"><a href="#3-2-放样建模-1" class="headerlink" title="3.2 放样建模"></a>3.2 放样建模</h2><h3>🚀 多截面放样</h3><blockquote><p>接上节内容，罗马柱示例：与炮弹示例如法炮制，所以简述了</p><ol><li>准备，首先在俯视图做出俩圆，正视图绘制一条直线，其中一个圆周围通过旋转复制8个得到图三。通过附加、布尔差值，最后得到图一图二。</li><li>在复合对象中通过放样，路径参数0，10选取图一，20，80选取图二，90，100选取图一，最终得到图五</li><li>通过缩放，得到图六(缩放功能位置与参数见下图)</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF24.png" alt="三维建模技术24"></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF25.png" alt="三维建模技术25" style="zoom: 67%;" /><h2 id="3-3-布尔建模"><a href="#3-3-布尔建模" class="headerlink" title="3.3 布尔建模"></a>3.3 布尔建模</h2><blockquote><p>前面学习了布尔运算，同样布尔也可以运用在三维物体中</p><p>布尔建模是<strong>两个或多个</strong>相交的物体，通过并集、交集、差集，以及剪切等运算生成新的复合体对象的建模方法</p></blockquote><blockquote><p>烟灰缸示例：</p><ol><li>首先绘制两个切角圆柱体，高相同，半径一大一小</li><li>通过平移、对齐得到图二(小的嵌在大的上面)</li><li>通过布尔运算得到图三</li><li>重复123，绘制圆柱，平移、对齐得到图四，通过布尔运算得到图五</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF26.png" alt="三维建模技术26"></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF27.png" alt="三维建模技术27" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF28.png" alt="三维建模技术28" style="zoom:67%;" /><h2 id="3-4-散布建模"><a href="#3-4-散布建模" class="headerlink" title="3.4 散布建模"></a>3.4 散布建模</h2><blockquote><p>散布复合对象能够将选择对象分布于另一个目标对象的表面</p><p>在创建“散布”组合对象时，<strong>场景</strong>中必须有用作<strong>源对象的网格对象和作为目标对象的分布对象</strong>，而且需要注意这些<strong>对象不能是二维图形</strong></p></blockquote><blockquote><p>草坪示例：在菜单中选中散布，拾取画好的圆锥，通过散布，达到如图效果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF29.png" alt="三维建模技术29"></p><blockquote><p>山地，顾名思义，就是绘制山体呗</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF31.png" alt="三维建模技术31" style="zoom:67%;" /></blockquote><blockquote><p>山体示例：</p><ol><li>在俯视图中利用直线(平滑)，绘制等差线得到图一</li><li>在俯视图中从外向内选取紫色线条，在前视图中按住<kbd>ALT</kbd>向上拖动。同理选取最内侧图形重复操作，得到图二</li><li>选中最外侧的线条，点击地形，利用拾取运算对象，依次从外向内选取</li><li>在海拔上色中点击创建默认值，即可得到下图效果</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF30.png" alt="三维建模技术30"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF32.png" alt="三维建模技术32"></p><h1 align="center">🌴 2022.3.28 早十</h1><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><h2 id="4-1-修改器建模综述"><a href="#4-1-修改器建模综述" class="headerlink" title="4.1 修改器建模综述"></a>4.1 修改器建模综述</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    修改--&gt;标准基本体;</span><br><span class="line">    修改--&gt;扩展基本体;</span><br><span class="line">    修改--&gt;二维图形;</span><br></pre></td></tr></table></figure><h2 id="4-2-修改器命令面板"><a href="#4-2-修改器命令面板" class="headerlink" title="4.2 修改器命令面板"></a>4.2 修改器命令面板</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF47.png" alt="三维建模技术47"></p><blockquote><p>1.锁定堆栈工具(例如画了两个长方体，如果对其中一个锁定，修改面板就不能修改另一个的参数，所以一般不用)</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF49.gif" alt="三维建模技术49" style="zoom:50%;" /><blockquote><p>2.显示最终结果开&#x2F;关切换(默认是开启的，例如画了一个长方体，对它进行了其它参数修改，如果最终结果设置为关，那么就不会显示修改的结果)</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF50.gif" alt="三维建模技术50" style="zoom:50%;" /><blockquote><p>3.使唯一(前面学习了复制时选择实例，如果取消<strong>使唯一</strong>，则修改一个另一个不会有影响)</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF51.gif" alt="三维建模技术51" style="zoom:50%;" /><blockquote><p>4.从堆栈中删除修改器(即取消修改)</p></blockquote><blockquote><p>5.配置修改器集(自定义修改器列表)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF48.png" alt="三维建模技术48"></p><h2 id="4-3-二维图形编辑修改器"><a href="#4-3-二维图形编辑修改器" class="headerlink" title="4.3 二维图形编辑修改器"></a>4.3 二维图形编辑修改器</h2><blockquote><p>在4.2的修改器面板里，主要有挤出、倒角和车削等修改器，它们都是作用于<strong>二维对象</strong>，通过对其进行转换为三维模型</p><ul><li><strong>挤出:<strong>是以</strong>封闭</strong>的二维图形为截面，沿垂直方向挤出，生成形状相同、但厚度可调的三维模型(类似solidworks的拉伸，即把一个二维图形拉伸成三维图形)</li><li><strong>倒角:</strong> 可对二维图形挤出，同时在边界上加入方形或圆形倒角。一般用来制作立体文字和LoGo标志(与solidworks的倒角相同，把轮廓转换为直角)</li><li><strong>车削:</strong> 就是先画物体侧面轮廓，只画一半轮廓，再绕着一根中心轴旋转而成(类似solidworks的旋转，效果相同)</li></ul><p>【注意】挤出过的物体是不会有倒角的，成型工具(如挤出、车削、倒角），因为它们都已经成三维物体了，所以只能用一次</p></blockquote><h3>🚀 挤出</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF52.png" alt="三维建模技术52"></p><h3>🚀 车削</h3><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF53.png" alt="三维建模技术53" style="zoom: 67%;" /><h2 id="4-4-三维图形编辑修改器"><a href="#4-4-三维图形编辑修改器" class="headerlink" title="4.4 三维图形编辑修改器"></a>4.4 三维图形编辑修改器</h2><h3 id="4-4-1弯曲修改器"><a href="#4-4-1弯曲修改器" class="headerlink" title="4.4.1弯曲修改器"></a>4.4.1弯曲修改器</h3><blockquote><p><strong>弯曲(bend):</strong> 将三维物体弯曲一下</p><p><strong>注意:</strong> 弯曲的时候必须要用段数，段数是物体要增加细节的时候才使用的</p></blockquote><blockquote><p>相同角度，不同段数效果示例(Bend中的限制效果指弯曲作用的起止点，默认全部)</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF54.gif" alt="三维建模技术54" style="zoom:50%;" /><h3 id="4-4-2锥化修改器"><a href="#4-4-2锥化修改器" class="headerlink" title="4.4.2锥化修改器"></a>4.4.2锥化修改器</h3><blockquote><p><strong>锥化(taper) :</strong> 把一个物体变成锥形</p><p>锥化修改器的作用是对物体轮廓建模进行锥化修改。可以在创建的基础建模上加入锥化修改器，使物体产生新的建模</p></blockquote><blockquote><p>示例</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF55.gif" alt="三维建模技术55" style="zoom:50%;" /><h3 id="4-4-3扭曲修改器"><a href="#4-4-3扭曲修改器" class="headerlink" title="4.4.3扭曲修改器"></a>4.4.3扭曲修改器</h3><blockquote><p><strong>扭曲(twist):</strong> 把物体进行扭曲</p><p>利用扭曲修改器可以使物体沿任意轴位进行扭曲变形</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF56.gif" alt="三维建模技术56" style="zoom: 50%;" /><h3 id="4-4-4-FFD修改器-自由变形"><a href="#4-4-4-FFD修改器-自由变形" class="headerlink" title="4.4.4 FFD修改器(自由变形)"></a>4.4.4 FFD修改器(自由变形)</h3><blockquote><p>FFD修改器用于<strong>修改对象的外形</strong>。就是在模型的外轮廓上加入一些控制点。控制点的移动就会影响模型的形状</p><p>FFD修改器有FFD2<em>2</em>2、FFD3<em>3</em>3、FFD4<em>4</em>4。这里的2、3、4分别代表了它在长、宽、高控制点的数量，2<em>2</em>2就代表了X、Y、Z轴都是两个控制点，3<em>3</em>3就代表了X、Y、Z轴都是三个控制点，以此类推，FFD除了这个之外，还有FFD的长方体、FFD圆柱形。其实就是说我们可以来设定它在X、Y、Z轴控制点的数量。所以说它是一个特别人性化的变形修改工具</p></blockquote><blockquote><p>苹果示例：先画出主体，并使用修改器调整，做出凹槽。再使用锥化，调整</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF57.gif" alt="三维建模技术57" style="zoom:50%;" /><blockquote><p>利用弯曲和锥化，做苹果的柄</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF58.gif" alt="三维建模技术58" style="zoom:50%;" /><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><h2 id="5-1-世界空间修改器概述"><a href="#5-1-世界空间修改器概述" class="headerlink" title="5.1 世界空间修改器概述"></a>5.1 世界空间修改器概述</h2><blockquote><p>世界空间修改器所产生的效果<strong>作用世界空间而不是对象空间</strong>(即:对象空间修改器直接影响对象空间中的几何体;而世界空间修改器类似于空间扭曲绑定到对象上,不随对象本身坐标的改变而改变)</p><p>世界空间修改器的使用方法和对象空间修改器一样，在修改器列表中世界空间修改器是用<strong>星号或修改器名称旁边的“(WSM)’</strong>文本表示的</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF59.png" alt="三维建模技术59" style="zoom:60%;" /><h2 id="5-2-路径变形修改器"><a href="#5-2-路径变形修改器" class="headerlink" title="5.2 路径变形修改器"></a>5.2 路径变形修改器</h2><blockquote><p>可以根据<strong>二维样条线来变形对象</strong>，该修改器对于制作环绕的文字，或者沿路径生长的动画比较有帮助</p><p>参数卷展栏包含“路径变形”和“路径变形轴”两个选项组。其中:</p><ul><li>“路径变形”选项卡<ul><li>“百分比”参数表示根据路径长度的百分比,沿着Gizmo路径移动对象</li><li>“拉伸”参数以对象的轴点位中心进行缩放</li><li>“旋转”参数可以沿着路径旋转文字对象</li><li>“扭曲”参数可以使对象在围绕路径产生扭曲变形</li></ul></li><li>“路径变形轴”选项组主要用来控制路径以哪个轴向来产生变形效果</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF60.png" alt="三维建模技术60"></p><blockquote><p>示例</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF61.gif" alt="三维建模技术61" style="zoom:50%;" /><h2 id="5-2-毛发修改器"><a href="#5-2-毛发修改器" class="headerlink" title="5.2 毛发修改器"></a>5.2 毛发修改器</h2><blockquote><p>Hair and Fur(毛发)修改器可以在对象表面生成毛发效果，可以模拟人的头发或者动物的毛发，以及毛毯等多种效果</p></blockquote><blockquote><p>示例：这里是利用导向，对皮毛进行梳理、修建。也可以直接选择某些面来保留毛发</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF62.gif" alt="三维建模技术62" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF63.gif" alt="三维建模技术63" style="zoom:50%;" /><h1 align="center">🌴 2022.04.04 早十</h1><h1 id="6-可编辑多边形-高级建模"><a href="#6-可编辑多边形-高级建模" class="headerlink" title="6 可编辑多边形(高级建模)"></a>6 可编辑多边形(高级建模)</h1><blockquote><p>高级建模适合那些<strong>不能被拆分</strong>的物体，尤其是一些生物或是曲面物体</p><p>高级建模的工作流程是:</p><ol><li>创建基础模型(基本形体、大型正确)</li><li>是编辑模型(细分模型、加工造型)</li><li>是网格平滑（进一步自动细分)</li></ol></blockquote><p>高级建模的主要工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">编辑网格--&gt;加工工具细分</span><br><span class="line">编辑多边形--&gt;加工工具细分</span><br><span class="line">网格平滑--&gt;A[&quot;平滑工具(平滑多边形)&quot;]</span><br></pre></td></tr></table></figure><h3>🚀 概述编辑多边形建模</h3><h4>🚁 多边形建模的基本原理</h4><blockquote><p>点构成边，边构成面，面构成多边形，多边形构成三维模型<br>编辑多边形是高级建模的<strong>核心</strong>。编辑多边形能将多边形或三维模型编辑成我们想要的任何形状<br>编辑多边形有很多针对顶点、边和多边形的命令。如:挤出、倒角、插入和分离</p></blockquote><h4>🚁 创建可编辑多边形的方法</h4><blockquote><ul><li>右击转换为可编辑多边形</li><li>修改器列表中选择可编辑多边形</li></ul><p>右击转换的不能删除，修改器列表可以对编辑删除</p></blockquote><h2 id="6-1-多边形的子对象介绍"><a href="#6-1-多边形的子对象介绍" class="headerlink" title="6.1 多边形的子对象介绍"></a>6.1 多边形的子对象介绍</h2><blockquote><p>编辑多边形（(editpoly)有5个子对象（子层级)∶<br><strong>顶点、边、边界（也叫封套)、多边形和元素(也叫三维模型）</strong>，快捷键分别是1、2、3、4、5</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF64.png" alt="三维建模技术64"></p><h3 id="6-2-1-顶点对象"><a href="#6-2-1-顶点对象" class="headerlink" title="6.2.1 顶点对象"></a>6.2.1 顶点对象</h3><blockquote><p>“编辑顶点”卷展栏包含用于编辑顶点的命令。主要包括:</p><ul><li><p><strong>移除:</strong> 可删除选择的顶点，并接合使用它们的多边形<br>如果选择顶点,按下Delete键删除顶点,在网格中会创建一个或多个洞;而”移除”顶点时不会创建孔洞</p></li><li><p><strong>断开:</strong> 在选定顶点相连的每个多边形上创建一个新顶点，使多边形的转角相互分开，使它们不再相连于原来的顶点上</p></li><li><p><strong>挤出:<strong>选择顶点后</strong>垂直拖动</strong>，就可以挤出此顶点</p></li><li><p><strong>焊接:</strong> 对指定的阈值范围内选定的连续顶点进行合并。使用”焊接′前，要设置”焊接阈值”,<br>[提示]如果几何体区域有很多非常接近的顶点，可使用焊接进行自动简化;要焊接相对较远的顶点，则使用”目标焊接””</p></li><li><p><strong>目标焊接:</strong> 可以选择一个顶点，并将它焊接到相邻目标顶点</p></li><li><p><strong>切角:</strong> 选择并拖动顶点，在该顶点处生成切角。</p></li><li><p>移除孤立顶点:移除没有面和边的点</p></li></ul></blockquote><h4>🚀 移除</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF65.png" alt="三维建模技术65"></p><h4>🚀 断开</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF66.gif" alt="三维建模技术66"></p><h4>🚀 挤出</h4><blockquote><p>点击加号可以多次叠加(多了电脑会卡)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF68.gif" alt="三维建模技术68"></p><h4>🚀 焊接</h4><blockquote><p>焊接可以通过旁边的长方形设置参数</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF70.gif" alt="三维建模技术70"></p><h4>🚀 目标焊接</h4><blockquote><p>目标焊接通过鼠标拉线</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF71.gif" alt="三维建模技术71"></p><h4>🚀 切角</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF69.png" alt="三维建模技术69"></p><h4>🚀 移除孤立点</h4><blockquote><p>建模过程中移除多余的点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF67.gif" alt="三维建模技术67"></p><h3 id="6-2-2-边对象"><a href="#6-2-2-边对象" class="headerlink" title="6.2.2 边对象"></a>6.2.2 边对象</h3><blockquote><p>边对象中移除，挤出，焊接，切角，目标焊接与点类似，单独看一下<strong>连接</strong></p></blockquote><h4>🚀 连接</h4><blockquote><p>通过边细分更多的面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF72.gif" alt="三维建模技术72"></p><h3 id="6-2-3-边界对象"><a href="#6-2-3-边界对象" class="headerlink" title="6.2.3 边界对象"></a>6.2.3 边界对象</h3><blockquote><p>边界是指<strong>面的边缘</strong></p><p>例如：球体没有边界，所以先Delete一部分，出现空洞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF73.gif" alt="三维建模技术73"></p><h3 id="6-2-4-多边形对象"><a href="#6-2-4-多边形对象" class="headerlink" title="6.2.4 多边形对象"></a>6.2.4 多边形对象</h3><blockquote><ul><li><strong>挤出:</strong> 单击”挤出”，垂直拖动多边形</li><li><strong>轮廓:</strong>“轮廓”命令用于增加或减小每组连续的选定多边形的外边。(即:原地变大变小)<br>执行”挤出”或”倒角”操作后，通常可以使用”轮廓”调整挤出面的大小</li><li><strong>倒角:</strong> 单击”倒角”，然后垂直拖动多边形，将其挤出。释放鼠标按钮，然后垂直拖动鼠标光标，设置挤出轮廓。单击以完成设置。也可单击”轮廓”按钮右侧的”设置”按纽，在视图中设置”高度”和命令值<br>“倒角”命令&#x3D;”挤出”命令＋”轮廓”命令</li><li><strong>插入:</strong> 选择多边形，单击”插入”命令,垂直拖动多边形，插入多边形</li><li><strong>桥:</strong> 使用”桥”命令可连接对象的两个选定多边形</li><li><strong>从边旋转:</strong> 使”从边旋转”命令可沿指定的边旋转选定的多边形</li><li><strong>沿样条线挤出:</strong> 使用”沿样条线挤出”命令可沿样条线挤出当前选定的多边形</li></ul></blockquote><h4>🚀 插入顶点 挤出 轮廓 倒角</h4><blockquote><p>倒角相当于挤出+轮廓</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF74.gif" alt="三维建模技术74"></p><h4>🚀 桥</h4><blockquote><p>连接两个平面</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF75.gif" alt="三维建模技术75"></p><h4>🚀 从边旋转</h4><blockquote><p>面绕选定边旋转</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF76.gif" alt="三维建模技术76"></p><h4>🚀 沿样条线挤出</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF77.gif" alt="三维建模技术77"></p><h4>🚀 塌陷</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF78.gif" alt="三维建模技术78"></p><h4>🚀 平面化</h4><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF79.gif" alt="三维建模技术79"></p><h3 id="6-2-4-元素对象"><a href="#6-2-4-元素对象" class="headerlink" title="6.2.4 元素对象"></a>6.2.4 元素对象</h3><blockquote><p>最常用的是来设置物体的材质ID号。用法是场景中有多个面</p></blockquote><p>以茶壶为例，一般修改颜色会将整个颜色都改变</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF80.gif" alt="三维建模技术80"></p><h2 id="6-3-编辑网格"><a href="#6-3-编辑网格" class="headerlink" title="6.3 编辑网格"></a>6.3 编辑网格</h2><blockquote><p>编辑网格约等于编辑多边形，它属于max早期版本的一个唯一的编辑命令<br>编辑网格中有一些命令是编辑多边形所没有的。主要包含:</p><ul><li>在“面”的级别的炸开命令，可以把一个面炸成很多碎的表面。这是编辑网格所独有</li><li>在“边”的级别，我们可以把边变为可见或者不可见，这也是只有编辑网格才有的</li></ul><p>所以我们在制作的时候，如果发现有一些命令在编辑多边形里面没有，我们可以用编辑网格来补充它</p></blockquote><h4>🚀 炸开</h4><blockquote><p>可以单独对每一个面移动</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF81.gif" alt="三维建模技术81"></p><h4>🚀 可见</h4><blockquote><p>三维图形面的最小单位时三角形而不是四边形，可以通过可见属性设置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF82.png" alt="三维建模技术82"></p><h2 id="6-4-多边形细分"><a href="#6-4-多边形细分" class="headerlink" title="6.4 多边形细分"></a>6.4 多边形细分</h2><h4>🚀 细分原理</h4><blockquote><p>细分表面是多边形建模光滑模型的一套模型精度增加的解决方案，采用网格平滑的方式，对低精度模型进行平滑细分</p></blockquote><h4>🚀 细分方法</h4><blockquote><ol><li><strong>细分曲面:</strong> 是可编辑多边形自带的圆滑方式</li><li><strong>网格平滑:</strong> 是max早期版本的细分解决方案</li><li><strong>涡轮平滑</strong>:max7版本后增加的细分解决方案。它与网格平滑的相比，运用了提高性能的极端优化平滑算法。在相同模型相同设置的情况下，运算速度要快于网格平滑算法</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF83.png" alt="三维建模技术83"></p><blockquote><p>什么是迭代次数？</p><p>设置为0时，不进行平滑计算<br>设置为1，指的是平滑一次。意思是每条边之间切割开<br>设置为2，指的是平滑二次。意思是每条边之间再次切割开<br>即每平滑一次，就比上一次的面数要增加4倍。所以一般我们的迭代次数不超过2次(显卡燃烧！)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF84.png" alt="三维建模技术84"></p><blockquote><p>可以在顶点下通过设置”控制级别”显示顶点，方便之后对点和面二次编辑</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF85.gif" alt="三维建模技术85"></p><h1 align="center">🌴 2022.4.25 早十</h1><h1 id="7-材质和贴图"><a href="#7-材质和贴图" class="headerlink" title="7 材质和贴图"></a>7 材质和贴图</h1><h2 id="7-1-材质基础"><a href="#7-1-材质基础" class="headerlink" title="7.1 材质基础"></a>7.1 材质基础</h2><h3 id="7-1-1-材质的基本原理"><a href="#7-1-1-材质的基本原理" class="headerlink" title="7.1.1 材质的基本原理"></a>7.1.1 材质的基本原理</h3><blockquote><p>材质是指<strong>物体表面的特性</strong>（如：玻璃、布料、皮革等）。材质反应的是物体表面的质感，如对象表面的反光程度、调整对象的光亮度、控制对象表面的凹凸效果等</p><p>贴图是<strong>材质的一种图像属性</strong>，贴图图像一般是标准的位图文件，如*.jpg*.tif*.tga等。贴图服务于材质，为材质提供可视化的图像信息，如右图所示，两个对象同样是大理石材质，但表面可以贴上不同的贴图，显示不同的花纹</p><p>一种物体可以赋予一种或多种贴图图像,并且这些贴图图像都通过通道来实现。3dsMax的材质编辑器中有<strong>12种贴图通道,<strong>每个贴图通道分别由</strong>颜色、亮度、贴图</strong>加载按钮3部分组成</p><p>材质与贴图的区别在于:材质是渗透到三维对象内部的一种效果;而大多数贴图是二维图像,可以包裹在物体表面。材质中可以包含贴图,也可以不包含贴图,而贴图一般可以由几种材质组成,在材质编辑器的样本槽中出现的材质和贴图被显示为二维图像。贴图是材质的一种图像属性</p></blockquote><h3 id="7-1-2-材质编辑器"><a href="#7-1-2-材质编辑器" class="headerlink" title="7.1.2 材质编辑器"></a>7.1.2 材质编辑器</h3><blockquote><p> 在3ds Max中,材质编辑器是用户编辑修改材质的工具,场景中的所有材质和贴图都在这里编辑生成</p><p> 打开材质编辑器：<br> 1.菜单操作“渲染”→“材质编辑器”<br> 2.工具栏上的材质编辑器按钮<img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF110.png" alt="三维建模技术110"><br> 3.快捷键M</p><p> 3ds Max提供了两种材质编辑器，一种是精简材质编辑器,另一种是平板材质编辑器</p></blockquote><h3>🚀 精简材质编辑器</h3><blockquote><p>默认情况下只有6个示例球。要显示多个示例球,可以在示例球上右击,在弹出的快捷菜单中选择<strong>“5×3示例窗”或者“6×4示例窗”</strong>命令,即可调节示例窗显示的材质示例球数量</p></blockquote><h3>🚀 平板材质编辑器</h3><blockquote><p>也叫板岩材质编辑器,它使用节点、列表和关联的方法将材质显示在活动视图中,使材质的编辑变得更为简便和直观</p><p>平板材质编辑器窗口包含菜单栏、工具栏、材质&#x2F;贴图浏览器、状态栏、活动视图、视图导航、参数编辑器、导航器</p></blockquote><blockquote><p>(1)材质&#x2F;贴图浏览器。要编辑材质,可将其从材质&#x2F;贴图浏览器拖到视图中。要创建新的材质或贴图,可将其从“材质”组或“贴图”组中拖出。也可以双击材质&#x2F;贴图浏览器中的材质或贴图,将其添加到活动视图中</p><p>(2)活动视图。在活动视图中,可以通过将贴图或控制器与材质组件关联来构造材质树。可以为场景中的材质创建一些视图,并从中选择活动视图</p><p>(3)参数编辑器。在参数编辑器中,可以调整贴图和材质的详细设置</p><p>(4）工具栏</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF111.png" alt="三维建模技术111"></p><h2 id="7-2-标准材质"><a href="#7-2-标准材质" class="headerlink" title="7.2 标准材质"></a>7.2 标准材质</h2><h3 id="7-2-1-Blinn基本参数"><a href="#7-2-1-Blinn基本参数" class="headerlink" title="7.2.1 Blinn基本参数"></a>7.2.1 Blinn基本参数</h3><blockquote><p>分为4个区域,分别是颜色控制区、高光控制区、自发光控制区、透明度控制区</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF112.png" alt="三维建模技术112"></p><p>颜色控制区:场景中物体的颜色不仅取决于物体本身的颜色,还有环境光颜色、漫反射光颜色、高光颜色、发光度颜色(自发治)、滤光颜色(扩展参数)等因素</p><ul><li>环境光:物体受光照时,材质阴影部分的颜色</li><li>漫反射:材质的基调色</li><li>高光反射:材质高光部分的颜色</li></ul><p>高光控制区:场景中的物体受到光的照射时,受光的一面较亮,背光的一面较暗。物体的受光区可以分为高光区、阴影区、漫反射区、环境光区</p><ul><li>高光级别:调节高光反射的光亮度</li><li>光泽度:控制高光的范围</li><li>柔化:降低高光强度或增加高光区域来减弱高光</li></ul><p>自发光控制区:有些材质会自发光,可以调整自发光颜色。例如灯,就可以设置灯能够自发光,并设置自发光的颜色</p><ul><li>自发光:使材质产生一种白炽灯的发光效果</li></ul><p>透明度控制区:不透明度是指物体阻挡光线穿透的程度,通常以百分数来衡量。若不透明度为0,则物体完全透明;若不透明度为100,则物体不允许任何光线透过。透明度与不透明度正好相反,是指物体允许光线穿透的程度。一般情况下使用不透明度来代替透明度</p><ul><li>不透明度:控制物体的透明效果。</li></ul><h3 id="7-2-2-明暗器基本参数"><a href="#7-2-2-明暗器基本参数" class="headerlink" title="7.2.2 明暗器基本参数"></a>7.2.2 明暗器基本参数</h3><blockquote><p> Max中包含8种明暗器模式，能够设置各种复杂质感的材质</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF113.png" alt="三维建模技术113"></p><ul><li>线框:将材质显示为线框形态</li><li>双面:对材质进行双面渲染，双面渲染是指当材质透明时可以显示背面</li><li>面贴图:材质将贴到物体的每一个面</li><li>面状:使面棱角化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF114.png" alt="三维建模技术114"></p><h3 id="7-2-3-各向异性明暗器"><a href="#7-2-3-各向异性明暗器" class="headerlink" title="7.2.3 各向异性明暗器"></a>7.2.3 各向异性明暗器</h3><h4> 🚀 各向异性明暗器</h4><blockquote><p>各向异性(Anisotropic)明暗器使<strong>模型表面产生长条高光区</strong>,适合模拟高反差表面物体及流线型表面物体,如<strong>头发、玻璃、工业造型及汽车外壳</strong>等</p></blockquote><ul><li>高光级别：调节高光反射的光亮度</li><li>光泽度：控制高光的范围</li><li>各向异性：控制高光模式为圆形或是椭圆形</li><li>方向：控制高光部分的受光角度</li></ul><h4> 🚀 Blinn明暗器</h4><blockquote><p>Blinn明暗器是系统默认的高光模式,可以<strong>使模型表面反光比较柔和</strong>,适合模拟光线柔软、质感坚硬的物体,如<strong>塑料、瓷砖、橡皮</strong>等,它的高光是圆面光滑的,当加大“柔化”参数值时,高光是尖锐的。它的反光也是圆形的。这种材质较适合表现冷色的坚硬材质</p></blockquote><h4>🚀 金属明暗器</h4><blockquote><p>金属(Metal)明暗器<strong>使模型表面的高光更加尖锐</strong>,适合<strong>模拟金属材质</strong>。它提供了金属所具有的强烈反光</p></blockquote><h4>🚀 多层明暗器</h4><blockquote><p>多层(multi-layer)明暗器组合了<strong>两层 Anisotropic(非圆形高光),每一层都可以拥有不同的颜色和角度,适用于表现明亮的表面特殊效果</strong>,例如<strong>丝绸和油漆</strong>等。其中粗糙度值为0时,与使用Blinn明暗器效果一样,不同的是多层明暗器有两层高光,有不同的参数控制区,可模拟不同方向的反射</p></blockquote><h4>🚀 Oren-Nayar-Blinn明暗器</h4><blockquote><p>Oren-Nayar-Blinn明暗器<strong>是基于Blinn明暗器的更高级的明暗器,是Blinn明暗器的变种,看起来更柔和,更适合产生较为粗糙的效果</strong>。它多用于表现纺织品的质感,通常也可以用于模拟<strong>陶器、土坯和人的皮肤</strong>等的效果</p></blockquote><h4>🚀 Phong明暗器</h4><blockquote><p>Phong材质常用于<strong>表现玻璃制品、塑料等非常光滑的表面</strong>,它所呈现的反光是柔和的,这一点与Blinn的圆形高光不同。Blinn明暗器是比Phong明暗器更高级的明暗器。Phong材质的高光是发散的,反光呈梭形,且影响范围大,更<strong>适合表现暖色,柔和的材质</strong></p></blockquote><h4>🚀 Strauss明暗器</h4><blockquote><p>Strauss明暗器也用于金属材质,它是金属明暗器的简化版,参数较少。但它<strong>比金属明暗器产生的金属质感要好,制作的材质比较逼真</strong>。它不能调整自发光。Strauss明暗器同金属明暗器一样用于表现金属质感,但更适合表现暗金属效果</p></blockquote><h4>🚀 半透明明暗器</h4><blockquote><p>半透明明暗器专用于<strong>表现半透明的物体表面</strong>,例如<strong>蜡烛、玉饰品、彩绘玻璃</strong>等。其参数如图所示</p></blockquote><h2 id="7-3-贴图及贴图坐标"><a href="#7-3-贴图及贴图坐标" class="headerlink" title="7.3 贴图及贴图坐标"></a>7.3 贴图及贴图坐标</h2><blockquote><p>贴图原理：<strong>在材质表面包裹一层真实的纹理</strong>。将材质指定给对象后，对象表面将显示纹理并且被渲染。还可以通过贴图的明度变化模拟出对象的凹凸效果、反射效果、折射效果</p><p>贴图的作用：用于模拟对象表面的真实纹理效果。贴图可以在合理的材质物理属性上增加外观的真实感，还可以使用贴图创建环境或者创建灯光投射</p><p><strong>在设置材质时，只有与材质相符合的表面纹理，才能得到更加逼真的材质效果</strong>。表面纹理贴图是使用最多的一种贴图类型，代表物体表面的颜色和纹理，例如布料的纹理、大理石的纹理是不一样的，就需要使用不同的贴图来表现</p></blockquote><h3 id="7-3-1-贴图类型"><a href="#7-3-1-贴图类型" class="headerlink" title="7.3.1 贴图类型"></a>7.3.1 贴图类型</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF116.png" alt="三维建模技术116"></p><h4>🚀 位图贴图</h4><blockquote><p>在标准材质中，一些参数的后面都有一个按钮，是对应参数的贴图通道</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF115.png" alt="三维建模技术115"></p><h4>🚀 2D贴图</h4><blockquote><p>2D贴图：没有深度的二维图像，可以包裹在物体表面上，也可以作为场景背景的环境贴图，2D贴图包括平铺贴图、棋盘格贴图、旋涡贴图、渐变贴图、渐变坡度贴图</p><p>注意：为材质添加2D贴图时,默认的贴图设置往往不能达到纹理要求的效果,通常要通过调整贴图坐标来修改纹理的分布</p></blockquote><h4>🚀 3D贴图</h4><blockquote><p>3D贴图：3D贴图是通过数学算法在三维定义上创建的贴图。与2D贴图一样，3D贴图也提供了用于修改贴图位置、大小和角度的“坐标”卷展栏。与2D贴图不一样的是,3D贴图是在三维空间上调整位图。包括棋盘格、凹痕、衰减、大理石、噪波、粒子寿命、粒子运动模糊、随机大理石、行星、烟雾、斑点、木材等</p></blockquote><h4>🚀 复合贴图</h4><blockquote><p>复合贴图：由几个贴图混合而成</p></blockquote><h4>🚀 颜色修改器贴图</h4><blockquote><p>修改颜色</p></blockquote><h4>🚀 反射与折射贴图</h4><blockquote><p>反射与折射贴图：包括平面镜像、光线跟踪、反射&#x2F;折射、薄壁折射等</p></blockquote><h3 id="7-3-2-贴图坐标"><a href="#7-3-2-贴图坐标" class="headerlink" title="7.3.2 贴图坐标"></a>7.3.2 贴图坐标</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF117.png" alt="三维建模技术117"></p><blockquote><p>3ds Max中有两种用于贴图投影方式的修改器:<strong>UVW贴图</strong>和<strong>UVW展开</strong></p><p>在3ds Max中,世界坐标系和其中的对象都采用XYZ坐标表述,而贴图坐标采用UVW坐标表述,其目的是把贴图和几何空间分开。几何对象上的XYZ坐标指的是世界坐标或者对象自身空间的准确位置,贴图的UVW坐标表示贴图的比例,计算的是贴图的增量,不是外在的尺寸</p><p>在贴图坐标中,U、V、W分别与X、Y、Z平行。U相当于X;V相当于Y;W相当于Z,代表着与贴图的UV平面垂直的方向</p><p><strong>对于一个新添加或导入的对象</strong>,如果没有建立自己的贴图坐标,则创建贴图时可能会发生贴图错误或在渲染视图中不能显示的情况(渲染时显示“缺少UVW贴图”)。这时<strong>必须向对象指定“UVW贴图”修改器</strong>来解决问题</p></blockquote><h4>🚀 “UVW贴图”修改器</h4><blockquote><p>“UVW贴图”修改器可以在模型的表面指定贴图坐标,以确定如何使材质投射在对象表面</p></blockquote><h4>🚀 UVW贴图Gizmo</h4><blockquote><p>“UVW贴图”Gizmo将贴图坐标投影到对象上<br>可定位、旋转或缩放Gizmo以调整对象上的贴图坐标，还可以设置Gizmo的动画<br>对于平面、长方体、圆柱体和收缩包裹贴图,一条黄色短线指示贴图顶部。Gizmo的绿色边指示贴图右侧<br>在球形或圆柱形贴图上，绿色边是左右边的结合处。必须在修改器显示层次中选择Gizmo，才能显示Gizmo</p></blockquote><h4>🚀 贴图通道</h4><blockquote><p>通过将显示贴图通道指定给位图,可为使用多个位图的材质中的每个位图控制贴图坐标的类型和贴图Gizmo的置换。在“材质编辑器”中,为每个贴图指定不同的通道编号，然后将多个“UVW贴图”修改器添加到对象的修改器堆栈，每个“UVW贴图”修改器设置为不同贴图通道</p></blockquote><h2 id="7-4-实例"><a href="#7-4-实例" class="headerlink" title="7.4 实例"></a>7.4 实例</h2><blockquote><p>书的材质和贴图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF118.png" alt="三维建模技术118"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF119.gif" alt="三维建模技术119"></p><blockquote><p>UVW贴图Gizmo，有时候贴图效果可能不是我们想要的，比如下面这个屋顶，侧面贴图方向不对。利用修改器编辑多边形选中这个面，打开UVW贴图选中Gizmo，之后利用旋转，把贴图旋转到合适的位置就可以了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF/%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E6%8A%80%E6%9C%AF130.png" alt="三维建模技术130"></p>]]></content>
      
      
      <categories>
          
          <category> 三维建模技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3ds Max </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python上课笔记汇总</title>
      <link href="/posts/29786/"/>
      <url>/posts/29786/</url>
      
        <content type="html"><![CDATA[<h1 align="center">🌴 2022.4.1 作业</h1><h2>🚀 判断一个数是否是素数并输出</h2><blockquote><p>什么是素数？除了1和它本身能被其它数整除。1不属于素数，所以咱们就从2开始遍历</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;不是素数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,k):</span><br><span class="line">        <span class="keyword">if</span> num%j == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;不是素数&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;是素数&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下第五行，如果把这个数开根号，num&#x3D;a^2^,如果比a小的数都没被整除那他就是素数，就不需要考虑比a大的数了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;不是素数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    k=<span class="built_in">int</span>(math.sqrt(num)+<span class="number">1</span>)   <span class="comment">#因为这里用了强转，根号会取下界，所以加1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,k):</span><br><span class="line">        <span class="keyword">if</span> num%j == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;不是素数&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;是素数&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入一个数20</span></span><br><span class="line"><span class="string">不是素数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2>🚀 输入两个正整数，找出最大公约数并输出</h2><blockquote><p>找最大公约数有很多算法</p><p>穷举法：num1&gt;num2。从num2开始遍历，与num1和num2做除法每次-1，直到num1和num2都可以整除</p><p>更相减损法：</p><ol><li><p>任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步</p></li><li><p>以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止</p></li></ol><p>则第一步中约掉的若干个2的积与第二步中等数的乘积就是所求的最大公约数</p><p>辗转相除法：用较小数除较大数，再用出现的余数（第一余数）去除除数，如此反复，直到最后余数是0为止</p><p>辗转相除法程序运行时间最短，所以这里就以辗转相除法为例子，另外两种也很容易实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    id1[&quot;num1%num2==0&quot;]--&gt;|Yes| 最大公约数是num2;</span><br><span class="line">    id1[&quot;num1%num2==0&quot;]--&gt;|No| id2[&quot;num3=num1%num2&quot;];</span><br><span class="line">    id2--&gt;id3[&quot;num1=num2,num2=num3&quot;]</span><br><span class="line">    id3--&gt;id1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数&quot;</span>))</span><br><span class="line">num2=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数&quot;</span>))</span><br><span class="line"><span class="comment">#判断大小</span></span><br><span class="line"><span class="keyword">if</span> num2&gt;num1:</span><br><span class="line">    num1=num2</span><br><span class="line">    num2=num1</span><br><span class="line"><span class="keyword">if</span> num1%num2==<span class="number">0</span>:</span><br><span class="line">    num3 = num2</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d和%d的最大公约数是%d&quot;</span>%(num1, num2,num3))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> num1%num2 != <span class="number">0</span>:</span><br><span class="line">        num3 = num1%num2</span><br><span class="line">        num1 = num2</span><br><span class="line">        num2 = num3</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d和%d的最大公约数是%d&quot;</span>%(num1, num2, num3))</span><br></pre></td></tr></table></figure><h2>🚀 计算Π/4</h2><blockquote><p>计算出Π的近似值︰$\frac{Π}{4}$≈1-1&#x2F;3+1&#x2F;5-1&#x2F;7+1&#x2F;9-……(计算到最后一项的值小于10-6为止)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="number">1</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span>/num&gt;<span class="number">0.0000001</span>:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + (<span class="number">1</span>/num)*i</span><br><span class="line">        num = num + <span class="number">2</span></span><br><span class="line">        i = i*-<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Π/4=&quot;</span>, <span class="built_in">sum</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Π/4= 0.7853981133974449</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2>🚀 打印九九乘法表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 * 1 = 1</span><br><span class="line">1 * 2 = 22 * 2 = 4</span><br><span class="line">1 * 3 = 32 * 3 = 63 * 3 = 9</span><br><span class="line">1 * 4 = 42 * 4 = 83 * 4 = 124 * 4 = 16</span><br><span class="line">1 * 5 = 52 * 5 = 103 * 5 = 154 * 5 = 205 * 5 = 25</span><br><span class="line">1 * 6 = 62 * 6 = 123 * 6 = 184 * 6 = 245 * 6 = 306 * 6 = 36</span><br><span class="line">1 * 7 = 72 * 7 = 143 * 7 = 214 * 7 = 285 * 7 = 356 * 7 = 427 * 7 = 49</span><br><span class="line">1 * 8 = 82 * 8 = 163 * 8 = 244 * 8 = 325 * 8 = 406 * 8 = 487 * 8 = 568 * 8 = 64</span><br><span class="line">1 * 9 = 92 * 9 = 183 * 9 = 274 * 9 = 365 * 9 = 456 * 9 = 547 * 9 = 638 * 9 = 729 * 9 = 81</span><br></pre></td></tr></table></figure><blockquote><p>首先看下乘法表，有什么规律？公式<code>j*i</code>，利用公式反推原理，公式中的j就可以代表列数，公式里的i可以代表行数。所以用两个for嵌套一下</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(j,<span class="string">&quot;*&quot;</span>,i,<span class="string">&quot;=&quot;</span>,j*i,end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2>🚀 水仙花数</h2><blockquote><p>水仙花数为一个三位数,并且每一位上的数字的立方和等于该数。求所有三位数的水仙花数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    a = i//<span class="number">100</span>%<span class="number">10</span>     <span class="comment"># 计算百位数字</span></span><br><span class="line">    b = i//<span class="number">10</span>%<span class="number">10</span>      <span class="comment"># 计算十位数字</span></span><br><span class="line">    c = i%<span class="number">10</span>          <span class="comment"># 计算个位数字</span></span><br><span class="line">    <span class="keyword">if</span> a*a*a+b*b*b+c*c*c==i:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h2>🚀 完全数</h2><blockquote><p>找出100以内的完全数(比如6&#x3D;1+2+3，6就是一个完全数，一个数刚好等于它的因子和)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i%j==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span>=<span class="built_in">sum</span>+j</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>==i:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h2>🚀 小结</h2><blockquote><p>这六个题，没什么太难的地方，主要就是考虑逻辑，学过其它语言的伙伴应该也见过这些例题，初学的小伙伴看不懂前两个题的优化也没关系，多敲多练！</p></blockquote><h1 align="center">🌴 2022.3.2 下午</h1><h1 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-Python简介"><a href="#1-1-1-Python简介" class="headerlink" title="1.1.1 Python简介"></a>1.1.1 Python简介</h3><blockquote><p>发音：英[ˈpaiθən]，美[ˈpaiθaːn]  </p><p>结合了<strong>解释性、编译性、互动性和面向对象</strong>的脚本语言</p><p>支持<strong>命令式编程、函数式编程和面向对象</strong>程序设计</p><p>由荷兰人Guido van Rossum于1989年发明，第一个公开版本发行于1991年</p><p>已经成为最受欢迎的程序设计语言之一</p><p>自2004年以后，Python的使用率呈线性增长</p><p>2011年1月，Python被TIOBE编程语言排行榜评为2010年度编程语言</p><p>2017年7月20日，IEEE spectrum发布了第四届顶级编程语言交互排行榜，Python高居首位</p></blockquote><blockquote><ul><li><p>具有<strong>简洁性、易读性和可扩展性</strong></p></li><li><p>在国外用Python做科学计算的研究机构日益增多</p></li><li><p>一些世界著名大学已经采用Python来教授程序设计课程，如卡耐基梅隆大学的编程基础、麻省理工学院的计算机科学及编程导论就使用Python讲授</p></li><li><p>众多开源的科学计算库都提供了Python的调用接口，如著名的<strong>计算机视觉库OpenCV</strong>、<strong>三维可视化库VTK</strong>、<strong>医学图像处理库ITK</strong>等</p></li><li><p>专用的<strong>第三方库也很多</strong>，如科学计算库NumPy、SciPy、Pandas分别提供了快速数组处理、科学计算和数据分析功能</p></li></ul></blockquote><h3 id="1-1-2-Python特点"><a href="#1-1-2-Python特点" class="headerlink" title="1.1.2 Python特点"></a>1.1.2 Python特点</h3><h4>🚀 Python的优势</h4><blockquote><ul><li>简单、易学</li><li>可移植性</li><li>解释性</li><li>面向对象</li><li>可扩展性和可嵌入性</li><li>丰富的库和模块</li></ul></blockquote><h4>🚀 Python的局限性</h4><blockquote><ul><li><p>不足和局限性。和C、C++等程序设计语言相比，Python程序<strong>运行速度较慢</strong></p></li><li><p>对于运行速度高的程序，可以将运行速度要求较高的部分使用C、C++等编写，再将其<strong>嵌入Python</strong>中，充分发挥不同语言的特长和优势</p></li><li><p>现在计算机硬件的配置不断提高，在大多数情况下，程序运行速度并不是考虑的首要问题</p></li></ul></blockquote><h3 id="1-1-3-Python应用"><a href="#1-1-3-Python应用" class="headerlink" title="1.1.3 Python应用"></a>1.1.3 Python应用</h3><blockquote><ul><li><p>常规软件开发</p></li><li><p>科学计算与数据分析</p></li><li><p>网络爬虫</p></li><li><p>Web应用开发</p></li><li><p>系统网络运维</p></li><li><p>人工智能与机器学习</p></li></ul></blockquote><h2 id="1-2-开发环境"><a href="#1-2-开发环境" class="headerlink" title="1.2 开发环境"></a>1.2 开发环境</h2><h3 id="1-2-1-Python版本"><a href="#1-2-1-Python版本" class="headerlink" title="1.2.1 Python版本"></a>1.2.1 Python版本</h3><blockquote><p>目前有两个不同序列的版本：<strong>Python 2.X</strong>和<strong>Python 3.X</strong></p></blockquote><p>两个序列的版本很多用法<strong>不兼容</strong>，内置函数和标准库模块用法也有较大的差别，适用于这两个版本的第三方库的差别更大，Python开发团队重申了<strong>终止对 Python 2.X的支持</strong>， 本书所有程序均基于Windows平台下的Python 3.X版本</p><h3 id="1-2-2-常用开发环境"><a href="#1-2-2-常用开发环境" class="headerlink" title="1.2.2 常用开发环境"></a>1.2.2 常用开发环境</h3><h4>🚀 常用</h4><blockquote><ul><li>Python自带的开发工具</li><li>PyCharm</li></ul></blockquote><h4>🚀 其它</h4><blockquote><ul><li><p>Anaconda3</p></li><li><p>Vim</p></li><li><p>Sublime Text</p></li><li><p>PythonWin</p></li></ul></blockquote><h3 id="1-2-3-Python下载和安装"><a href="#1-2-3-Python下载和安装" class="headerlink" title="1.2.3 Python下载和安装"></a>1.2.3 Python下载和安装</h3><h4>🚀 Python</h4><p><a href="https://www.python.org/downloads/windows/">Python 官网</a></p><blockquote><p>无脑安装,勾选<code>Add Python x.x To Path</code>,选择<code>Customize installation</code>自定义安装</p></blockquote><h4>🚀 安装测试</h4><p><code>win+R</code>输入<code>cmd</code>执行<code>python</code>测试环境.<code>exit</code>或<code>quit</code>退出环境</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\86158&gt;python</span><br><span class="line">Python 3.9.10 (tags/v3.9.10:f2f3f53, Jan 17 2022, 15:14:21) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-PyCharm下载和安装"><a href="#1-2-4-PyCharm下载和安装" class="headerlink" title="1.2.4 PyCharm下载和安装"></a>1.2.4 PyCharm下载和安装</h3><h4>🚀 PyCharm</h4><blockquote><p>由JetBrains公司打造的一款Python IDE。帮助用户开发时提高其效率的工具，如调试、语法高亮、Project管理、代码跳转等。提供了一些高级功能，以支持Django框架下的专业Web开发。有Professional和Community两种版本</p></blockquote><h4>🚀 PyCharm 下载</h4><p><a href="https://www.jetbrains.com/pycharm/download/previous.html">Pycharm官网</a>,官网试用三十天,小张是从<a href="https://pan.baidu.com/s/1RaZJicGGUhBFCEh1Jy12lw[%E6%8F%90%E5%8F%96%E7%A0%81]%EF%BC%9Aa66w">软件管家</a>下的,懂得都懂!</p><h3 id="1-2-5-第三方库安装"><a href="#1-2-5-第三方库安装" class="headerlink" title="1.2.5 第三方库安装"></a>1.2.5 第三方库安装</h3><blockquote><p>多种方法,三选一</p></blockquote><h4>🚀 使用pip命令直接安装NumPy</h4><p>  <code>win+R</code>输入<code>cmd</code>进入命令行界面，输入命令，安装NumPy。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install  numpy scipy matplotlib ipython jupyter pandas sympy nose -i https://pypi.douban.com/simple/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建议使用用户安装，将--user标志发送给pip。 pip为本地用户安装软件包，并且不写入系统目录</span></span><br></pre></td></tr></table></figure><h4>🚀 使用pip命令运行NumPy安装文件</h4><p><a href="https://pypi.org/project/numpy/#files">NumPy官网</a>,同理在<code>cmd</code>中，切到Numpy文件路径下,输入命令<code>pip install numpy-1.22.2-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl(自己的文件名字)</code>安装NumPy</p><h4>🚀 在PyCharm中下载安装NumPy</h4><p>打开<strong>PyCharm</strong>,<code>File→Settings→PyCharm Project→Python Interpreter</code>(<code>文件→设置→PyCharm Project→Python Interpreter</code>)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8001.png" alt="Python语言基础01"></p><h2 id="1-3-程序开发"><a href="#1-3-程序开发" class="headerlink" title="1.3 程序开发"></a>1.3 程序开发</h2><h3 id="1-3-1-程序运行方式"><a href="#1-3-1-程序运行方式" class="headerlink" title="1.3.1 程序运行方式"></a>1.3.1 程序运行方式</h3><h4>🚀 Python程序可以在交互模式和脚本模式下运行</h4><blockquote><ul><li><p><strong>交互模式运行</strong>。用于程序功能简单、代码较少的程序</p></li><li><p><strong>脚本模式运行</strong>。用于功能复杂、代码量较大的程序</p></li></ul></blockquote><h3 id="1-3-2-使用Python自带工具开发Python程序"><a href="#1-3-2-使用Python自带工具开发Python程序" class="headerlink" title="1.3.2 使用Python自带工具开发Python程序"></a>1.3.2 使用Python自带工具开发Python程序</h3><h4>🚀 两种方式</h4><blockquote><ul><li><p>Windows命令行方式</p></li><li><p>IDLE方式</p></li></ul></blockquote><h5>🚁 Windows命令行方式 交互模式</h5><p><code>win+R</code>输入<code>cmd</code>进入命令行界面，输入<code>python</code>,回车进入运行环境</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.19044.1526]</span><br><span class="line">(c) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\86158&gt;python</span><br><span class="line">Python 3.9.10 (tags/v3.9.10:f2f3f53, Jan 17 2022, 15:14:21) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">Hello World</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure><h5>🚁 Windows命令行方式 脚本模式</h5><p>使用记事本编写Python源文件,保存程序代码，文件名为<strong>hello.py</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#file: hello.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello,World!&#x27;</span>)                  <span class="comment">#输出Hello World!.</span></span><br></pre></td></tr></table></figure><p>  <code>win+R</code>输入<code>cmd</code>进入命令行界面，输入<code>python 文件路径路径\hello.py</code>,输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,World!</span><br></pre></td></tr></table></figure><h5>🚁 IDLE方式 交互模式</h5><blockquote><p>IDLE是Python内置的集成开发环境,由Python安装包提供，是Python自带的文本编辑器</p></blockquote><p><code>开始→Python x.x→IDLE</code>进入<code>Shell</code>开发环境</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Python 3.9.10 (tags/v3.9.10:f2f3f53, Jan 17 2022, 15:14:21) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license()&quot; for more information.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(<span class="string">&#x27;Hello,World!&#x27;</span>)</span></span><br><span class="line">Hello,World!</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><h5>🚁 IDLE方式 脚本模式</h5><p><code>开始→Python x.x→IDLE</code>进入<code>Shell</code>开发环境,<code>File→New File</code>打开空白源代码编辑窗口</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#file: hello.py</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;欢迎来到Python世界!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str:&#x27;</span>,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p><code>File→Save As</code>,选择保存源文件路径,输入名称<code>hello.py</code>单击<code>保存</code>,<code>Run→Run Module F5</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">3.9</span><span class="number">.10</span> (tags/v3<span class="number">.9</span><span class="number">.10</span>:f2f3f53, Jan <span class="number">17</span> <span class="number">2022</span>, <span class="number">15</span>:<span class="number">14</span>:<span class="number">21</span>) [MSC v<span class="number">.1929</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license()&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">=================== RESTART: C:/Users/<span class="number">86158</span>/Desktop/hello.py ===================</span><br><span class="line"><span class="built_in">str</span>: 欢迎来到Python世界!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-使用PyCharm开发Python程序"><a href="#1-3-3-使用PyCharm开发Python程序" class="headerlink" title="1.3.3 使用PyCharm开发Python程序"></a>1.3.3 使用PyCharm开发Python程序</h3><p><code>Create New Project→Pure Python</code>填写文件路径,右击新建的工程,<code>New→Python File</code>填写文件名字</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8002.png" alt="Python语言基础02"></p><p>编写代码,右击文件名点击运行即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#file: hello.py</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;欢迎来到Python世界!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;str:&#x27;</span>,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8003.png" alt="Python语言基础03" style="zoom: 33%;" /><h1 align="center">🌴 2022.3.5 下午</h1><h2 id="1-4-程序结构和编码规范"><a href="#1-4-程序结构和编码规范" class="headerlink" title="1.4 程序结构和编码规范"></a>1.4 程序结构和编码规范</h2><h3 id="1-4-1-文件类型"><a href="#1-4-1-文件类型" class="headerlink" title="1.4.1 文件类型"></a>1.4.1 文件类型</h3><blockquote><p>在Python中，常用的文件类型有3种:源代码文件、字节代码文件、优化代码文件</p></blockquote><h4>🚀 源代码文件</h4><ul><li>源代码文件</li><li>扩展名为.py</li><li>使用文本编辑器编辑</li></ul><h4>🚀 字节代码文件</h4><ul><li>扩展名为.pyc</li><li>由Python源代码文件编译而成的二进制文件</li><li>由Python加速执行，速度快，能够隐藏源代码</li><li>可以通过python.exe或脚本方式将Python源文件编译成Python字节代码文件</li></ul><h4>🚀 优化代码文件</h4><ul><li>优化编译后的文件</li><li>无法用文本编辑器进行编辑</li><li>一般用于嵌入式系统</li></ul><h3 id="1-4-2-代码结构"><a href="#1-4-2-代码结构" class="headerlink" title="1.4.2 代码结构"></a>1.4.2 代码结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math               </span><br><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    z = math.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))     </span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))     </span><br><span class="line">c = func(a,b)             </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)          </span><br></pre></td></tr></table></figure><blockquote><p>一个完整的Python程序一般包括如下部分：</p><ol><li>导入模块。代码第1行</li><li>定义函数。代码第2～5行</li><li>定义变量或常量。代码第7～9行</li><li>输入：代码第7～8行</li><li>处理：代码第9行</li><li>输出：代码第10行</li><li>注释：代码第2行和程序代码中其他以#开头的部分</li><li><code>__name__</code>：代码第6行</li></ol></blockquote><h3 id="1-4-3-程序编码规范"><a href="#1-4-3-程序编码规范" class="headerlink" title="1.4.3 程序编码规范"></a>1.4.3 程序编码规范</h3><h4 id="🚀-标识符"><a href="#🚀-标识符" class="headerlink" title="🚀 标识符"></a>🚀 标识符</h4><blockquote><p>在Python中，用来给<strong>类、对象、方法、变量、接口和自定义数据类型</strong>等命名的名称</p></blockquote><p>Python标识符由数字、字母、<strong>汉字</strong>和下画线_组成。遵循如下规则：</p><ol><li>标识符必须以字母、汉字或下画线开头</li><li>标识符不能使用空格或标点符号(如括号、引号、逗号等)</li><li>不能使用Python关键字作为标识符，如关键字if不能作为标识符</li><li>不建议使用模块名、类型名或函数名等作为标识，以免影响程序的正常运行</li><li>标识符对英文字母大小写是区分的</li></ol><h4 id="🚀-保留字"><a href="#🚀-保留字" class="headerlink" title="🚀 保留字"></a>🚀 保留字</h4><blockquote><p>查看保留字</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python中的保留字：&quot;</span>,keyword.kwlist)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>Python中的保留字：[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]。</li></ul></blockquote><h4 id="🚀-注释"><a href="#🚀-注释" class="headerlink" title="🚀 注释"></a>🚀 注释</h4><blockquote><p>增加程序的可读性，也为以后程序修改提供帮助</p></blockquote><p>Python中的注释有<strong>单行注释</strong>、<strong>多行注释</strong>和<strong>批量注释</strong>。<br><strong>单行注释：</strong>将要注释的一行代码以<code>#</code>开头。<br><strong>多行注释：</strong>将要注释的多行代码以<code>#</code>开头，或将要注释的多行代码放在成对<code>&#39;&#39;&#39;</code>(3个单引号)和<code>&quot;&quot;&quot;</code>(3个双引号)之间</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:张时贰</span></span><br><span class="line"><span class="string">Date:2022年03月02</span></span><br><span class="line"><span class="string">CSDN:张时贰</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span></span><br><span class="line"><span class="comment"># 程序主体</span></span><br></pre></td></tr></table></figure><h4 id="🚀-代码缩进"><a href="#🚀-代码缩进" class="headerlink" title="🚀 代码缩进"></a>🚀 代码缩进</h4><blockquote><p>python采用严格的“缩进”来表明程序的格式框架，用来表示代码直接的包含和层次关系</p><ul><li>和其它程序设计语言（如 Java、C 语言）采用大括号“{}”分隔代码块不同，Python 采用代码缩进和冒号（ : ）来区分代码块之间的层次</li><li>在 Python 中，对于类定义、函数定义、流程控制语句、异常处理语句等，行尾的冒号和下一行的缩进，表示下一个代码块的开始，而缩进的结束则表示此代码块的结束</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">88</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;合格！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不合格！&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="🚀-多行书写一条语句"><a href="#🚀-多行书写一条语句" class="headerlink" title="🚀 多行书写一条语句"></a>🚀 多行书写一条语句</h4><blockquote><p>Python通常是一行书写一条语句。如果语句很长，也可以多行书写一条语句。可以使用反斜杠<code>\</code>来实现</p></blockquote><p><code>\</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line">b=<span class="number">6</span></span><br><span class="line"><span class="comment"># 两行书写一条</span></span><br><span class="line">c=a+\</span><br><span class="line">    b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br></pre></td></tr></table></figure><p>多行书写[]中的语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list1 = [1, 2,</span><br><span class="line">         3,4,5]</span><br><span class="line">print(&quot;list1:&quot;,list1)</span><br></pre></td></tr></table></figure><h4 id="🚀-一行书写多条语句"><a href="#🚀-一行书写多条语句" class="headerlink" title="🚀 一行书写多条语句"></a>🚀 一行书写多条语句</h4><blockquote><p>Python可以在一行中书写多条语句,语句之间使用分号<code>;</code>隔开</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.2</span>; b = <span class="number">2.3</span>; c = a + b         </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br></pre></td></tr></table></figure><h4 id="🚀-空行"><a href="#🚀-空行" class="headerlink" title="🚀 空行"></a>🚀 空行</h4><blockquote><ul><li>编码格式声明、模块导入、常量和全局变量声明、顶级定义和执行代码之间空两行</li><li>顶级定义之间空两行，方法定义之间空一行</li><li>在函数或方法内部，可以在必要的地方空一行以增强节奏感，但应避免连续空行</li></ul><p>使用必要的空行可以<strong>增加代码的可读性</strong>，通常在顶级定义（如函数或类的定义）之间空两行，而方法定义之间空一行，另外在用于分隔某些功能的位置也可以空一行</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;幂运算结果:&quot;</span>,math.<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="🚀-语句块"><a href="#🚀-语句块" class="headerlink" title="🚀 语句块"></a>🚀 语句块</h4><blockquote><p>缩进相同的一组语句构成一个语句块，又称为语句组。如<code>if</code>、<code>while</code>、<code>def</code>和<code>class</code>这样的复合语句</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hi!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Jack, Mary, ...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;welcome!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="🚀-模块及模块对象导入"><a href="#🚀-模块及模块对象导入" class="headerlink" title="🚀 模块及模块对象导入"></a>🚀 模块及模块对象导入</h4><blockquote><p>Python默认安装仅包含基本的核心模块，启动时只加载了基本模块。在Python中使用<code>import</code>导入模块或模块对象，有如下几种方式：</p><ul><li>导入整个模块。格式为：<code>import 模块名 [as 别名]</code></li><li>导入模块的单个对象。格式为：<code>from 模块名 import 对象 [as 别名]</code></li><li>导入模块的多个对象。格式为：<code>from 模块名 import对象1,对象2, …</code></li><li>导入模块的全部对象。格式为：<code>from 模块名 import *</code></li></ul></blockquote><p><code>import 模块名</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.log2(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><code>from模块名 import对象 [as 别名]</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">m.log2(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p><code>from模块名 import对象1,对象2, …</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> fabs,sqrt</span><br><span class="line">fabs(-<span class="number">100</span>)</span><br><span class="line">sqrt(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><blockquote><p>每个 import 语句只导入一个模块，尽量避免一次导入多个模块</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#推荐</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#不推荐</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br></pre></td></tr></table></figure><h4 id="🚀-字符编码及转换"><a href="#🚀-字符编码及转换" class="headerlink" title="🚀 字符编码及转换"></a>🚀 字符编码及转换</h4><p>在计算机中常见的几种字符编码如下：</p><p><strong>ASCII：</strong>占1个字节8位，采用二进制进行编码。例如，’A’的ASCII为65，’0’的ASCII为48</p><p><strong>Unicode：</strong>又称为万国码或统一码，占2个字节16位，包含了世界上大多数国家的字符编码。例如，汉字’严’的Unicode是十六进制数4E25</p><p><strong>UTF-8：</strong>变长编码方式，使用1～4个字节表示一个符号，根据不同的符号而改变字节长度。例如，汉字’严’的UTF-8是十六进制数E4B8A5</p><p><strong>GBK：</strong>专门用来解决中文编码，是在国家标准GB2312基础上扩容后兼容GB2312的标准，中英文都是双字节的</p><p>在Python 2.X中默认的字符编码为ASCII。如果要处理中文字符，则需要在源文件的开头添加”#-coding&#x3D;UTF-8-“</p><p>Python 3.X默认的字符编码是Unicode编码，支持大多数不同国家的语言。因此，Python 3.X程序可以直接使用包括汉字的各种字符</p><p>如果需要对字符进行不同编码格式的转换，可以使用str.encode()函数和str.decode()函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_unicode = <span class="string">&quot;工业&quot;</span>      <span class="comment">#Unicode格式.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_unicode:&quot;</span>,<span class="built_in">type</span>(str_unicode),<span class="string">&quot;,&quot;</span>,str_unicode)</span><br><span class="line">str_utf8 = str_unicode.encode(<span class="string">&quot;utf8&quot;</span>)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_utf8:&quot;</span>,<span class="built_in">type</span>(str_utf8),<span class="string">&quot;,&quot;</span>,str_utf8)</span><br><span class="line">str_unicode = str_utf8.decode(<span class="string">&quot;utf8&quot;</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_unicode:&quot;</span>,<span class="built_in">type</span>(str_unicode),<span class="string">&quot;,&quot;</span>,str_unicode)</span><br><span class="line">str_gbk = str_unicode.encode(<span class="string">&quot;gbk&quot;</span>)       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_gbk:&quot;</span>,<span class="built_in">type</span>(str_gbk),<span class="string">&quot;,&quot;</span>,str_gbk)</span><br><span class="line">str_unicode = str_gbk.decode(<span class="string">&quot;gbk&quot;</span>)       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str_unicode:&quot;</span>,<span class="built_in">type</span>(str_unicode),<span class="string">&quot;,&quot;</span>,str_unicode)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>str_unicode: &lt;class ‘str’&gt; , 工业<br>str_utf8: &lt;class ‘bytes’&gt; , b’\xe5\xb7\xa5\xe4\xb8\x9a’<br>str_unicode: &lt;class ‘str’&gt; , 工业<br>str_gbk: &lt;class ‘bytes’&gt; , b’\xb9\xa4\xd2\xb5’<br>str_unicode: &lt;class ‘str’&gt; , 工业</li></ul></blockquote><h2 id="1-5-输入、输出函数"><a href="#1-5-输入、输出函数" class="headerlink" title="1.5 输入、输出函数"></a>1.5 输入、输出函数</h2><h4 id="🚀-input-函数"><a href="#🚀-input-函数" class="headerlink" title="🚀 input()函数"></a>🚀 input()函数</h4><blockquote><p>Python提供<code>input()</code>函数由标准<strong>输入读入</strong>一行文本，默认标准输入是键盘，其一般格式为：</p><p><code>变量 = input([&#39;提示字符串&#39;])</code></p><p>用户按<code>Enter</code>完成输入，在按<code>Enter</code>之前，<strong>所有内容</strong>作为输入字符串赋给变量</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">姓名 = <span class="built_in">input</span>(<span class="string">&quot;请输入您的姓名: &quot;</span>)                </span><br><span class="line">性别,职业 = <span class="built_in">input</span>(<span class="string">&quot;请输入您的性别和职业: &quot;</span>).split()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您的姓名: %s, 性别: %s, 职业: %s.&quot;</span>%( 姓名,性别,职业))</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>请输入您的姓名: 张时贰<br>请输入您的性别和职业: 男 学生<br>您的姓名: 张时贰, 性别: 男, 职业: 学生.</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">op1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数: &quot;</span>))  </span><br><span class="line">op2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数: &quot;</span>))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d + %d = %d.&quot;</span>%(op1,op2,op1 + op2))</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>请输入一个数: 1<br>请输入一个数: 2<br>1 + 2 &#x3D; 3.</li></ul></blockquote><h4 id="🚀-print-函数"><a href="#🚀-print-函数" class="headerlink" title="🚀 print()函数"></a>🚀 print()函数</h4><h5>🚁 使用print()函数输出</h5><blockquote><p>使用print()函数输出的一般格式为：</p><p><code>print(obj1,obj2,...,sep=&#39; &#39;,end=&#39;\n&#39;,file=sys.stdout)</code></p><p><strong>obj1, obj2, …：</strong>输出对象</p><p><strong>sep：</strong>分隔符，即参数obj1,obj2,…之间的分隔符，默认没有间隔</p><p><strong>end：</strong>终止符，默认为<code>&#39;\n&#39;</code></p><p><strong>file：</strong>输出位置，即输出到文件还是命令行，默认为<code>sys.stdout</code>，即命令行(终端)</p><p><strong><code>print()</code>函数默认会换行</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">#数值类型可以直接输出 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)  <span class="comment">#字符串类型可以直接输出</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a, b)  <span class="comment">#可以一次输出多个对象，对象之间用逗号分隔</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果直接输出字符串，而不是用对象表示的话，可以不使用逗号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Zhang&quot;</span><span class="string">&quot;Shier&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Zhang&quot;</span>,<span class="string">&quot;Shier&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www&quot;</span>, <span class="string">&quot;csdn&quot;</span>, <span class="string">&quot;net&quot;</span>, sep=<span class="string">&quot;.&quot;</span>)  <span class="comment"># 设置间隔符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改end不换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ZhangShier&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ZhangShier&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>1<br>Hello World<br>1 Hello World<br>ZhangShier<br>Zhang Shier<br><a href="http://www.csdn.net/">www.csdn.net</a><br>ZhangShier ZhangShier</li></ul></blockquote><h5>🚁 使用print()函数格式化输出</h5><blockquote><p>在C语言中，我们可以使用<code>printf(&quot;%-.4f&quot;,a)</code>之类的形式，实现数据的的格式化输出。和C语言的区别在于，Python中格式控制符和转换说明符用<code>%</code>分隔，C语言中用逗号</p><p><code>print()</code>函数格式化输出的一般格式为：<code>print(&quot;格式化字符串&quot;%(变量、常量或表达式))</code></p><p>其中，格式化字符串中包含一个或多个格式指定格式参数，与后面括号中的变量、常量或表达式在个数和类型上一一对应。当有多个变量、常量或表达式时，中间用逗号隔开</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = %d (十进制).&quot;</span>%a)                       </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = %o (八进制).&quot;</span>%a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = %x (十六进制).&quot;</span>%a)</span><br><span class="line"></span><br><span class="line">f = <span class="number">123.4567</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f = %8.2f&quot;</span>%f)                                   </span><br><span class="line"></span><br><span class="line">f =   <span class="number">123.46</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f = %e&quot;</span>%f)                                       </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串: %s&quot;</span>%<span class="string">&quot;Tiger&quot;</span>)</span><br><span class="line">                                 </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符: %c&quot;</span>%<span class="string">&quot;T&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;她是航天员 %s，飞天年龄 %d 岁.&quot;</span>%(<span class="string">&quot;刘洋&quot;</span>,<span class="number">34</span>))            </span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>a &#x3D; 100 (十进制).<br>a &#x3D; 144 (八进制).<br>a &#x3D; 64 (十六进制).<br>f &#x3D;   123.46<br>f &#x3D; 1.234600e+02<br>字符串: Tiger<br>字符: T<br>她是航天员 刘洋，飞天年龄 34 岁.</li></ul></blockquote><h5>🚁 格式字符归纳</h5><table><thead><tr><th>格式字符</th><th>说明</th><th>格式字符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>字符串采用str()的显示</td><td>%x</td><td>十六进制整数</td></tr><tr><td>%r</td><td>字符串(repr())的显示</td><td>%e</td><td>指数（基底写e）</td></tr><tr><td>%c</td><td>单个字符</td><td>%E</td><td>指数（基底写E）</td></tr><tr><td>%b</td><td>二进制整数</td><td>%f,%F</td><td>浮点数</td></tr><tr><td>%d</td><td>十进制整数</td><td>%g</td><td>指数(e)或浮点数(根据显示长度)</td></tr><tr><td>%i</td><td>十进制整数</td><td>%G</td><td>指数(E)或浮点数(根据显示长度)</td></tr><tr><td>%o</td><td>八进制整数</td><td>%%</td><td>字符%</td></tr></tbody></table><h1 align="center">🌴 2022.3.16 下午</h1><h1 id="2-基础"><a href="#2-基础" class="headerlink" title="2 基础"></a>2 基础</h1><h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><blockquote><p>Python支持丰富的数据类型，其中标准的数据类型6个</p></blockquote><ul><li>Number(数字)，如1、-2、3.0、5+6j、True</li><li>String(字符串)，如’Internet’、”长城”</li><li>List(列表)，如[1, 2, 3]、[“Spring”, “Summer”, “Autumn”, “Winter”]</li><li>Tuple(元组)，如(1, 3, 5)、(“大学”, “中学”, “小学”)</li><li>Dictionary(字典)，如{1: “优秀”, 2: “良好”, 3: “合格”, 4: “不合格”}</li><li>Set(集合)，如{“成功”, “失败”}</li></ul><h2 id="2-2-数字类型"><a href="#2-2-数字类型" class="headerlink" title="2.2 数字类型"></a>2.2 数字类型</h2><blockquote><p>Python中的基本数据类型可以分为两类：数字和组合数据数字包括整数、浮点数、布尔值和复数,组合数据包括字符串、列表、元组、字典、集合</p><p>Python 中的变量<strong>不需要声明</strong>。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8004.png" alt="Python语言基础04" style="zoom:50%;" /><h3>🚀 2.2.1 整型</h3><blockquote><p>整型(Int)，又称为整数，包括正整数、负整数和零, 在Python中，整型不限制大小，没有Python 2.X中的长整型(Long)，整数可以是二进制、八进制、十进制和十六进制整数</p></blockquote><ul><li>十进制整数，使用0～9共10个数字表示，如3、-4、0等</li><li>二进制整数，只需要用2个数字(0和1)就可以表示，以<strong>0B或0b</strong>开头，如0B1011(相当于十进制的11)、-0b101(相当于十进制的-5)</li><li>八进制整数，需要用8个数字(0～7)表示，以<strong>0o或0O</strong> 开头，如0o56(相当于十进制的46)、-0O145(相当于十进制的-101)</li><li>十六进制整数，需要用16个数字(0～F)表示，以<strong>0x 或0X</strong>开头，如0xAF(相当于十进制的175)、-0X123(相当于十进制的-291)</li></ul><blockquote><p>  不同进制的数可以通过以下Python内置函数相互转化</p></blockquote><ul><li>bin()函数：将其他进制的数转换成二进制数</li><li>int()函数：将其他进制的数转换成十进制数</li><li>oct()函数：将其他进制的数转换成八进制数</li><li>hex()函数：将其他进制的数转换成十六进制数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同进制的整数相互转化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制数→二进制数:&quot;</span>,<span class="built_in">bin</span>(<span class="number">56</span>))   <span class="comment"># 十进制数→二进制数: 0b111000   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制数→八进制数:&quot;</span>,<span class="built_in">oct</span>(-<span class="number">32</span>))  <span class="comment"># 十进制数→八进制数: -0o40   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制数→十进制数:&quot;</span>,<span class="built_in">int</span>(<span class="number">0x48</span>))<span class="comment"># 十六进制数→十进制数: 72 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制数→十六进制数:&quot;</span>,<span class="built_in">hex</span>(<span class="number">18</span>))  <span class="comment"># 十进制数→十六进制数: 0x12</span></span><br></pre></td></tr></table></figure><h3>🚀 2.2.2 浮点型</h3><p>浮点(Float)类型的数包括<strong>整数部分和小数部分</strong>，可以写成普通的十进制形式，也可以用科学计数法表示(带有指数的浮点数)，十进制表示的浮点数，如0.62、-3.87、0.0等<br>科学计数法表示的浮点数，如32.6e18(相当于3.26×1019)，-9.268E-3(相当于-0.009268)<br>在Python中，提供大约17位的精度和范围从-308到308的指数，<strong>不支持32位的单精度浮点数</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="number">32.6e18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f =&quot;</span>,f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f = %e&quot;</span>%f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f = %f&quot;</span>%f)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li><p>f &#x3D; 3.26e+19</p><p>f &#x3D; 3.260000e+19</p><p>f &#x3D; 32600000000000000000.000000</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浮点数运算</span></span><br><span class="line">a = <span class="number">0.1</span></span><br><span class="line">b = <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b =&quot;</span>,a + b)</span><br><span class="line"><span class="comment">#比较浮点数大小</span></span><br><span class="line"><span class="keyword">if</span>((a + b) == <span class="number">0.3</span>):         </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;(a + b) == 0.3&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;(a + b) != 0.3&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li><p>a + b &#x3D; 0.30000000000000004</p><p>(a + b) !&#x3D; 0.3</p></li></ul></blockquote><h3>🚀 2.2.3 复数类型</h3><blockquote><p><strong>复数(Complex)：</strong>由实数部分和虚数部分构成，可以用a + bj或a + bJ或complex(a, b)表示，如12.6 + 5j，-7.4-8.3J。复数z可以用<code>z.real</code>来获得实部，用<code>z.imag</code>来获得虚部</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复数及其运算</span></span><br><span class="line">c1 = <span class="number">1.2</span> + <span class="number">5.3j</span>     </span><br><span class="line">c2 = <span class="number">4.6</span> + <span class="number">60.8J</span>   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1 + c2 =&quot;</span>,c1 + c2)     </span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>c1 + c2 &#x3D; (5.8+66.1j)</li></ul></blockquote><h3>🚀 2.2.4 布尔类型</h3><blockquote><p>布尔类型(Bool)的常量包括<code>True</code> 和 <code>False</code>，分别表示真和假。</p><p>非0数字、非空字符串、非空列表、非空元组、非空字典、非空集合等在进行条件判断时均视为真(True)；反之视为假(False)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">兴趣 = [<span class="string">&quot;武术&quot;</span>,<span class="string">&quot;艺术&quot;</span>,<span class="string">&quot;音乐&quot;</span>,<span class="string">&quot;体育&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> 兴趣:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;列表&#x27;兴趣&#x27;不为空！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;列表&#x27;兴趣&#x27;为空！&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>列表’兴趣’不为空！</li></ul></blockquote><blockquote><p>布尔类型的常量(True和False)如果出现在<strong>算术运算中</strong>，True 被当作 1，False 被当作 0</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> + <span class="number">2</span>) //<span class="number">3</span>                 </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="literal">False</span> + <span class="number">2</span>) //<span class="number">2</span> </span><br></pre></td></tr></table></figure><h3>🚀 2.2.5 数字类型转换</h3><blockquote><p> Python中的几个内置函数可以进行数字类型之间数据的转换</p></blockquote><ul><li>int(x)函数：将x转换为一个整数</li><li>float(x)函数：将x转换为一个浮点数</li><li>complex(x)或complex(x, y)函数：其中，complex(x)将x转换为一个复数，实数部分为x，虚数部分为0</li><li>bool(x)函数：将非布尔类型数x转换为一个布尔类型常量</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字类型转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int(2.56) →&quot;</span>,<span class="built_in">int</span>(<span class="number">2.56</span>))<span class="comment"># int(2.56) → 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;int(-2.56) →&quot;</span>,<span class="built_in">int</span>(-<span class="number">2.56</span>))<span class="comment"># int(-2.56) → -2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;float(3) →&quot;</span>,<span class="built_in">float</span>(<span class="number">3</span>))<span class="comment"># float(3) → 3.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bool(-1) →&quot;</span>,<span class="built_in">bool</span>(-<span class="number">1</span>))<span class="comment"># bool(-1) → True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bool(0.0) →&quot;</span>,<span class="built_in">bool</span>(<span class="number">0.0</span>))<span class="comment"># bool(0.0) → False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;complex(7,8) →&quot;</span>,<span class="built_in">complex</span>(<span class="number">7</span>,<span class="number">8</span>))<span class="comment"># complex(7,8) → (7 + 8j)</span></span><br></pre></td></tr></table></figure><h3>🚀 2.2.6 分数和高精度实数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分数运算和高精度实数运算</span></span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">a = Fraction(<span class="number">2</span>,<span class="number">5</span>)<span class="comment"># 创建分数对象</span></span><br><span class="line">b = Fraction(<span class="number">1</span>,<span class="number">5</span>)<span class="comment"># 创建分数对象</span></span><br><span class="line">a.denominator;<span class="comment"># 查看分母5</span></span><br><span class="line">a.numerator;<span class="comment"># 查看分子2</span></span><br><span class="line">a + b<span class="comment"># 分数之间的算术运算</span></span><br><span class="line">Fraction(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="number">1</span> / <span class="number">3</span><span class="comment"># 一般精度实数</span></span><br><span class="line"><span class="number">0.3333333333333333</span></span><br><span class="line">Decimal(<span class="number">1</span> / <span class="number">3</span>)<span class="comment"># 高精度实数</span></span><br><span class="line">Decimal(<span class="string">&#x27;0.333333333333333314829616256247390992939472198486328125&#x27;</span>)</span><br></pre></td></tr></table></figure><h3>🚀 2.2.7 常用数学函数</h3><blockquote><p>Python中的数学函数有两种使用方式</p><ul><li>Python中的常用内置数学函数</li><li>Math中的常用数学函数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math                                                </span><br><span class="line">x1 = <span class="number">3.12</span>                     <span class="comment">#样本1数据</span></span><br><span class="line">x2 = <span class="number">3.36</span>                     <span class="comment">#样本2数据</span></span><br><span class="line">x3 = <span class="number">3.08</span>                     <span class="comment">#样本3数据</span></span><br><span class="line">x_ = (x1 + x2 + x3) / <span class="number">3</span>       <span class="comment">#计算样本平均值 </span></span><br><span class="line"><span class="comment">#计算样本总体标准偏差</span></span><br><span class="line">s = math.sqrt((math.<span class="built_in">pow</span>(x1-x_,<span class="number">2</span>) + math.<span class="built_in">pow</span>(x2-x_,<span class="number">2</span>) + math.<span class="built_in">pow</span>(x3-x_,<span class="number">2</span>))/<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_ =&quot;</span>,x_)                <span class="comment">#输出样本平均值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s =&quot;</span>,s)                       <span class="comment">#输出样本标准偏差</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li>x_ &#x3D; 3.186666666666667<br>s &#x3D; 0.1236482466066093</li></ul></blockquote><h2 id="2-3-字符串类型"><a href="#2-3-字符串类型" class="headerlink" title="2.3 字符串类型"></a>2.3 字符串类型</h2><blockquote><ul><li><p>字符串是Python中最常用的数据类型之一，是一个有序的字符集合，用来存储和表现基于文本的信息</p></li><li><p>Python字符串需要使用成对的单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来，如”Python”、”中国制造”等。在Python中，<strong>单引号(‘)字符串和双引号(“)字符串是等效的</strong></p></li><li><p>Python还允许使用三引号<code>&#39;&#39;&#39;&#39;&#39;&#39;</code>或<code>&quot;&#39;</code>创建跨多行的字符串，这种字符串中可以包含换行符、制表符及其他特殊字符</p></li></ul><p>提示：在Python中，不支持字符类型，<strong>单个字符也是字符串</strong></p></blockquote><p>Python为字符串中的每个字符分配一个数字来指代这个元素的位置，即索引，第一个元素的索引是0，第二个元素的索引是1，以此类推,同时，字符串还支持反向索引，字符串中最后一个字符的索引是-1，倒数第二个字符的索引是-2，以此类推</p><p><img src="https://static.runoob.com/wp-content/uploads/123456-20200923-1.svg"></p><blockquote><ul><li>Unicode字符串：不以u&#x2F;U、r&#x2F;R、b&#x2F;B开头的字符串，或以u或U开头的字符串</li><li>非转义的原始字符串：以r或R开头的字符串</li><li>bytes字节串：以b或B开头的字符串</li></ul><p>除可以使用encode()函数和decode()函数在Unicode字符串与bytes字节串之间转换外，也可以使用str()函数和bytes()函数在这二者之间进行转换</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不同类型字符串及其转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Are you happy?&quot;</span>)<span class="comment"># Are you happy?</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&quot;I am really\u0020pleased.&quot;</span>)<span class="comment"># I am really pleased.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;d:\friends.txt&quot;</span>)<span class="comment"># d:\friends.txt</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&quot;rejoice&quot;</span>)<span class="comment"># b&#x27;rejoice&#x27;</span></span><br><span class="line"><span class="built_in">bytes</span>(<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;GBK&quot;</span>)<span class="comment"># b&#x27;\xd6\xd0\xb9\xfa&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="string">b&#x27;\xd6\xd0\xb9\xfa&#x27;</span>,<span class="string">&quot;GBK&quot;</span>)   <span class="comment"># &#x27;中国&#x27;</span></span><br><span class="line"><span class="built_in">bytes</span>(<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>)     <span class="comment"># b&#x27;\xe4\xb8\xad\xe5\x9b\xbd‘</span></span><br><span class="line"><span class="built_in">str</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe5\x9b\xbd&#x27;</span>,<span class="string">&quot;UTF-8&quot;</span>)<span class="comment"># &#x27;中国&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 2.3.1 字符串及创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用赋值运算符(=)创建字符串</span></span><br><span class="line">str1 = <span class="string">&quot;prognosticate&quot;</span>         </span><br><span class="line">str2 = <span class="string">&#x27;evaluation&#x27;</span>             </span><br><span class="line"><span class="comment"># 三引号字符串</span></span><br><span class="line">str3 = <span class="string">&quot;&quot;&quot;这是三引号字符串，可以包含转义字符&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str1:&quot;</span>,str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str2:&quot;</span>,str2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str3:&quot;</span>,str3)</span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li><p>str1: prognosticate</p><p>str2: evaluation</p><p>str3: 这是三引号字符串</p><p>可以包含转义字符</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用str()或repr()函数创建字符串</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">8.42</span>)<span class="comment"># &#x27;8.42&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="literal">True</span>)<span class="comment"># &#x27;True&#x27;</span></span><br><span class="line"><span class="built_in">str</span>([<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>])<span class="comment"># &#x27;[4, 9, 1, 8]&#x27;</span></span><br><span class="line"><span class="built_in">repr</span>((<span class="number">32.5</span>,<span class="number">4000</span>,(<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>)))<span class="comment"># &quot;(32.5, 4000, (&#x27;Google&#x27;, &#x27;Runoob&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><h3>🚀 2.3.2 字符串访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;sophiscated&quot;</span></span><br><span class="line"><span class="built_in">str</span><span class="comment"># 整个字符串sophiscated             </span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">1</span>]<span class="comment"># 索引为1的字符o</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">2</span>:] <span class="comment"># 从索引2开始的所有字符phiscated</span></span><br><span class="line"><span class="built_in">str</span>[:]<span class="comment"># sophiscated</span></span><br><span class="line"><span class="built_in">str</span>[:<span class="number">4</span>] <span class="comment"># 索引为4之前的所有字符&#x27;soph&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[-<span class="number">1</span>] <span class="comment"># 倒数第1个字符.&#x27;d&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[-<span class="number">5</span>:-<span class="number">1</span>] <span class="comment"># 索引为-5～-2的字符.&#x27;cate’</span></span><br></pre></td></tr></table></figure><blockquote><p>从左往右读，<code>:</code>即开区间</p></blockquote><h3>🚀 2.3.3 字符串运算</h3><table><thead><tr><th align="center">操作符</th><th align="center">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">字符串连接</td><td align="left">a + b 输出结果： HelloPython</td></tr><tr><td align="center">*</td><td align="center">重复输出字符串</td><td align="left">a*2 输出结果：HelloHello</td></tr><tr><td align="center">[]</td><td align="center">通过索引获取字符串中字符</td><td align="left">a[1] 输出结果 e</td></tr><tr><td align="center">[ : ]</td><td align="center">截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。</td><td align="left">a[1:4] 输出结果 ell</td></tr><tr><td align="center">in</td><td align="center">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left">‘H’ in a 输出结果 True</td></tr><tr><td align="center">not in</td><td align="center">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left">‘M’ not in a 输出结果 True</td></tr><tr><td align="center">r&#x2F;R</td><td align="center">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td align="left"><code>print( r&#39;\n&#39; ) print( R&#39;\n&#39; )</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串运算</span></span><br><span class="line"><span class="string">&quot;大家好，&quot;</span> + <span class="string">&quot;这是航天员王亚平.&quot;</span>      </span><br><span class="line"><span class="string">&#x27;大家好，这是航天员王亚平.&#x27;</span></span><br><span class="line"><span class="string">&quot;您的幸运数字为: &quot;</span> + <span class="number">6</span>      <span class="comment"># +运算符两边必须都是字符串，否则报错.TypeError: can only concatenate str (not &quot;int&quot;) to str</span></span><br><span class="line"><span class="string">&quot;重要的话.&quot;</span> * <span class="number">3</span></span><br><span class="line"><span class="string">&#x27;重要的话.重要的话.重要的话.&#x27;</span></span><br><span class="line"><span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;lucky&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&quot;quite&quot;</span> &gt; <span class="string">&quot;quiet&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Operator中的函数比较字符串大小</span></span><br><span class="line"><span class="keyword">import</span> operator                                      </span><br><span class="line">str1 = <span class="string">&quot;superman&quot;</span>                                     </span><br><span class="line">str2 = <span class="string">&quot;monster&quot;</span>                                      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; &lt; &#x27;monster&#x27;:&quot;</span>,operator.lt(str1,str2))     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; &lt;= &#x27;monster&#x27;:&quot;</span>,operator.le(str1,str2))    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; == &#x27;monster&#x27;:&quot;</span>,operator.eq(str1,str2))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; != &#x27;monster&#x27;:&quot;</span>,operator.ne(str1,str2))    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; &gt; &#x27;monster&#x27;:&quot;</span>,operator.ge(str1,str2))     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;superman&#x27; &gt;= &#x27;monster&#x27;:&quot;</span>,operator.gt(str1,str2))   </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>输出</p><ul><li><p>‘superman’ &lt; ‘monster’: False</p><p>‘superman’ &lt;&#x3D; ‘monster’: False</p><p>‘superman’ &#x3D;&#x3D; ‘monster’: False</p><p>‘superman’ !&#x3D; ‘monster’: True</p><p>‘superman’ &gt; ‘monster’: True</p><p>‘superman’ &gt;&#x3D; ‘monster’: True</p></li></ul></blockquote><h3>🚀 2.3.4 字符串函数</h3><h4>🚁 字符串查找函数</h4><ul><li><code>str.find(str, beg=0, end=len(string))</code>：find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。如果不包含索引值，返回-1</li><li><code>str.rfind(str, beg=0, end=len(string))</code>：从右边开始查找</li><li><code>str.index(str, beg=0, end=len(string))</code>：查找字符串str中是否包含子字符串str，如果包含则返回子字符串str在str中第一次出现的索引值，否则出错</li><li><code>str.startswith(substr, beg=0,end=len(string))</code>：检查字符串str是否以指定子字符串substr开头</li><li><code>str.endswith(subStr)</code>：检查字符串str是否以指定子字符串subStr结束</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;时间是一切财富中最宝贵的财富&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;子字符串位置：&quot;</span>,<span class="built_in">str</span>.find(<span class="string">&quot;财富&quot;</span>))       <span class="comment">#从字符串左边开始查找</span></span><br><span class="line"><span class="comment">#子字符串位置： 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;子字符串位置：&quot;</span>,<span class="built_in">str</span>.find(<span class="string">&quot;财富&quot;</span>,<span class="number">6</span>))    <span class="comment">#从左边索引为6的字符开始查找</span></span><br><span class="line"><span class="comment">#子字符串位置： 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;子字符串位置：&quot;</span>,<span class="built_in">str</span>.rfind(<span class="string">&quot;财富&quot;</span>))      <span class="comment">#从字符串右边开始查找</span></span><br><span class="line"><span class="comment">#子字符串位置： 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;子字符串位置：&quot;</span>,<span class="built_in">str</span>.rfind(<span class="string">&quot;财富&quot;</span>,<span class="number">4</span>,<span class="number">10</span>))<span class="comment">#从右边索引4～10的字符开始查找</span></span><br><span class="line"><span class="comment">#子字符串位置： 5</span></span><br><span class="line"><span class="built_in">print</span>(“字符串位置：”,<span class="built_in">str</span>.rfind(“成功”))      <span class="comment">#从字符串右边开始查找</span></span><br><span class="line"><span class="comment">#子字符串位置： -1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.startswith(<span class="string">&quot;时间&quot;</span>))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.endswith(<span class="string">&quot;财富&quot;</span>))</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><h4>🚁 字符串替换函数</h4><p><code>str.replace(oldStr,newStr[,max])</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;贝多芬是世界闻名的航海家.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&quot;贝多芬&quot;</span>,<span class="string">&quot;哥伦布&quot;</span>)) <span class="comment"># 哥伦布是世界闻名的航海家</span></span><br></pre></td></tr></table></figure><h4>🚁 字符串拆分函数</h4><p><code>str.split(sep=&quot;&quot;,num)</code>,通过指定分隔符对字符串进行切片,分割为 num+1 个子字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Every cloud has a silver lining.&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>.split())</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>,<span class="number">3</span>))     </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;Every&#x27;, &#x27;cloud&#x27;, &#x27;has&#x27;, &#x27;a&#x27;, &#x27;silver&#x27;, &#x27;lining.&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;Every&#x27;, &#x27;cloud&#x27;, &#x27;has&#x27;, &#x27;a silver lining.&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚁 ord()和chr()</h4><blockquote><p><code>ord()</code>函数和<code>chr()</code>函数是一对与编码相关而功能相反的函数</p><ul><li>ord(c)：返回单个字符的Unicode编码</li><li>chr(u)：返回Unicode编码对应的字符</li></ul><p>两个字符串之间的比较一般遵循如下规则：</p><ul><li>如果都是西文字符串，则按照字符串每个字符的ASCII编码逐个进行比较</li><li>如果都是中文字符串，则按照汉字的Unicode编码逐个进行比较</li><li>如果分别是汉字字符串和英文字符串，则统一按照它们的Unicode编码逐个进行比较，汉字字符串大于英文字符串</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(c) =&quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;c&quot;</span>))<span class="comment"># ord(c) = 99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(d) =&quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;d&quot;</span>))<span class="comment"># ord(d) = 100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;c&#x27; &gt; &#x27;d&#x27;:&quot;</span>,<span class="string">&quot;c&quot;</span> &gt; <span class="string">&quot;d&quot;</span>)<span class="comment"># &#x27;c&#x27; &gt; &#x27;d&#x27;: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(&#x27;输&#x27;) = &quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;输&quot;</span>))  <span class="comment"># ord(&#x27;输&#x27;) = 36755</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(&#x27;赢&#x27;) = &quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;赢&quot;</span>))<span class="comment"># ord(&#x27;赢&#x27;) = 36194</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;输&#x27; &gt; &#x27;赢&#x27;:&quot;</span>,<span class="string">&quot;输&quot;</span> &gt; <span class="string">&quot;赢&quot;</span>)<span class="comment"># &#x27;输&#x27; &gt; &#x27;赢&#x27;: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(&#x27;中&#x27;) =&quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;中&quot;</span>))<span class="comment"># ord(&#x27;中&#x27;) = 20013</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ord(&#x27;z&#x27;) =&quot;</span>,<span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>))<span class="comment"># ord(&#x27;z&#x27;) = 122</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;中&#x27; &gt; &#x27;z&#x27;:&quot;</span>,<span class="string">&quot;中&quot;</span> &gt; <span class="string">&quot;z&quot;</span>)<span class="comment"># &#x27;中&#x27; &gt; &#x27;z&#x27;: True</span></span><br></pre></td></tr></table></figure><h4>🚁 字符串格式化函数</h4><blockquote><p><code>format()</code> 一般格式为： <code>&#39;格式化字符串&#39;.format(参数列表)</code>，格式化字符串：包括参数序号和格式控制信息的字符串<br>参数序号和格式控制信息包含在{}中<br>格式化符号和print()函数中的类似</p><ul><li>*：自定义宽度或小数点精度</li><li>+：在正数前面显示加号(+)</li><li>-：左对齐</li><li>m.n.：显示最小总宽度为m，小数点后的位数为n</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据位置格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;, &#123;1&#125;.&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>))<span class="comment"># Hello, world.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;, I am &#123;&#125;.&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>))<span class="comment"># Hello, I am Python.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125;, &#123;1&#125; is a new prgramming language.&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>))</span><br><span class="line">Hello Python, Python <span class="keyword">is</span> a new prgramming language</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据key格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;清华大学&quot;</span>, url=<span class="string">&quot;http:</span></span><br><span class="line"><span class="string"> //www.tsinghua.edu.cn/&quot;</span>))<span class="comment"># 网站名：清华大学, 地址: http://www.tsinghua.edu.cn/</span></span><br><span class="line">                                    </span><br><span class="line"><span class="comment">#根据字典格式化</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;清华大学&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://www.tsinghua.edu.cn/&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))<span class="comment"># 网站名：清华大学, 地址: http://www.tsinghua.edu.cn/</span></span><br><span class="line"><span class="comment">#根据列表格式化</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello &#123;names[0]&#125;, I am &#123;names[1]&#125;.&#x27;</span>.<span class="built_in">format</span>(names=<span class="built_in">list</span>))<span class="comment"># hello world, I am python.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello &#123;0[0]&#125;, I am &#123;0[1]&#125;.&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">list</span>))<span class="comment"># hello world, I am python.</span></span><br><span class="line">                                    </span><br><span class="line"><span class="comment">#数字格式化</span></span><br><span class="line"><span class="comment">#2位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))<span class="comment"># 3.14</span></span><br><span class="line"><span class="comment">#带符号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:+.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))<span class="comment"># +3.14</span></span><br><span class="line"><span class="comment">#无小数位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.0f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>))<span class="comment"># 3</span></span><br><span class="line"><span class="comment">#填充0 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:0&gt;2d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">6</span>))<span class="comment"># 06</span></span><br></pre></td></tr></table></figure><h4>🚁 例题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">phone = <span class="built_in">input</span>(<span class="string">&quot;请输入电话号码: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">if</span> phone.isdecimal() <span class="keyword">and</span> <span class="built_in">len</span>(phone) == <span class="number">11</span>:     <span class="comment">#电话号码为11位数字.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您的电话号码是:&quot;</span>,phone)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    phone = <span class="built_in">input</span>(<span class="string">&quot;您输入的电话号码不正确!\n请重新输入:&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入电话号码: 18900a00000</span></span><br><span class="line"><span class="string">您输入的电话号码不正确!</span></span><br><span class="line"><span class="string">请重新输入:18900000000</span></span><br><span class="line"><span class="string">您的电话号码是: 18900000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 2.3.4 常用转义字符</h3><table><thead><tr><th align="center">转义字符</th><th align="center">描述</th><th align="center">转义字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\(在行尾时)</td><td align="center">续行符</td><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\\</td><td align="center">反斜杠符号</td><td align="center">\v</td><td align="center">纵向制表符</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td><td align="center">\t</td><td align="center">横向制表符</td></tr><tr><td align="center">\“</td><td align="center">双引号</td><td align="center">\r</td><td align="center">回车，将 \r 后面的内容移到字符串开头，<br/>并逐一替换开头部分的字符，直至将 \r 后面的内容完全替换完成</td></tr><tr><td align="center">\a</td><td align="center">响铃</td><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\b</td><td align="center">退格(Backspace)</td><td align="center">\yyy</td><td align="center">八进制数，y 代表 0~7 的字符，例如：\012 代表换行</td></tr><tr><td align="center">\e</td><td align="center"></td><td align="center">\xyy</td><td align="center">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td></tr><tr><td align="center">\000</td><td align="center">空</td><td align="center">\other</td><td align="center">其它的字符以普通格式输出</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;很多观众喜欢\&quot;汉武大帝\&quot;这部电视剧.&quot;</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = \t108&quot;</span>)                              </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d:\\b.py&quot;</span>)                                </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">很多观众喜欢&quot;汉武大帝&quot;这部电视剧.</span></span><br><span class="line"><span class="string">a = 108</span></span><br><span class="line"><span class="string">d:\b.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.3.18 下午</h1><h2 id="2-4-常量和变量"><a href="#2-4-常量和变量" class="headerlink" title="2.4 常量和变量"></a>2.4 常量和变量</h2><h3 id="2-4-1-常量"><a href="#2-4-1-常量" class="headerlink" title="2.4.1 常量"></a>2.4.1 常量</h3><blockquote><p>常量一般指不需要改变也不能改变的常数或常量，如一个数字3、一个字符串”火星”、一个元组(1, 3, 5)等<br>Python中没有专门定义常量的方式，通常使用大写变量名表示。但是，这仅仅是一种<strong>提示和约定俗成，其本质还是变量</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.14</span><span class="comment">#定义一个常量.</span></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入圆的半径: &quot;</span>))</span><br><span class="line">area = PI * r * r<span class="comment">#计算圆面积.  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;area =&quot;</span>,area)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入圆的半径: 3.4</span></span><br><span class="line"><span class="string">area = 36.2984</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-变量"><a href="#2-4-2-变量" class="headerlink" title="2.4.2 变量"></a>2.4.2 变量</h3><h4>🚀 变量概述</h4><blockquote><ul><li>与常量相反，变量的值是可以变化的</li><li>在Python中，不仅变量的值可以变，其<strong>类型也可以变</strong></li><li>在使用变量的时候，不需要提前声明，只需要给这个变量赋值即可。当给一个变量赋值时即创建对应类型的变量</li><li>当用变量的时候，必须给这个变量赋值。如果只声明一个变量而没有赋值，则Python认为这个变量没有定义</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">120</span>                                                      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m的数据类型:&quot;</span>,<span class="built_in">type</span>(m))<span class="comment"># m的数据类型: &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">m = <span class="string">&quot;大数据&quot;</span>                                                </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m的数据类型:&quot;</span>,<span class="built_in">type</span>(m))<span class="comment"># m的数据类型: &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>只声明一个变量而没有赋值</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>,x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x + y =&quot;</span>,x + y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x = 50</span></span><br><span class="line"><span class="string">print(&quot;x + y = &quot;,x + y)</span></span><br><span class="line"><span class="string">NameError: name &#x27;y&#x27; is not defined</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 变量命名</h4><blockquote><ul><li>Python中变量的命名遵循标识符的规定，可以使用大小写英文字母、汉字、下画线、数字</li><li>变量名必须以英文字母、汉字或下画线开头，不能使用空格或标点符号(如括号、引号、逗号等)</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#合法变量</span></span><br><span class="line">a,A,b1,c_4,_s1_,身高</span><br><span class="line"><span class="comment">#不合法变量</span></span><br><span class="line">1a,d <span class="number">3</span></span><br></pre></td></tr></table></figure><h4>🚀 变量赋值</h4><blockquote><p>在使用Python中的变量前都必须给变量赋值，变量赋值后才能在内存中被创建。Python使用</p><ul><li><p>赋值运算符(&#x3D;)给变量赋值，其一般格式为：<br> <code>变量1,变量2,变量3,…  ＝ 表达式1,表达式2,表达式3,…</code></p></li><li><p>如果多个变量的值相同，也可以使用如下格式：<br><code>变量1 = 变量2 = … = 变量n = 表达式</code></p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">68</span>            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&quot;</span>,counter)<span class="comment"># counter: 68</span></span><br><span class="line">miles = <span class="number">26.91</span>          </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;miles:&quot;</span>,miles)<span class="comment"># miles: 26.91</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span>           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>,name)<span class="comment"># name: John</span></span><br><span class="line">四大名著 = [<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;西游记&quot;</span>,<span class="string">&quot;水浒传&quot;</span>]        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;四大名著:&quot;</span>,四大名著)<span class="comment"># 四大名著: [&#x27;三国演义&#x27;, &#x27;红楼梦&#x27;, &#x27;西游记&#x27;, &#x27;水浒传&#x27;]</span></span><br><span class="line">data1,data2,data3 = <span class="number">10</span>,<span class="number">95.12</span>,<span class="string">&quot;人工智能&quot;</span>        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data1 = %d，data2 = %f，data3 = %s.&quot;</span>%(data1,data2,data3))<span class="comment"># data1 = 10，data2 = 95.120000，data3 = 人工智能.</span></span><br><span class="line">古代军事家 = [<span class="string">&quot;孙武&quot;</span>,<span class="string">&quot;白起&quot;</span>,<span class="string">&quot;李靖&quot;</span>,<span class="string">&quot;王翦&quot;</span>]    </span><br><span class="line">zsj1,zsj2,zsj3,zsj4 = 古代军事家</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;zsj1 = %s，zsj2= %s，zsj3 = %s，zsj4 = %s.&quot;</span>%(zsj1,zsj2,zsj3,zsj4))</span><br><span class="line"><span class="comment"># zsj1 = 孙武，zsj2 = 白起，zsj3 = 李靖，zsj4 = 王翦.</span></span><br><span class="line">x = y = z = <span class="number">268</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x = %s，y = %s，z = %s.&quot;</span>%(x,y,z))<span class="comment"># x = 268, y = 268, z = 268</span></span><br></pre></td></tr></table></figure><h4>🚀 例题</h4><blockquote><p>交换两个变量的值</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">50</span>; b = <span class="number">60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;交换前: a = %d，b = %d &quot;</span>%(a,b))<span class="comment"># 交换前: a = 50，b = 60</span></span><br><span class="line">a,b = b,a <span class="comment">#交换两个变量的值.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;交换后: a = %d，b = %d &quot;</span>%(a,b))<span class="comment"># 交换后: a = 60，b = 50</span></span><br></pre></td></tr></table></figure><blockquote><p>给不同变量赋相同的数值，利用<code>id</code>获取内存位置，每一次运行指向都不同</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8005.png" alt="Python语言基础05"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">16.8</span></span><br><span class="line">b = <span class="number">16.8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的id为:&quot;</span>,<span class="built_in">id</span>(a))<span class="comment"># a的id为: 1443854448           </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b的id为:&quot;</span>,<span class="built_in">id</span>(b))     <span class="comment"># b的id为: 1443854448</span></span><br></pre></td></tr></table></figure><blockquote><p>给不同变量赋相同的列表,每一次运行指向都不同</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">&quot;王羲之&quot;</span>,<span class="string">&quot;顾恺之&quot;</span>,<span class="string">&quot;阎立本&quot;</span>,<span class="string">&quot;颜真卿&quot;</span>]</span><br><span class="line">y = [<span class="string">&quot;王羲之&quot;</span>,<span class="string">&quot;顾恺之&quot;</span>,<span class="string">&quot;阎立本&quot;</span>,<span class="string">&quot;颜真卿&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id(x) =&quot;</span>,<span class="built_in">id</span>(x))                 <span class="comment">#id(x) = 38512136</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;id(y) =&quot;</span>,<span class="built_in">id</span>(y))                 <span class="comment">#id(y) = 37701704</span></span><br></pre></td></tr></table></figure><blockquote><p>变量复制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8006.png" alt="Python语言基础06"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = a    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的id为:&quot;</span>,<span class="built_in">id</span>(a))      <span class="comment">#a的id为: 1443854448   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b的id为:&quot;</span>,<span class="built_in">id</span>(b))      <span class="comment">#b的id为: 1443854448    </span></span><br></pre></td></tr></table></figure><h2 id="2-5-运算符和表达式"><a href="#2-5-运算符和表达式" class="headerlink" title="2.5 运算符和表达式"></a>2.5 运算符和表达式</h2><h3 id="2-5-1-常用运算符"><a href="#2-5-1-常用运算符" class="headerlink" title="2.5.1 常用运算符"></a>2.5.1 常用运算符</h3><h4>🚀 算术运算符和算术运算表达式</h4><blockquote><p>算术运算符用于对算术运算对象进行算术运算，由算术运算符与算术运算对象组成的式子称为算术运算表达式</p></blockquote><p>a&#x3D;10,b&#x3D;2</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加 - 两个对象相加</td><td align="center">a + b 输出结果 31</td></tr><tr><td align="center">-</td><td align="center">减 - 得到负数或是一个数减去另一个数</td><td align="center">a - b 输出结果 -11</td></tr><tr><td align="center">*</td><td align="center">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="center">a * b 输出结果 210</td></tr><tr><td align="center">&#x2F;</td><td align="center">除 - x 除以 y</td><td align="center">b &#x2F; a 输出结果 2.1</td></tr><tr><td align="center">%</td><td align="center">取模 - 返回除法的余数</td><td align="center">b % a 输出结果 1</td></tr><tr><td align="center">**</td><td align="center">幂 - 返回x的y次幂</td><td align="center">a**b 为10的21次方</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">取整除 - 向下取接近商的整数</td><td align="center">9&#x2F;&#x2F;2 4</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求自然数268的逆序数并输出</span></span><br><span class="line">x = <span class="number">268</span>                                                        </span><br><span class="line">a = x // <span class="number">100</span>                <span class="comment">#计算百位数字.</span></span><br><span class="line">b = x // <span class="number">10</span> % <span class="number">10</span>            <span class="comment">#计算十位数字.</span></span><br><span class="line">c = x % <span class="number">10</span>                  <span class="comment">#计算个位数字.</span></span><br><span class="line">y = c * <span class="number">100</span> + b * <span class="number">10</span> + a    <span class="comment">#计算逆序自然数.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原自然数: x =&quot;</span>,x)     <span class="comment"># 原自然数: x = 268         </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆序自然数: y =&quot;</span>,y)   <span class="comment"># 逆序自然数: y = 862         </span></span><br></pre></td></tr></table></figure><h4>🚀 关系运算符和关系运算表达式</h4><blockquote><ul><li>关系运算符用来比较两个对象之间的关系，对象可以是数或字符串等常量、变量或表达式</li><li>由关系运算符与比较对象组成的表达式称为关系运算表达式</li><li>关系表达式的结果为真返回True，否则返回False</li></ul></blockquote><p>a&#x3D;1,b&#x3D;2</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于 - 比较对象是否相等</td><td align="center">(a &#x3D;&#x3D; b) 返回 False</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于 - 比较两个对象是否不相等</td><td align="center">(a !&#x3D; b) 返回 True</td></tr><tr><td align="center">&gt;</td><td align="center">大于 - 返回x是否大于y</td><td align="center">(a &gt; b) 返回 False</td></tr><tr><td align="center">&lt;</td><td align="center">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写</td><td align="center">(a &lt; b) 返回 True</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于 - 返回x是否大于等于y</td><td align="center">(a &gt;&#x3D; b) 返回 False</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于 - 返回x是否小于等于y</td><td align="center">(a &lt;&#x3D; b) 返回 True</td></tr></tbody></table><h4>🚀 赋值运算符和赋值运算表达式</h4><blockquote><ul><li>赋值运算符用来将表达式的结果赋给变量</li><li>由赋值运算符与赋值运算对象组成的式子称为赋值运算表达式</li></ul></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">简单的赋值运算符</td><td align="center">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加法赋值运算符</td><td align="center">c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减法赋值运算符</td><td align="center">c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘法赋值运算符</td><td align="center">c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除法赋值运算符</td><td align="center">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取模赋值运算符</td><td align="center">c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td align="center">**&#x3D;</td><td align="center">幂赋值运算符</td><td align="center">c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="center">取整除赋值运算符</td><td align="center">c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td align="center">:&#x3D;</td><td align="center">海象运算符，可在表达式内部为变量赋值</td><td align="center"><code>a = 1 if a &gt; 0: print(&quot;1&gt;0&quot;)</code>等同于<code>if a:=1 &gt; 0: print(&quot;1&gt;0&quot;)</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">100</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line">s += a</span><br><span class="line">s += b</span><br><span class="line">s += c</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s =&quot;</span>,s)<span class="comment"># s=300</span></span><br></pre></td></tr></table></figure><h4>🚀 逻辑运算符和逻辑运算表达式</h4><blockquote><p>a&#x3D;10,b&#x3D;20</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">逻辑表达式</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">x and y</td><td align="center">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td align="center">(a and b) 返回 20</td></tr><tr><td align="center">or</td><td align="center">x or y</td><td align="center">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td align="center">(a or b) 返回 10</td></tr><tr><td align="center">not</td><td align="center">not x</td><td align="center">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="center">not(a and b) 返回 False</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span><span class="comment"># True</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="number">3</span><span class="comment"># 3</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="literal">True</span><span class="comment"># 0</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="number">3</span><span class="comment"># 0</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span><span class="comment"># True</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="number">4</span><span class="comment"># 4</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">or</span> <span class="literal">True</span><span class="comment"># 3</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">or</span> <span class="number">4</span><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">True</span><span class="comment"># False</span></span><br><span class="line"><span class="keyword">not</span> <span class="number">3</span><span class="comment"># False</span></span><br></pre></td></tr></table></figure><h4>🚀 位运算符和位运算表达式</h4><blockquote><p>位运算符用来把<strong>两个运算对象按照二进制</strong>进行位运算，由位运算符与位运算对象组成的式子称为位运算表达式</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="center">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="center">|</td><td align="center">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1</td><td align="center">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="center">^</td><td align="center">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="center">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="center">~</td><td align="center">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<code>~x</code> 类似于 <code>-x-1</code></td><td align="center">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0</td><td align="center">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="center">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><blockquote><p>使用“^”运算符对字符加密和解密。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="built_in">input</span>(<span class="string">&quot;请输入加密密钥: &quot;</span>)</span><br><span class="line">enc = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的字符: &quot;</span>)</span><br><span class="line">dec = <span class="built_in">ord</span>(key) ^ <span class="built_in">ord</span>(enc) <span class="comment">#对字符加密.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密结果:&quot;</span>,<span class="built_in">chr</span>(dec))</span><br><span class="line">enc = <span class="built_in">ord</span>(key) ^ dec<span class="comment">#对字符解密.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密结果:&quot;</span>,<span class="built_in">chr</span>(enc))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入加密密钥: 6</span></span><br><span class="line"><span class="string">请输入要加密的字符: a</span></span><br><span class="line"><span class="string">加密结果: W</span></span><br><span class="line"><span class="string">解密结果: a</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 成员运算符和成员运算表达式</h4><blockquote><p>成员运算符用来判断两个对象之间的关系。由成员运算符与成员运算对象组成的式子称为成员运算表达式</p></blockquote><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="center">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="center">x 在 y 序列中 , 如果 x 在 y 序列中返回 True</td></tr><tr><td align="left">not in</td><td align="center">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="center">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True</td></tr></tbody></table><blockquote><p>成员运算符的使用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">元曲四大家 = [<span class="string">&quot;关汉卿&quot;</span>,<span class="string">&quot; 白朴&quot;</span>,<span class="string">&quot; 郑光祖&quot;</span>,<span class="string">&quot;马致远&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;汤显祖&quot;</span> <span class="keyword">in</span> 元曲四大家:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;&#x27;汤显祖&#x27;是元曲四大家之一.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;&#x27;汤显祖&#x27;不是元曲四大家之一.&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;汤显祖&#x27;不是元曲四大家之一</span></span><br></pre></td></tr></table></figure><h4>🚀 身份运算符和身份运算表达式</h4><blockquote><p>身份运算符用来比较两个对象之间的存储单元， 由身份运算符与身份运算对象组成的式子称为身份运算表达式</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="left">实例(id指内存地址)</th></tr></thead><tbody><tr><td align="center">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) &#x3D;&#x3D; id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="center">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 <strong>id(x) !&#x3D; id(y)</strong> 。如果引用的不是同一个对象则返回结果 True，否则返回 False</td></tr></tbody></table><blockquote><p>注意区分</p><p><code>a == b</code>：比较对象a和对象b的<strong>值是否相等</strong><br><code>a is b</code>：比较对象a和对象b是否有相同的引用，即<strong>id是否相等</strong>，相当于java中<code>equal</code><br><code>operator.eq(a, b)</code>函数：与<code>a == b</code>同理</p></blockquote><blockquote><p>比较两个整型变量</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a is b ?&quot;</span>,a <span class="keyword">is</span> b)<span class="comment"># a is b ? True                   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a == b ?&quot;</span>,a == b)<span class="comment"># a == b ? True                  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.eq(a,b) ?&quot;</span>,operator.eq(a,b))<span class="comment"># operator.eq(a,b) ? True  </span></span><br></pre></td></tr></table></figure><blockquote><p>比较两个列表对象</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">y = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x is y ?&quot;</span>,x <span class="keyword">is</span> y)       <span class="comment"># x is y ? False                 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x == y ?&quot;</span>,x == y)       <span class="comment"># x == y ? True               </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.eq(x,y)?&quot;</span>,operator.eq(x,y))<span class="comment"># operator.eq(x,y)? True</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-运算符优先级"><a href="#2-5-2-运算符优先级" class="headerlink" title="2.5.2 运算符优先级"></a>2.5.2 运算符优先级</h3><blockquote><p>从最高到最低优先级的所有运算符</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>**</code></td><td align="center">指数 (最高优先级)</td></tr><tr><td align="center">~ + -</td><td align="center">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="center"><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td align="center">乘，除，求余数和取整除</td></tr><tr><td align="center">+ -</td><td align="center">加法减法</td></tr><tr><td align="center"><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td align="center">右移，左移运算符</td></tr><tr><td align="center">&amp;</td><td align="center">位 ‘AND’</td></tr><tr><td align="center"><code>^</code> &#96;</td><td align="center">&#96;</td></tr><tr><td align="center"><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td align="center">比较运算符</td></tr><tr><td align="center">&#x3D;&#x3D; !&#x3D;</td><td align="center">等于运算符</td></tr><tr><td align="center"><code>=</code> <code>%=</code> <code>/=</code> <code>//=</code> <code>-=</code> <code>+=</code> <code>*=</code> <code>**=</code></td><td align="center">赋值运算符</td></tr><tr><td align="center">is is not</td><td align="center">身份运算符</td></tr><tr><td align="center">in not in</td><td align="center">成员运算符</td></tr><tr><td align="center">not and or</td><td align="center">逻辑运算符</td></tr></tbody></table><blockquote><p>使用运算符计算表达式</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>; b = <span class="number">20</span>; c = <span class="number">30</span>; d = <span class="number">40</span></span><br><span class="line">e = a + b * c / d</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)<span class="comment"># e = 25.0</span></span><br><span class="line">f = (a + b) * c / d</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f =&quot;</span>,f)<span class="comment"># f = 22.5</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-补充说明"><a href="#2-5-3-补充说明" class="headerlink" title="2.5.3 补充说明"></a>2.5.3 补充说明</h3><blockquote><ul><li><p>Python中的一些运算符不仅可用于数字等运算，还可以用于对<strong>字符串、列表和元组</strong>等组合对象的运算</p></li><li><p>Python支持++i、–i运算符，但含义和其他语言中的不同</p></li><li><p>Python不支持**i++、i–**运算符</p></li></ul></blockquote><blockquote><p><code>++</code>和<code>--</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line">++i    <span class="comment">#等价于+(+i)=2</span></span><br><span class="line">--i    <span class="comment">#等价于-(-i)=2</span></span><br><span class="line"><span class="number">2</span>--<span class="number">3</span>   <span class="comment">#等价于2-(-3)=5</span></span><br></pre></td></tr></table></figure><h2 id="2-6-特殊内置函数"><a href="#2-6-特殊内置函数" class="headerlink" title="2.6 特殊内置函数"></a>2.6 特殊内置函数</h2><h3 id="2-6-1-内置函数简介"><a href="#2-6-1-内置函数简介" class="headerlink" title="2.6.1 内置函数简介"></a>2.6.1 内置函数简介</h3><blockquote><ul><li>内置函数(Built-In Functions，BIF)是Python的内置对象类型之一，封装在标准库模块<code>_ _builtins_ _</code>中</li><li>可以直接在程序中使用，如<code>input()</code>函数、<code>print()</code>函数、<code>abs()</code>函数等</li><li>Python中的内置函数使用C语言进行了大量优化，运行速度快，推荐优先使用</li></ul></blockquote><blockquote><p>使用help()函数查看内置函数用法。<code>help(&quot;函数名&quot;)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="string">&quot;pow&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Help on built-in function pow in module builtins:</span></span><br><span class="line"><span class="string">    pow(x,y,z=None,/)</span></span><br><span class="line"><span class="string">    Equivalent to x**y (with two arguments) or x**y % z (with   three arguments)</span></span><br><span class="line"><span class="string">    Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-2-特殊内置函数"><a href="#2-6-2-特殊内置函数" class="headerlink" title="2.6.2 特殊内置函数"></a>2.6.2 特殊内置函数</h3><h4>🚀 range()函数</h4><blockquote><p>range()函数返回一个整数序列的迭代对象，其一般格式为：<code>range([start,]stop[,step])</code><br>其中，<br>start为计数初始值，默认从0开始。<br>stop为计数终值，但不包括 stop。<br>step为步长，默认值为1。当start比stop大时，step为负整数。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))<span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>))   <span class="comment"># [2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)) <span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>,<span class="number">1</span>,-<span class="number">1</span>)) <span class="comment"># [5, 4, 3, 2]</span></span><br></pre></td></tr></table></figure><h4>🚀 type()和isinstance()函数</h4><blockquote><ul><li><code>type(object)</code>：接收一个对象object作为参数，返回这个对象的类型</li><li><code>isinstance(object, class)</code>：判断接收的对象object是否是给定类型class的对象：如果是，则返回True；否则返回False</li></ul></blockquote><blockquote><p>使用type()函数和isinstance()函数判断对象类型</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;innovate&#x27;的类型是:&quot;</span>,<span class="built_in">type</span>(<span class="string">&quot;innovate&quot;</span>))<span class="comment"># &#x27;innovate&#x27;的类型是: &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;6是整型数吗？&quot;</span>,<span class="built_in">isinstance</span>(<span class="number">6</span>,<span class="built_in">int</span>))      <span class="comment"># 6是整型数吗？ True</span></span><br></pre></td></tr></table></figure><h4>🚀 eval()函数</h4><blockquote><p><code>eval()</code>函数用来执行一个字符串表达式，并返回表达式的值，其一般格式为：<code>eval(expression[,globals[,locals]])</code><br>其中，expression为表达式，globals为变量作用域，可选，必须是一个字典对象，locals为变量作用域，可选，可以是任何映射(map)对象</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="built_in">eval</span>(<span class="string">&#x27;2 + 3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)<span class="comment"># 5</span></span><br><span class="line">a,b = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入两个数(用&#x27;,&#x27;隔开): &quot;</span>))   <span class="comment"># 请输入两个数(用&#x27;,&#x27;隔开):5, 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = %d, b = %d.&quot;</span>%(a,b))<span class="comment"># a = 5, b = 8</span></span><br></pre></td></tr></table></figure><h4>🚀 map()函数</h4><blockquote><p><code>map()</code>函数把函数依次映射到序列或迭代器对象的每个元素上，并返回一个可迭代的map对象作为结果，其一般格式为： <code>map(function,iterable,…)</code>， 其中，function为被调用函数，iterable为一个或多个序列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="keyword">return</span> x ** <span class="number">3</span></span><br><span class="line">a=<span class="built_in">list</span>(<span class="built_in">map</span>(cube,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))<span class="comment"># [1, 8, 27, 64, 125]</span></span><br><span class="line"><span class="built_in">print</span>(a[:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">b=<span class="built_in">list</span>(<span class="built_in">map</span>(add,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]))</span><br><span class="line"><span class="built_in">print</span>(b[:])<span class="comment"># [3, 7, 11, 15, 19]</span></span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>(<span class="string">&quot;请输入两个数(用空格隔开): &quot;</span>).split())  <span class="comment"># 请输入两个数(用空格隔开): 1 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = %d, b = %d.&quot;</span>%(a,b))<span class="comment"># a = 1, b = 2</span></span><br></pre></td></tr></table></figure><h4>🚀 filter()函数</h4><blockquote><p><code>filter()</code>函数用于过滤掉不符合条件的元素，返回一个迭代器对象，其一般格式为：<code>filter(function,iterable)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">IsEvenFunc</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">a=<span class="built_in">list</span>(<span class="built_in">filter</span>(IsEvenFunc,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]))</span><br><span class="line"><span class="built_in">print</span>(a[:])<span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h4>🚀 zip()函数</h4><blockquote><p><code>zip()</code>函数接收任意多个可迭代对象作为参数，将对象中对应的元素<strong>打包成一个元组</strong>，然后返回一个可迭代的zip对象，其一般格式为：<code>zip([iterable,...])</code>,iterable为一个或多个迭代器。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="string">&quot;泰山&quot;</span>,<span class="string">&quot;黄山&quot;</span>,<span class="string">&quot;庐山&quot;</span>,<span class="string">&quot;华山&quot;</span>],[<span class="string">&quot;山东&quot;</span>,<span class="string">&quot;安徽&quot;</span>,<span class="string">&quot;江西&quot;</span>,<span class="string">&quot;陕西&quot;</span>])) </span><br><span class="line"><span class="built_in">print</span>(a[:])<span class="comment"># [(&#x27;泰山&#x27;, &#x27;山东&#x27;), (&#x27;黄山&#x27;, &#x27;安徽&#x27;), (&#x27;庐山&#x27;, &#x27;江西&#x27;), (&#x27;华山&#x27;, &#x27;陕西&#x27;)]</span></span><br><span class="line">z = <span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])                                                              </span><br><span class="line">c,d=<span class="built_in">list</span>(<span class="built_in">zip</span>(*z))                                                                      </span><br><span class="line"><span class="built_in">print</span>(c[:],d[:])<span class="comment"># (1, 2, 3) (4, 5, 6)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>*zip[iterable]</code>表示将元素解压开</p></blockquote><h4>🚀 枚举函数enumerate()</h4><blockquote><p>枚举函数<code>enumerate()</code>用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，其一般格式为：<code>enumerate(sequence,[start = 0])</code>，sequence：一个序列、迭代器或其他支持的迭代对象。start：下标起始位置，可选</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weeks = [<span class="string">&#x27;Sunday&#x27;</span>,<span class="string">&#x27;Monday&#x27;</span>,<span class="string">&#x27;Tuesday&#x27;</span>,<span class="string">&#x27;Wednesday&#x27;</span>,<span class="string">&#x27;Thursday&#x27;</span>,<span class="string">&#x27;Friday&#x27;</span>,<span class="string">&#x27;Saturday&#x27;</span>]</span><br><span class="line">a=<span class="built_in">list</span>(<span class="built_in">enumerate</span>(weeks))</span><br><span class="line"><span class="built_in">print</span>(a[:])</span><br><span class="line"><span class="comment"># [(0, &#x27;Sunday&#x27;), (1, &#x27;Monday&#x27;), (2, &#x27;Tuesday&#x27;), (3, &#x27;Wednesday&#x27;), (4, &#x27;Thursday&#x27;),</span></span><br><span class="line"> (<span class="number">5</span>, <span class="string">&#x27;Friday&#x27;</span>), (<span class="number">6</span>, <span class="string">&#x27;Saturday&#x27;</span>)]</span><br></pre></td></tr></table></figure><h2 id="2-7-典型案例"><a href="#2-7-典型案例" class="headerlink" title="2.7 典型案例"></a>2.7 典型案例</h2><h3>🚀 2.7.1 计算复杂算术运算表达式的值 </h3><blockquote><p>计算算术运算表达式</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = math.sin(<span class="number">45</span> * <span class="number">3.1415926</span> / <span class="number">180</span>)      <span class="comment">#计算sin45°.</span></span><br><span class="line">b = math.exp(<span class="number">2</span>)                       <span class="comment">#计算e2.</span></span><br><span class="line">c= math.log10(<span class="number">80</span>)                     <span class="comment">#计算log10(80).</span></span><br><span class="line">d = math.sqrt(<span class="number">18</span>)                      <span class="comment">#计算 .</span></span><br><span class="line"><span class="built_in">sum</span> = a + (b + c) / d                   <span class="comment">#计算整个表达式的值.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum = %8.6f&quot;</span>%<span class="built_in">sum</span>) <span class="comment">#sum = 2.897287</span></span><br></pre></td></tr></table></figure><h3>🚀 2.7.2 求几何面、几何7的(表)面积或体积 </h3><blockquote><p>计算圆锥体的表面积和体积</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math                              </span><br><span class="line">PI = math.pi                    </span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入圆锥体的半径: &quot;</span>))                         </span><br><span class="line">h = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入圆锥体的高: &quot;</span>))                        </span><br><span class="line">s1 = PI * r ** <span class="number">2</span>                  </span><br><span class="line">s2 = PI * r * math.sqrt(r ** <span class="number">2</span> + h ** <span class="number">2</span>) </span><br><span class="line">s = s1 + s2                     </span><br><span class="line">v = <span class="number">1</span>/<span class="number">3</span> * PI * r ** <span class="number">2</span> * h            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆锥体的表面积为: %6.2f&quot;</span>%s)                           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆锥体的体积为: %6.2f&quot;</span>%v)                              </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入圆锥体的半径: 3.0</span></span><br><span class="line"><span class="string">请输入圆锥体的高: 4.0</span></span><br><span class="line"><span class="string">圆锥体的表面积为: 75.36</span></span><br><span class="line"><span class="string">圆锥体的体积为: 37.70</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 2.7.3 解一元二次方程 </h3><blockquote><p>求方程2x^2^+3x+1&#x3D;0的根</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math                               </span><br><span class="line">a = <span class="number">2.0</span>                          </span><br><span class="line">b = <span class="number">3.0</span>                          </span><br><span class="line">c = <span class="number">1.0</span>                          </span><br><span class="line">pbs = b ** <span class="number">2</span> - <span class="number">4</span> * a * c             </span><br><span class="line">x1 = (-b + math.sqrt(pbs)) / (<span class="number">2</span> * a)</span><br><span class="line">x2 = (-b - math.sqrt(pbs)) / (<span class="number">2</span> * a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1 =&quot;</span>,x1)     <span class="comment"># x1 = -0.5                 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x2 =&quot;</span>,x2)     <span class="comment"># x2 = -1.0                       </span></span><br></pre></td></tr></table></figure><h3>🚀 2.7.4 验证码验 </h3><blockquote><p>编程实现验证码验证</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>       </span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">str</span>.__len__()             </span><br><span class="line">yzm = <span class="string">&quot;&quot;</span>                                                  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  yzm = yzm + <span class="built_in">str</span>[random.randint(<span class="number">0</span>,<span class="built_in">len</span>-<span class="number">1</span>)]    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前验证码:&quot;</span>,yzm)                                    </span><br><span class="line">yzmInput = <span class="built_in">input</span>(<span class="string">&quot;请输入验证码: &quot;</span>)                             </span><br><span class="line"><span class="keyword">if</span> yzm == yzmInput:            </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;验证通过！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;验证失败！&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">当前验证码: aiFh</span></span><br><span class="line"><span class="string">请输入验证码:aiFh</span></span><br><span class="line"><span class="string">验证通过！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.3.23 下午</h1><h1 id="3-程序设计结构"><a href="#3-程序设计结构" class="headerlink" title="3 程序设计结构"></a>3 程序设计结构</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><blockquote><p>python与C++，java一样，按照设计方法的不同，计算机程序设计也有<strong>面向对象程序设计和面向过程程序设计</strong></p></blockquote><blockquote><p>首先样子先来学习<code>if...else...</code>,<code>while</code>…结构化程序有三种基本结构：<strong>顺序结构、选择结构和循环结构</strong></p><ul><li><strong>顺序结构：</strong>程序由上到下依次执行每条语句</li><li><strong>选择结构：</strong>程序判断某个条件是否成立，决定执行哪部分代码</li><li><strong>循环结构：</strong>程序判断某个条件是否成立，决定是否重复执行某部分代码</li></ul></blockquote><h2 id="3-2-顺序结构"><a href="#3-2-顺序结构" class="headerlink" title="3.2 顺序结构"></a>3.2 顺序结构</h2><blockquote><p>在程序的顺序结构中，依次执行程序代码的各条语句</p></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8007.png" alt="Python语言基础07" style="zoom:33%;" /><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c) <span class="comment">#c=11</span></span><br></pre></td></tr></table></figure><h2 id="3-3-选择结构"><a href="#3-3-选择结构" class="headerlink" title="3.3 选择结构"></a>3.3 选择结构</h2><h3>🚀 3.3.1 单分支结构 </h3><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8008.png" alt="Python语言基础08" style="zoom:50%;" /><blockquote><p>单分支结构可用if单分支语句实现，其一般格式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line"> 语句块 </span><br></pre></td></tr></table></figure></blockquote><blockquote><p>语句的执行过程是：如果表达式的值为True，则执行语句中的语句块；否则，直接执行if语句的后续语句</p><ul><li>if语句中的语句块可以包含单个语句或多个语句</li><li>如果语句块中只有一条语句，可以写在<strong>同一行中</strong></li></ul></blockquote><blockquote><p>判断从键盘输入整数的奇偶性并输出结果</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">flag = <span class="built_in">str</span>(n) + <span class="string">&quot; 是偶数!&quot;</span></span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    flag = <span class="built_in">str</span>(n) + <span class="string">&quot; 是奇数!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入一个整数: 3</span></span><br><span class="line"><span class="string">3 是奇数!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>从键盘输入两个整数，然后按照从大到小的顺序输出这两个数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    x,y = y,x</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d, %d&quot;</span>%(x,y))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入一个整数: 382</span></span><br><span class="line"><span class="string">请输入一个整数: 401</span></span><br><span class="line"><span class="string">401, 382</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.3.2 二分支结构 </h3><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8009.png" alt="Python语言基础09" style="zoom:50%;" /><blockquote><p>二分支结构可用if二分支语句实现，其一般格式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">  语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  语句块<span class="number">2</span></span><br></pre></td></tr></table></figure><p>语句执行过程是：如果表达式的值为True时，则执行语句块1；否则，执行语句块2</p></blockquote><blockquote><p>求两个数中较大的数并输出</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="built_in">max</span> = a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">max</span> = b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max =&quot;</span>,<span class="built_in">max</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">max = 6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>根据输入的x，求分段函数y的值</p></blockquote><p>$$<br>\begin{cases}<br>e^{x-1} &amp;x&lt;2\<br>log_2(x^2-1)&amp;x≥2\<br>\end{cases}<br>$$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> exp,log</span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入x的值: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">2.0</span>:</span><br><span class="line">  y = <span class="number">2</span> * exp(x-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  y = log(x ** <span class="number">2</span> - <span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y =%9.6f.&quot;</span>%y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入x的值: 1.5</span></span><br><span class="line"><span class="string">y = 3.297443.</span></span><br><span class="line"><span class="string">运行结果2：</span></span><br><span class="line"><span class="string">请输入x的值: 3.0</span></span><br><span class="line"><span class="string">y = 1.892789.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.3.3 多分支结构 </h3><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8010.png" alt="Python语言基础10" style="zoom: 33%;" /><blockquote><p>多分支结构可用<code>if</code>多分支语句实现，其一般格式为(注意python中的<code>elseif</code>没有空格)：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>: </span><br><span class="line">语句块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span>表达式<span class="number">2</span>: </span><br><span class="line">语句块<span class="number">2</span></span><br><span class="line">…</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">语句块n+<span class="number">1</span>]</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>使用if多分支语句判别键盘输入成绩等级并输出</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入成绩: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;成绩等级: 优秀！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;成绩等级: 良好！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;成绩等级: 合格！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;成绩等级: 不合格！&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用if多分支语句实现简单的算术运算</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, op, y = <span class="built_in">input</span>(<span class="string">&quot;请输入操作数和操作符: &quot;</span>).split()</span><br><span class="line"><span class="keyword">if</span> op == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">    z = <span class="built_in">float</span>(x) + <span class="built_in">float</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行结果:&quot;</span>, x, op, y, <span class="string">&quot;=&quot;</span>, z)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">    z = <span class="built_in">float</span>(x) - <span class="built_in">float</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行结果:&quot;</span>, x, op, y, <span class="string">&quot;=&quot;</span>, z)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">    z = <span class="built_in">float</span>(x) * <span class="built_in">float</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行结果:&quot;</span>, x, op, y, <span class="string">&quot;=&quot;</span>, z)</span><br><span class="line"><span class="keyword">elif</span> op == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">    z = <span class="built_in">float</span>(x) / <span class="built_in">float</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行结果:&quot;</span>, x, op, y, <span class="string">&quot;=&quot;</span>, z)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入的运算符不支持!请重新输入！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请输入操作数和操作符: 38.0 + 107.0</span></span><br><span class="line"><span class="string">38.0 + 107.0 = 145.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.3.4 条件运算 </h3><blockquote><p>条件运算相当于一个<strong>二分支</strong>结构语句的功能，包含三个表达式，其一般格式为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span> <span class="keyword">if</span> 表达式 <span class="keyword">else</span> 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><p>条件运算的执行过程是：如果if后面的表达式值为True，则以表达式1的值为条件运算的结果；否则，以表达式2的值为条件运算的结果</p></blockquote><blockquote><p>判断从键盘输入的学生成绩是否合格</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入学生成绩: &quot;</span>))</span><br><span class="line">flag = <span class="string">&quot;合格&quot;</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> <span class="keyword">else</span> <span class="string">&quot;未合格&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成绩结果:&quot;</span>,flag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果1：</span></span><br><span class="line"><span class="string">请输入学生成绩: 96</span></span><br><span class="line"><span class="string">成绩结果: 合格</span></span><br><span class="line"><span class="string">运行结果2：</span></span><br><span class="line"><span class="string">请输入学生成绩: 38</span></span><br><span class="line"><span class="string">成绩结果: 未合格</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.3.5 选择结构嵌套 </h3><blockquote><p>求三个数中最大的数并输出</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> a &gt; b:</span><br><span class="line">    <span class="keyword">if</span> a &gt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最大的数是：&quot;</span>, a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最大的数是：&quot;</span>, c)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> b &gt; c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最大的数是：&quot;</span>, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最大的数是：&quot;</span>, c)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-4-循环结构"><a href="#3-4-循环结构" class="headerlink" title="3.4 循环结构"></a>3.4 循环结构</h2><h3>🚀 3.4.1 while语句</h3><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8011.png" alt="Python语言基础11" style="zoom: 33%;" /><blockquote><p>while 语句用于循环执行一段程序，<strong>一般来说使用在循环次数不确定！</strong>while语句的一般格式为:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    语句块</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">else</span>子句语句块]</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>使用while语句计算1～100的和</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span>   <span class="comment">#终止值.</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>   <span class="comment">#保存结果.</span></span><br><span class="line">i = <span class="number">1</span>  <span class="comment">#循环变量.</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= n:</span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 到 %d 之和为: %d.&quot;</span> % (n,<span class="built_in">sum</span>))    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1到100之和为: 5050.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用while-else语句求$\sum_{10}^{i&#x3D;1} i!$</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mul = <span class="number">1</span>; i = <span class="number">1</span>; <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">10</span>:</span><br><span class="line">  mul = mul * i         <span class="comment">#计算阶乘.</span></span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span> + mul <span class="comment">#计算和.</span></span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;循环结束！&quot;</span>)<span class="comment">#结束循环提示.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum =&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">循环结束！</span></span><br><span class="line"><span class="string">sum = 4037913</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>🚁 while语句块中的input()函数</p><p>通过键盘动态录入学生的英语成绩，输入-1退出录入成绩，并计算录入学生英语成绩的人数、总分和平均分</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = <span class="number">0</span>;</span><br><span class="line">ave = <span class="number">0</span>;</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入学生英语成绩：&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> score != -<span class="number">1</span>:</span><br><span class="line">    total = total + score</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入学生英语成绩：&quot;</span>))</span><br><span class="line">ave = total / count</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入学生英语成绩 %d 份, 学生英语总成绩 %d, 平均成绩 %4.2f.&quot;</span> % (count, total, ave))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入学生英语成绩：98</span></span><br><span class="line"><span class="string">请输入学生英语成绩：85</span></span><br><span class="line"><span class="string">请输入学生英语成绩：86</span></span><br><span class="line"><span class="string">请输入学生英语成绩：-1</span></span><br><span class="line"><span class="string">录入学生英语成绩 3 份, 学生英语总成绩 269, 平均成绩 89.67.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>完善，因为分数不能是负数或者无限大，在逻辑上是不对的</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = <span class="number">0</span>;</span><br><span class="line">ave = <span class="number">0</span>;</span><br><span class="line">score=<span class="number">0</span></span><br><span class="line">person = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入班级人数&quot;</span>))</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;person:</span><br><span class="line">    score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入学生英语成绩：&quot;</span>))</span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> flag==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> score&gt;<span class="number">100</span> <span class="keyword">or</span> score&lt;<span class="number">0</span>:</span><br><span class="line">            score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入有误,请重新输入&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">    total = total + score</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">ave = total / person</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;录入学生英语成绩 %d 份, 学生英语总成绩 %d, 平均成绩 %4.2f.&quot;</span> % (person, total, ave))</span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.3.30 下午</h1><h3>🚀 3.4.2 for语句</h3><blockquote><p> 在Python中，for语句更适合循环访问系列或迭代对象(如字符串、列表、元组、字典等)中的元素，常用在循环次数确定的循环体种，其一般格式为</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列或迭代对象:</span><br><span class="line">语句块</span><br><span class="line">[<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>子句语句块]</span><br></pre></td></tr></table></figure></blockquote><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8012.png" alt="Python语言基础12" style="zoom:33%;" /><blockquote><p>使用for语句遍历列表中的元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Python&#x27;</span>:</span><br><span class="line">  <span class="built_in">print</span>(letter, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">chemists = [<span class="string">&#x27;道尔顿&#x27;</span>, <span class="string">&#x27;门捷列夫&#x27;</span>, <span class="string">&#x27;拉瓦锡&#x27;</span>, <span class="string">&#x27;诺贝尔&#x27;</span>]   <span class="comment">#世界著名化学家.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;化学家:&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> hxj <span class="keyword">in</span> chemists:</span><br><span class="line">  <span class="built_in">print</span>(hxj, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P y t h o n </span></span><br><span class="line"><span class="string">化学家: 道尔顿 门捷列夫 拉瓦锡 诺贝尔</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用for-else语句遍历元组中的元素并在结束后给出提示信息</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mathematicians = (<span class="string">&#x27;阿基米德&#x27;</span>,<span class="string">&#x27;牛顿&#x27;</span>,<span class="string">&#x27;高斯&#x27;</span>,<span class="string">&#x27;庞加莱&#x27;</span>)       　</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学家:&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> sxj <span class="keyword">in</span> mathematicians:</span><br><span class="line">  <span class="built_in">print</span>(sxj, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;\n提示: 元组遍历完毕！&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数学家: 阿基米德 牛顿 高斯 庞加莱 </span></span><br><span class="line"><span class="string">提示: 元组遍历完毕！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>🚁 for语句中的range()函数</p><p>在for语句中使用range()函数控制循环次数(range是0-2)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">universities = [<span class="string">&quot;哈佛大学&quot;</span>,<span class="string">&quot;斯坦福大学&quot;</span>,<span class="string">&quot;剑桥大学&quot;</span>,<span class="string">&quot;麻省理工学院&quot;</span>,<span class="string">&quot;加州大学-伯 </span></span><br><span class="line"><span class="string">    克利&quot;</span>,<span class="string">&quot;普林 斯顿大学&quot;</span>,<span class="string">&quot;牛津大学&quot;</span>,<span class="string">&quot;哥伦比亚大学&quot;</span>,<span class="string">&quot;加州理工学院&quot;</span>,<span class="string">&quot;芝加哥大学&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2017《Times》世界大学排名前3的大学是:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;.&quot;</span>,universities[i])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2017《Times》世界大学排名前3的大学是:</span></span><br><span class="line"><span class="string">1. 哈佛大学</span></span><br><span class="line"><span class="string">2. 斯坦福大学</span></span><br><span class="line"><span class="string">3. 剑桥大学</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>求1～20范围内能被3整除的所有数的和</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过设置range()函数的步长为3实现。</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>                                           </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>,<span class="number">3</span>):  </span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span> + i          </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sum =&#x27;</span>,<span class="built_in">sum</span>)     </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sum = 63</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过判断该数除以3的余数是否为0实现。</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>                     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):   </span><br><span class="line">  <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:       </span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + i    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sum =&#x27;</span>,<span class="built_in">sum</span>)         </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sum = 63</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.4.3 break语句、continue语句和pass语句</h3><blockquote><ul><li><strong>break语句：</strong>退出循环</li><li><strong>continue语句：</strong>跳过该次循环</li><li><strong>pass：</strong>空语句(不做任何处理)</li></ul><p>通过上述3种语句，可以控制循环的执行和保持程序结构的完整</p></blockquote><blockquote><p>输出斐波那契数列前10项，斐波那契公式:F(i)&#x3D;F(i-1)+F(i-2),F(1)&#x3D;F(2)&#x3D;1</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1 = <span class="number">1</span>                       <span class="comment">#第1项</span></span><br><span class="line">n2 = <span class="number">1</span>                       <span class="comment">#第2项</span></span><br><span class="line">count = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;斐波那契数列前10项为:&quot;</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(n1,n2,end=<span class="string">&quot; &quot;</span>)  <span class="comment">#输出前2项.</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">10</span>:         <span class="comment">#如果已经输出前10项.</span></span><br><span class="line">        <span class="keyword">break</span>               <span class="comment">#跳出循环</span></span><br><span class="line">    nth = n1 + n2           <span class="comment">#计算下一项.</span></span><br><span class="line">    <span class="built_in">print</span>(nth,end=<span class="string">&quot; &quot;</span>)  <span class="comment">#输出第count+1项.</span></span><br><span class="line">    n1 = n2</span><br><span class="line">    n2 = nth</span><br><span class="line">    count += <span class="number">1</span>                                  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">斐波那契数列前10项为:1 1 2 3 5 8 13 21 34 55 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>求1～10范围内所有偶数的和</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span>; n = <span class="number">10</span>; <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= n:</span><br><span class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:           <span class="comment">#i为奇数，跳过.</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span>               <span class="comment">#使用continue跳出本次循环.</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="built_in">sum</span> + i</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum =&quot;</span>,<span class="built_in">sum</span>)                                     </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sum = 30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>验证客户的股票抽签号是否中签。中签的股票抽签号以88开头且8位</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stockNum = <span class="built_in">input</span>(<span class="string">&quot;请输入您的股票抽签号：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> stockNum.startswith(<span class="string">&quot;88&quot;</span>) <span class="keyword">and</span> stockNum.__len__() == <span class="number">8</span>: </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;恭喜您，中签了！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">pass</span>                    <span class="comment">#pass空语句, 不做任何处理.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入您的8位股票抽签号：88613042</span></span><br><span class="line"><span class="string">恭喜您，中签了！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 3.4.4 循环结构嵌套</h3><blockquote><p>输出元素为”*”、5行5列的左下角直角三角形</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):                 <span class="comment">#外循环次数: 5.</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):            <span class="comment">#内循环次数: 5.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&#x27;  &#x27;</span>)         <span class="comment">#输出 &quot;*&quot;.</span></span><br><span class="line">  <span class="built_in">print</span>()                          <span class="comment">#换行.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">* </span></span><br><span class="line"><span class="string">*  * </span></span><br><span class="line"><span class="string">*  *  * </span></span><br><span class="line"><span class="string">*  *  *  * </span></span><br><span class="line"><span class="string">*  *  *  *  *</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出对角线元素为1的4行4列矩阵</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):                   <span class="comment">#行数为4</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):                 <span class="comment">#列数为4</span></span><br><span class="line">    <span class="keyword">if</span> i == j <span class="keyword">or</span> i + j == <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>,end=<span class="string">&#x27;  &#x27;</span>)               <span class="comment">#输出1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>,end=<span class="string">&#x27;  &#x27;</span>)               <span class="comment">#输出0</span></span><br><span class="line">  <span class="built_in">print</span>()                             <span class="comment">#换行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1  0  0  1  </span></span><br><span class="line"><span class="string">0  1  1  0  </span></span><br><span class="line"><span class="string">0  1  1  0  </span></span><br><span class="line"><span class="string">1  0  0  1 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-典型案例"><a href="#3-5-典型案例" class="headerlink" title="3.5 典型案例"></a>3.5 典型案例</h2><h3>🚀 计算部分级数和</h3><p>$$1+\frac{1}{1!}+\frac{1}{2!}+\frac{1}{3!}+…+\frac{1}{n!}&#x3D;1+\sum_{1 }^{\infty }\frac{1}{i!}$$，最后一项精度为0.00001</p><blockquote><p><code>while</code>实现</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span>; <span class="built_in">sum</span> = <span class="number">1</span>; n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> / n &gt;= <span class="number">0.00001</span>:</span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="number">1</span> / n                   </span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  n = n * i                                    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum =&quot;</span>, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>for</code>实现</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">1</span>; n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">  n = n * i                                     </span><br><span class="line">  <span class="keyword">if</span> <span class="number">1</span> / n &gt;= <span class="number">0.00001</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + <span class="number">1</span> / n                         </span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum =&quot;</span>,<span class="built_in">sum</span>)              </span><br></pre></td></tr></table></figure><h3>🚀 使用选择结构计算员工工资</h3><blockquote><p>某公司员工的工资计算方法为：</p><ol><li>月工时数在120～180内，每小时按80元计算</li><li>月工时数超过180，超过部分加发20%</li><li>月工时数低于120，扣发10%</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ygss = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入月工时数: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> ygss &gt; <span class="number">180</span>:</span><br><span class="line">  ygz = <span class="number">80</span> * ygss + (ygss - <span class="number">180</span>) * <span class="number">80</span> * <span class="number">0.2</span></span><br><span class="line"><span class="keyword">elif</span> ygss &gt;= <span class="number">120</span> <span class="keyword">and</span> ygss &lt;= <span class="number">180</span>:</span><br><span class="line">  ygz = <span class="number">80</span> * ygss</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  ygz = <span class="number">80</span> * ygss * (<span class="number">1</span>-<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您这个月的工资为: %.2f元.&quot;</span>%ygz)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入月工时数: 200</span></span><br><span class="line"><span class="string">您这个月的工资为: 16320.00元</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 用递推法求解实际问题</h3><blockquote><p> 猴子吃桃问题。一只猴子一天摘了若干个桃子。</p><p> 第1天，猴子吃了一半多一个<br> 第2天，猴子吃了剩下的一半多1个<br> 以后每天吃了剩下的一半多1个<br> 在第5天早上要吃时发现只剩下1个了<br> 问：猴子最初摘了多少个桃子？</p></blockquote><blockquote><p> 分析：这是一个迭代问题。先由最后1天剩下的桃子数推出倒数第2天的桃子数，再从倒数第2天推出倒数第3天的桃子数……<br> $$<br> \begin{cases}<br> x_{n}&#x3D;\frac{1}{2}x_{n-1}-1 \<br> x_{n-1}&#x3D;(x_{n}+1)\times 2 \<br> \end{cases}<br> $$</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>                       <span class="comment">#最后一天的桃子数.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第 5 天的桃子数: %d.&quot;</span>%x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">1</span>,-<span class="number">1</span>):     <span class="comment">#循环次数为4.</span></span><br><span class="line">  x = (x + <span class="number">1</span>) * <span class="number">2</span>           <span class="comment">#计算前1天的桃子数.</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;第 %d 天的桃子数: %d.&quot;</span>%(i-<span class="number">1</span>,x))<span class="comment">#输出每天的桃子数.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第 5 天的桃子数: 1.</span></span><br><span class="line"><span class="string">第 4 天的桃子数: 4.</span></span><br><span class="line"><span class="string">第 3 天的桃子数: 10.</span></span><br><span class="line"><span class="string">第 2 天的桃子数: 22.</span></span><br><span class="line"><span class="string">第 1 天的桃子数: 46.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 “试凑法”解方程</h3><blockquote><p>古代数学中的百元百鸡问题。假定公鸡2元&#x2F;只，母鸡3元&#x2F;只，小鸡0.5元&#x2F;只。现有100元，要求买100只鸡，编程列出所有可能的购鸡方案<br>分析：根据题意，设公鸡、母鸡和小鸡各为x只、y只和z只，列出方程组为：</p></blockquote><p>$$<br>\begin{cases}<br>x + y +  z&#x3D;100 \<br>2x + 3y + 0.5z&#x3D;100 \<br>\end{cases}<br>$$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">51</span>): <span class="comment">#x为公鸡数，100元最多买50只.</span></span><br><span class="line">  <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):       <span class="comment">#y为母鸡数，100元最多买33只.</span></span><br><span class="line">    z = <span class="number">100</span> - x - y<span class="comment">#z为小鸡数.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * x + <span class="number">3</span> * y + <span class="number">0.5</span> * z == <span class="number">100</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;公鸡 %d 只，母鸡 %d 只，小鸡 %d 只.&quot;</span>%(x,y,z))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">公鸡 0 只，母鸡 20 只，小鸡 80 只.</span></span><br><span class="line"><span class="string">公鸡 5 只，母鸡 17 只，小鸡 78 只.</span></span><br><span class="line"><span class="string">公鸡 10 只，母鸡 14 只，小鸡 76 只.</span></span><br><span class="line"><span class="string">公鸡 15 只，母鸡 11 只，小鸡 74 只.</span></span><br><span class="line"><span class="string">公鸡 20 只，母鸡 8 只，小鸡 72 只.</span></span><br><span class="line"><span class="string">公鸡 25 只，母鸡 5 只，小鸡 70 只.</span></span><br><span class="line"><span class="string">公鸡 30 只，母鸡 2 只，小鸡 68 只.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 计算机猜数</h3><blockquote><p>利用计算机程序做猜数字游戏：计算机程序产生一个[1, 100]范 围的随机整数key；用户输入猜数x<br>计算机程序根据下列3种猜数情况做出提示：</p><ol><li>x &gt; key：猜大了</li><li>x &lt; key：猜小了</li><li>x &#x3D;&#x3D; key：猜对了</li></ol><p>在程序执行时，如果用户5次还没有猜中就结束游戏程序，并公布正确答案。<br>分析：计算机猜数是计算机二分查找算法的一种应用。基本方法是折半处理，即将要查找的范围每次缩小一半</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">key = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------猜数字游戏开始！-----&#x27;</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入数字: &#x27;</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> x &gt; key:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您猜的数字大了！&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; key:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;您猜的数字小了！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;恭喜您，猜对了！&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> count &gt;= <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;很遗憾，您没猜中！生成数字是: %d.&#x27;</span> % key)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入数字: &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----游戏结束，再见！^_^----&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入数字: 50</span></span><br><span class="line"><span class="string">您猜的数字大了！</span></span><br><span class="line"><span class="string">请输入数字: 24</span></span><br><span class="line"><span class="string">您猜的数字大了！</span></span><br><span class="line"><span class="string">请输入数字: 12</span></span><br><span class="line"><span class="string">您猜的数字小了！</span></span><br><span class="line"><span class="string">请输入数字: 17</span></span><br><span class="line"><span class="string">您猜的数字大了！</span></span><br><span class="line"><span class="string">请输入数字: 14</span></span><br><span class="line"><span class="string">您猜的数字小了！</span></span><br><span class="line"><span class="string">很遗憾，您没猜中！生成数字是: 16.</span></span><br><span class="line"><span class="string">----游戏结束，再见！^_^----</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3>🚀 模拟自动饮料机</h3><blockquote><p>编程实现模拟自动饮料机功能：</p><ol><li>当输入数字0时，模拟自动饮料机停止运行</li><li>当输入数字1～5时，模拟自动饮料机给出对应的饮料</li><li>当输入其他数字时，模拟自动饮料机给出非法操作信息，并提示用户重新输入</li></ol></blockquote><blockquote><p>分析：<br>正常情况下，模拟自动饮料机一直运行，输入不同的数字，对应不同的饮料<br>只有当出现故障或需要添加饮料时才停止运行<br>可以采用在<code>while</code>语句中嵌套<code>if-elif-else</code>多分支语句实现程序功能</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">投币 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请投币: &quot;</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> 投币 == <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;叮咚: 设备停止工作！&quot;</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elif</span> 投币 == <span class="number">1</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;冰露纯净水&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> 投币 == <span class="number">2</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;农夫山泉矿泉水&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> 投币 == <span class="number">3</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;冰红茶&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> 投币 == <span class="number">4</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;脉动&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> 投币==<span class="number">5</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;红牛&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      叮咚 = <span class="string">&quot;投币错误！已退回&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;叮咚:&quot;</span>,叮咚)</span><br><span class="line">    投币 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请投币: &quot;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请投币: 1</span></span><br><span class="line"><span class="string">叮咚: 冰露纯净水</span></span><br><span class="line"><span class="string">请投币: 2</span></span><br><span class="line"><span class="string">叮咚: 农夫山泉矿泉水</span></span><br><span class="line"><span class="string">请投币: 3</span></span><br><span class="line"><span class="string">叮咚: 冰红茶</span></span><br><span class="line"><span class="string">请投币: 4</span></span><br><span class="line"><span class="string">叮咚: 脉动</span></span><br><span class="line"><span class="string">请投币: 5</span></span><br><span class="line"><span class="string">叮咚: 红牛</span></span><br><span class="line"><span class="string">请投币: 6</span></span><br><span class="line"><span class="string">叮咚: 投币错误！已退回...</span></span><br><span class="line"><span class="string">请投币: 0</span></span><br><span class="line"><span class="string">叮咚: 设备停止工作！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.04.06 下午</h1><h1 id="4-组合数据"><a href="#4-组合数据" class="headerlink" title="4 组合数据"></a>4 组合数据</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><blockquote><p>Python中的组合数据类似于其他编程语言中的数组等，但类型更多、功能更强大。<br>在Python中，除字符串外，组合数据主要包括列表、元组、集合和字典等</p></blockquote><table><thead><tr><th>数据类型</th><th>数据示例</th></tr></thead><tbody><tr><td>列表</td><td>{0,2,4,8,12}</td></tr><tr><td>元组</td><td>(‘Google’, ‘Runoob’, 1997, 2000)</td></tr><tr><td>字典</td><td>{‘name’: ‘runoob’, ‘likes’: 123, ‘url’: ‘<a href="http://www.csdn.net&/#39;}">www.csdn.net&#39;}</a></td></tr><tr><td>集合</td><td>{‘Taobao’, ‘Facebook’, ‘Google’, ‘Youtube’}</td></tr></tbody></table><h2 id="4-2-列表"><a href="#4-2-列表" class="headerlink" title="4.2 列表"></a>4.2 列表</h2><h3 id="4-2-1-列表创建"><a href="#4-2-1-列表创建" class="headerlink" title="4.2.1 列表创建"></a>4.2.1 列表创建</h3><blockquote><ul><li>列表(List)是写在方括号 <code>[]</code> 之间、用<code>,</code>隔开的元素集合</li><li>列表中的元素可以是零个或多个,只有零个元素的列表称为空列表[]</li><li>列表中的元素可以相同，也可以不相同</li><li>列表中的元素可以类型相同</li><li>同字符串类似，列表支持元素的双向索引</li></ul></blockquote><h4>🚀 语法</h4><blockquote><p>使用[]运算符创建列表，<code>列表名 ＝ [元素1,元素2,元素3,…]</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []                              </span><br><span class="line">list2 = [<span class="number">1.25</span>,<span class="number">21.06</span>,<span class="number">0.3</span>,<span class="number">4.7</span>,<span class="number">58.1</span>]        </span><br><span class="line">list3 = [<span class="string">&quot;石油&quot;</span>,<span class="string">&quot;汽车&quot;</span>,<span class="string">&quot;建筑&quot;</span>,<span class="string">&quot;IT&quot;</span>]         </span><br><span class="line">list4 = [<span class="string">&#x27;Alice&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;Beth&#x27;</span>,<span class="number">19</span>]</span><br></pre></td></tr></table></figure><blockquote><p>使用list()函数创建列表，<code>列表名 = list(sequence)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>()                           </span><br><span class="line"><span class="built_in">list</span>((<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;杜甫&quot;</span>,<span class="string">&quot;白居易&quot;</span>))     </span><br><span class="line">[<span class="string">&#x27;李白&#x27;</span>, <span class="string">&#x27;杜甫&#x27;</span>, <span class="string">&#x27;白居易&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="string">&quot;CSDN张时贰&quot;</span>)            </span><br><span class="line">[<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;张&#x27;</span>, <span class="string">&#x27;时&#x27;</span>, <span class="string">&#x27;贰&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))          </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="4-2-2-列表访问"><a href="#4-2-2-列表访问" class="headerlink" title="4.2.2 列表访问"></a>4.2.2 列表访问</h3><h4 id="访问列表"><a href="#访问列表" class="headerlink" title="访问列表"></a>访问列表</h4><h4>🚀 访问列表及元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">carList = [<span class="string">&quot;奔驰&quot;</span>,<span class="string">&quot;大众&quot;</span>,<span class="string">&quot;福特&quot;</span>,<span class="string">&quot;宝马&quot;</span>,<span class="string">&quot;奥迪&quot;</span>,<span class="string">&quot;雪佛兰&quot;</span>] <span class="comment">#汽车品牌.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList:&quot;</span>,carList)</span><br><span class="line">carList: [<span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;大众&#x27;</span>, <span class="string">&#x27;福特&#x27;</span>, <span class="string">&#x27;宝马&#x27;</span>, <span class="string">&#x27;奥迪&#x27;</span>, <span class="string">&#x27;雪佛兰&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[2]:&quot;</span>,carList[<span class="number">2</span>])<span class="comment">#carList[2]: 福特</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[-1]:&quot;</span>,carList[-<span class="number">1</span>])<span class="comment">#carList[-1]: 雪佛兰</span></span><br></pre></td></tr></table></figure><h4>🚀 列表切片</h4><blockquote><p>与<code>range()</code>函数类似，[起点:终点:步长]</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">carList = [<span class="string">&quot;奔驰&quot;</span>,<span class="string">&quot;大众&quot;</span>,<span class="string">&quot;福特&quot;</span>,<span class="string">&quot;宝马&quot;</span>,<span class="string">&quot;奥迪&quot;</span>,<span class="string">&quot;雪佛兰&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[2:5]:&quot;</span>,carList[<span class="number">2</span>:<span class="number">5</span>])<span class="comment">#carList[2:5]: [&#x27;福特&#x27;, &#x27;宝马&#x27;, &#x27;奥迪&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[2:5:2]:&quot;</span>,carList[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>])<span class="comment">#carList[2:5:2]: [&#x27;福特&#x27;, &#x27;奥迪&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[:]:&quot;</span>,carList[:])<span class="comment">#carList[:]: [&#x27;奔驰&#x27;, &#x27;大众&#x27;, &#x27;福特&#x27;, &#x27;宝马&#x27;, &#x27;奥迪&#x27;, &#x27;雪佛兰&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[:5]:&quot;</span>,carList[:<span class="number">5</span>])<span class="comment">#carList[:5]: [&#x27;奔驰&#x27;, &#x27;大众&#x27;, &#x27;福特&#x27;, &#x27;宝马&#x27;, &#x27;奥迪&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[3:]:&quot;</span>,carList[<span class="number">3</span>:])<span class="comment">#carList[3:]: [&#x27;宝马&#x27;, &#x27;奥迪&#x27;, &#x27;雪佛兰&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;carList[2:-1]:&quot;</span>,carList[<span class="number">2</span>:-<span class="number">1</span>])<span class="comment">#carList[2:-1]: [&#x27;福特&#x27;, &#x27;宝马&#x27;, &#x27;奥迪&#x27;]</span></span><br></pre></td></tr></table></figure><h4>🚀 遍历列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">carList = [<span class="string">&quot;奔驰&quot;</span>,<span class="string">&quot;大众&quot;</span>,<span class="string">&quot;福特&quot;</span>,<span class="string">&quot;宝马&quot;</span>,<span class="string">&quot;奥迪&quot;</span>,<span class="string">&quot;雪佛兰&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;世界汽车品牌:&quot;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> carList:</span><br><span class="line">  <span class="built_in">print</span>(car,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#世界汽车品牌: 奔驰 大众 福特 宝马 奥迪 雪佛兰</span></span><br></pre></td></tr></table></figure><h4 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h4><blockquote><p>列表创建后，可以使用列表函数或切片为列表添加新的元素</p><p><code>list.append(newItem)</code> 在列表末尾添加新元素<br><code>list.insert(index, newItem)</code>在索引为index的位置插入新元素<br><code>list.extend(seq)</code>在列表末尾添加迭代对象seq中的所有元素作为列表新元素<br><code>list[len(list):] = newList</code>使用切片在列表list末尾添加新元素(newList中的元素)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">firsttier_city_list = [<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;广州&quot;</span>,<span class="string">&quot;深圳&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(firsttier_city_list[:])<span class="comment">#[&#x27;北京&#x27;,&#x27;上海&#x27;,&#x27;广州&#x27;,&#x27;深圳&#x27;]</span></span><br><span class="line">firsttier_city_list.append(<span class="string">&quot;成都&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(firsttier_city_list[:])<span class="comment">#[&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;广州&#x27;, &#x27;深圳&#x27;, &#x27;成都&#x27;]</span></span><br><span class="line">firsttier_city_list.insert(<span class="number">2</span>,<span class="string">&quot;杭州&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(firsttier_city_list[:])<span class="comment">#[&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;杭州&#x27;, &#x27;广州&#x27;, &#x27;深圳&#x27;, &#x27;成都&#x27;]</span></span><br><span class="line">firsttier_city_list.extend([<span class="string">&quot;重庆&quot;</span>,<span class="string">&quot;武汉&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(firsttier_city_list[:])<span class="comment">#[&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;杭州&#x27;, &#x27;广州&#x27;, &#x27;深圳&#x27;, &#x27;成都&#x27;, &#x27;重庆&#x27;, &#x27;武汉&#x27;]</span></span><br><span class="line">firsttier_city_list[<span class="number">8</span>:] = [<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;郑州&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(firsttier_city_list[:])<span class="comment">#[&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;杭州&#x27;, &#x27;广州&#x27;, &#x27;深圳&#x27;, &#x27;成都&#x27;, &#x27;重庆&#x27;, &#x27;武汉&#x27;, &#x27;天津&#x27;, &quot;郑州&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h4><blockquote><p><code>list[index]=newValue</code>对指定索引index的列表元素进行修改。<br><code>list[::] = newList</code>对指定范围的列表元素进行修改</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruitList = [<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;梨子&quot;</span>,<span class="string">&quot;桃子&quot;</span>,<span class="string">&quot;火龙果&quot;</span>]</span><br><span class="line">fruitList[<span class="number">0</span>] = <span class="string">&quot;西瓜&quot;</span></span><br><span class="line"><span class="built_in">print</span>(fruitList[:])<span class="comment">#[&#x27;西瓜&#x27;, &#x27;梨子&#x27;, &#x27;桃子&#x27;, &#x27;火龙果&#x27;]</span></span><br><span class="line">fruitList[<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">&quot;杧果&quot;</span>,<span class="string">&quot;木瓜&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(fruitList[:])<span class="comment">#[&#x27;西瓜&#x27;, &#x27;杧果&#x27;, &#x27;木瓜&#x27;, &#x27;火龙果&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h4><blockquote><p>列表创建后，可以根据需要使用列表函数、del语句或切片删除指定元素或所有元素</p><ul><li><code>del list[index]</code>：删除索引为index的元素</li><li><code>list.pop()</code>：删除列表末尾的元素</li><li><code>list.pop(index)</code>：删除索引为index的元素</li><li><code>list.remove(item)</code>：删除列表元素item(元素名)</li><li><code>list.clear()</code>：删除列表中所有元素</li><li><code>list[::] = []</code>：对指定范围的列表元素进行删除</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cityList = [<span class="string">&quot;珠海&quot;</span>,<span class="string">&quot;威海&quot;</span>,<span class="string">&quot;信阳&quot;</span>,<span class="string">&quot;惠州&quot;</span>,<span class="string">&quot;厦门&quot;</span>,<span class="string">&quot;金华&quot;</span>,<span class="string">&quot;柳州&quot;</span>,<span class="string">&quot;曲靖&quot;</span>,<span class="string">&quot;九江&quot;</span>,<span class="string">&quot;绵阳&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> cityList[<span class="number">8</span>]                   </span><br><span class="line"><span class="built_in">print</span>(cityList[:])<span class="comment">#[&#x27;珠海&#x27;, &#x27;威海&#x27;, &#x27;信阳&#x27;, &#x27;惠州&#x27;, &#x27;厦门&#x27;, &#x27;金华&#x27;, &#x27;柳州&#x27;, &#x27;曲靖&#x27;, &#x27;绵阳&#x27;]</span></span><br><span class="line">cityList.pop()      <span class="comment">#删除&#x27;绵阳&#x27;</span></span><br><span class="line">cityList.pop(<span class="number">6</span>)     <span class="comment">#删除&#x27;柳州&#x27;</span></span><br><span class="line">cityList.remove(<span class="string">&quot;厦门&quot;</span>)            </span><br><span class="line"><span class="built_in">print</span>(cityList[:])<span class="comment">#[&#x27;珠海&#x27;, &#x27;威海&#x27;, &#x27;信阳&#x27;, &#x27;惠州&#x27;, &#x27;金华&#x27;, &#x27;曲靖&#x27;]</span></span><br><span class="line">cityList[<span class="number">4</span>:] = []                   </span><br><span class="line"><span class="built_in">print</span>(cityList[:])<span class="comment">#[&#x27;珠海&#x27;, &#x27;威海&#x27;, &#x27;信阳&#x27;, &#x27;惠州&#x27;]</span></span><br><span class="line">cityList.clear()</span><br><span class="line"><span class="built_in">print</span>(cityList[:])<span class="comment">#[]</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-列表复制和删除"><a href="#4-2-3-列表复制和删除" class="headerlink" title="4.2.3 列表复制和删除"></a>4.2.3 列表复制和删除</h3><h4>🚀 列表复制</h4><blockquote><ul><li><code>list_copy = list.copy()</code>:列表浅复制</li><li><code>list_copy = list</code>:字典复制，<code>list</code>改变，<code>list_copy</code>也改变</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">planetList = [<span class="string">&quot;水星&quot;</span>,<span class="string">&quot;金星&quot;</span>,<span class="string">&quot;地球&quot;</span>,<span class="string">&quot;火星&quot;</span>,<span class="string">&quot;木星&quot;</span>,<span class="string">&quot;土星&quot;</span>,<span class="string">&quot;天王星&quot;</span>,<span class="string">&quot;海王星&quot;</span>] </span><br><span class="line">planetList_copy1 = planetList.copy()      <span class="comment">#列表浅复制</span></span><br><span class="line">planetList_copy2 = planetList            <span class="comment">#列表复制</span></span><br><span class="line">planetList.pop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;planetList:&quot;</span>,planetList)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;planetList_copy1:&quot;</span>,planetList_copy1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;planetList_copy2:&quot;</span>,planetList_copy2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">planetList: [&#x27;水星&#x27;, &#x27;金星&#x27;, &#x27;地球&#x27;, &#x27;火星&#x27;, &#x27;木星&#x27;, &#x27;土星&#x27;, &#x27;天王星&#x27;]</span></span><br><span class="line"><span class="string">planetList_copy1: [&#x27;水星&#x27;, &#x27;金星&#x27;, &#x27;地球&#x27;, &#x27;火星&#x27;, &#x27;木星&#x27;, &#x27;土星&#x27;, &#x27;天王星&#x27;, &#x27;海王星&#x27;]</span></span><br><span class="line"><span class="string">planetList_copy2: [&#x27;水星&#x27;, &#x27;金星&#x27;, &#x27;地球&#x27;, &#x27;火星&#x27;, &#x27;木星&#x27;, &#x27;土星&#x27;, &#x27;天王星&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 列表删除</h4><blockquote><p>当列表不再需要使用后，可以使用del语句删除列表，其一般格式为<code>del 列表名</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">capitalList = [<span class="string">&quot;华盛顿&quot;</span>,<span class="string">&quot;伦敦&quot;</span>,<span class="string">&quot;巴黎&quot;</span>,<span class="string">&quot;北京&quot;</span>]      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;部分国家首都:&quot;</span>,capitalList)</span><br><span class="line"><span class="keyword">del</span> capitalList                      <span class="comment">#删除列表.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;部分国家首都:&quot;</span>,capitalList)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">部分国家首都: [&#x27;华盛顿&#x27;, &#x27;伦敦&#x27;, &#x27;巴黎&#x27;, &#x27;北京&#x27;]</span></span><br><span class="line"><span class="string">  File &quot;d:/pythonProjects/test.py&quot;, line 4, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(&quot;部分国家首都:&quot;, capitalList)</span></span><br><span class="line"><span class="string">NameError: name &#x27;capitalList&#x27; is not defined</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4-列表运算"><a href="#4-2-4-列表运算" class="headerlink" title="4.2.4 列表运算"></a>4.2.4 列表运算</h3><blockquote><ul><li><code>+</code>：将多个列表组合成一个新列表</li><li><code>*</code>：将整数n和列表相乘可以得到一个将原列表元素重复n次的新列表</li><li><code>in</code>：用于判断给定对象是否在列表中</li><li><code>not in</code>：用于判断给定对象是否不在列表中</li><li>关系运算符：规则是从两个列表的第1个元素开始比较，如果比较有结果则结束；否则继续比较两个列表后面对应位置的元素</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tang_list = [<span class="string">&quot;韩愈&quot;</span>,<span class="string">&quot;柳宗元&quot;</span>]</span><br><span class="line">song_list = [<span class="string">&quot;欧阳修&quot;</span>,<span class="string">&quot;苏轼&quot;</span>,<span class="string">&quot;苏洵&quot;</span>,<span class="string">&quot;苏辙&quot;</span>,<span class="string">&quot;王安石&quot;</span>,<span class="string">&quot;曾巩&quot;</span>]</span><br><span class="line">tang_song_list = tang_list + song_list</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;唐宋八大家:&quot;</span>,tang_song_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;杜甫是唐宋八大家吗?&quot;</span>,<span class="string">&quot;杜甫&quot;</span> <span class="keyword">in</span> tang_song_list)         </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;李白出现3次的列表:&quot;</span>,[<span class="string">&quot;李白&quot;</span>] * <span class="number">3</span>)                     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tang_list &lt; tang_song_list:&quot;</span>,tang_list &lt; tang_song_list)   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">唐宋八大家: [&#x27;韩愈&#x27;, &#x27;柳宗元&#x27;, &#x27;欧阳修&#x27;, &#x27;苏轼&#x27;, &#x27;苏洵&#x27;, &#x27;苏辙&#x27;, &#x27;王安石&#x27;, &#x27;曾巩&#x27;]</span></span><br><span class="line"><span class="string">杜甫是唐宋八大家吗? </span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">李白出现3次的列表: [&#x27;李白&#x27;, &#x27;李白&#x27;, &#x27;李白&#x27;]</span></span><br><span class="line"><span class="string">tang_list &lt; tang_song_list: True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-5-列表统计"><a href="#4-2-5-列表统计" class="headerlink" title="4.2.5 列表统计"></a>4.2.5 列表统计</h3><blockquote><ul><li><code>len(list)</code>：返回列表list中的元素个数</li><li><code>max(list)</code>：返回列表list中元素的最大值</li><li><code>min(list)</code>：返回列表list中元素的最小值</li><li><code>sum(list)</code>：返回列表list中所有元素的和</li><li><code>list.count(key)</code>：返回关键字key在列表中的出现次数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ktlsl_list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">42</span>,<span class="number">132</span>,<span class="number">429</span>,<span class="number">1430</span>,<span class="number">4862</span>]   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表中元素的个数:&quot;</span>,<span class="built_in">len</span>(ktlsl_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表元素的最大值:&quot;</span>,<span class="built_in">max</span>(ktlsl_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表元素的最小值:&quot;</span>,<span class="built_in">min</span>(ktlsl_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表元素的和:&quot;</span>,<span class="built_in">sum</span>(ktlsl_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素 %d 在列表中出现次数: %d.&quot;</span>%(<span class="number">14</span>,ktlsl_list.count(<span class="number">14</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">列表中元素的个数: 10</span></span><br><span class="line"><span class="string">列表元素的最大值: 4862</span></span><br><span class="line"><span class="string">列表元素的最小值: 1</span></span><br><span class="line"><span class="string">列表元素的和: 6918</span></span><br><span class="line"><span class="string">元素14在列表中出现次数: 1.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-6-列表查找与排序"><a href="#4-2-6-列表查找与排序" class="headerlink" title="4.2.6 列表查找与排序"></a>4.2.6 列表查找与排序</h3><h4>🚀 列表元素查找</h4><blockquote><p><code>list.index(key)</code>函数用于查找并返回关键字在列表中第1次出现的位置</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animalList = [<span class="string">&quot;elephant&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="string">&quot;lion&quot;</span>,<span class="string">&quot;leopard&quot;</span>,<span class="string">&quot;monkey&quot;</span>]      </span><br><span class="line">key = <span class="string">&quot;tiger&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s 在列表中第1次出现的位置：%d. &quot;</span>%(key,animalList.index(key)))    </span><br><span class="line"><span class="comment">#tiger 在列表中第1次出现的位置：1</span></span><br></pre></td></tr></table></figure><h4>🚀 列表元素排序</h4><blockquote><p>列表创建后，可以使用以下函数根据关键字对列表中的元素进行排序、倒序或临时排序</p><ul><li><code>list.sort()</code>：对列表list中的元素按照一定的规则排序(或者<code>list.sort( key=None, reverse=True/False)</code>,key指定元素排序)</li><li><code>list.reverse()</code>：对列表list中的元素按照一定的规则反向排序</li><li><code>sorted(list)</code>：对列表list 中的元素进行临时排序，返回副本</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">buildingList = [<span class="string">&quot;金字塔&quot;</span>,<span class="string">&quot;长城&quot;</span>,<span class="string">&quot;埃菲尔铁塔&quot;</span>,<span class="string">&quot;比萨斜塔&quot;</span>,<span class="string">&quot;雅典卫城&quot;</span>,<span class="string">&quot;古罗马竞技场&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(buildingList[:])<span class="comment">#[&#x27;金字塔&#x27;, &#x27;长城&#x27;, &#x27;埃菲尔铁塔&#x27;, &#x27;比萨斜塔&#x27;, &#x27;雅典卫城&#x27;, &#x27;古罗马竞技场&#x27;]</span></span><br><span class="line">buildingList.sort()</span><br><span class="line"><span class="built_in">print</span>(buildingList[:])<span class="comment">#[&#x27;古罗马竞技场&#x27;, &#x27;埃菲尔铁塔&#x27;, &#x27;比萨斜塔&#x27;, &#x27;金字塔&#x27;, &#x27;长城&#x27;, &#x27;雅典卫城&#x27;]</span></span><br><span class="line">buildingList.reverse()</span><br><span class="line"><span class="built_in">print</span>(buildingList[:])<span class="comment">#[&#x27;雅典卫城&#x27;, &#x27;长城&#x27;, &#x27;金字塔&#x27;, &#x27;比萨斜塔&#x27;, &#x27;埃菲尔铁塔&#x27;, &#x27;古罗马竞技场&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(buildingList))<span class="comment">#[&#x27;古罗马竞技场&#x27;, &#x27;埃菲尔铁塔&#x27;, &#x27;比萨斜塔&#x27;, &#x27;金字塔&#x27;, &#x27;长城&#x27;, &#x27;雅典卫城&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(buildingList[:])<span class="comment">#[&#x27;雅典卫城&#x27;, &#x27;长城&#x27;, &#x27;金字塔&#x27;, &#x27;比萨斜塔&#x27;, &#x27;埃菲尔铁塔&#x27;, &#x27;古罗马竞技场&#x27;],sorted知识临时排序顺序并没有改变</span></span><br></pre></td></tr></table></figure><h2 id="4-3-元组"><a href="#4-3-元组" class="headerlink" title="4.3 元组"></a>4.3 元组</h2><h3 id="4-3-1-元组创建"><a href="#4-3-1-元组创建" class="headerlink" title="4.3.1 元组创建"></a>4.3.1 元组创建</h3><blockquote><p>元组(Tuple)是写在小括号<code>()</code>之间、用<code>,</code>隔开的元素集合</p><p>与列表不同，元组创建后，对其中的的元素<strong>不能修改</strong></p><p>与列表相似，元组中的元素类型可以相同或不同，其中的元素可以重复或不重复，可以是简单或组合数据类型，元组的下标从0开始，支持双向索引<br>(1,1,2,3,5)中的元素为简单数字类型，有重复元素；((“语文”,122), ( “数学”,146),( “英语”,138))中的元素为元组类型，元素值各不相同</p></blockquote><h4 id="使用-运算符创建元组"><a href="#使用-运算符创建元组" class="headerlink" title="使用()运算符创建元组"></a>使用()运算符创建元组</h4><blockquote><p><code>元组名 ＝ (元素1,元素2,元素3,…)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = ()                 <span class="comment">#空元组</span></span><br><span class="line">tuple2 = (<span class="number">1</span>,<span class="number">8</span>,<span class="number">27</span>,<span class="number">64</span>,<span class="number">125</span>)                    <span class="comment">#元素为数字</span></span><br><span class="line">tuple3 = (<span class="string">&quot;计算机科学&quot;</span>,<span class="string">&quot;生物信息&quot;</span>,<span class="string">&quot;电子工程&quot;</span>)   <span class="comment">#元素为字符串</span></span><br><span class="line">tuple4 = (<span class="string">&quot;华为&quot;</span>,<span class="number">701</span>,<span class="string">&quot;中兴&quot;</span>,<span class="number">606</span>)             <span class="comment">#元素为数字和字符串混合</span></span><br></pre></td></tr></table></figure><h4 id="使用tuple-函数创建元组"><a href="#使用tuple-函数创建元组" class="headerlink" title="使用tuple()函数创建元组"></a>使用tuple()函数创建元组</h4><blockquote><p><code>元组名 = tuple(sequence)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1=<span class="built_in">tuple</span>([<span class="string">&quot;莎士比亚&quot;</span>,<span class="string">&quot;托尔斯泰&quot;</span>,<span class="string">&quot;但丁&quot;</span>,<span class="string">&quot;雨果&quot;</span>,<span class="string">&quot;歌德&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(tuple1[:])  <span class="comment">#(&#x27;莎士比亚&#x27;, &#x27;托尔斯泰&#x27;, &#x27;但丁&#x27;, &#x27;雨果&#x27;, &#x27;歌德&#x27;)</span></span><br><span class="line">tuple2=<span class="built_in">tuple</span>(<span class="string">&quot;理想是人生的太阳&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple2[:])<span class="comment">#(&#x27;理&#x27;, &#x27;想&#x27;, &#x27;是&#x27;, &#x27;人&#x27;, &#x27;生&#x27;, &#x27;的&#x27;, &#x27;太&#x27;, &#x27;阳&#x27;)</span></span><br><span class="line">tuple3=<span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))                           </span><br><span class="line"><span class="built_in">print</span>(tuple3[:])<span class="comment">#(1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-元组访问"><a href="#4-3-2-元组访问" class="headerlink" title="4.3.2 元组访问"></a>4.3.2 元组访问</h3><h4>🚀 访问元组及指定元素</h4><blockquote><p>通过<code>tuple[index]</code>访问指定索引为index的元组元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cityTuple = (<span class="string">&quot;维也纳&quot;</span>,<span class="string">&quot;苏黎世&quot;</span>,<span class="string">&quot;奥克兰&quot;</span>,<span class="string">&quot;慕尼黑&quot;</span>,<span class="string">&quot;温哥华&quot;</span>,<span class="string">&quot;杜塞尔多夫&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cityTuple[:])<span class="comment">#(&#x27;维也纳&#x27;, &#x27;苏黎世&#x27;, &#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;, &#x27;温哥华&#x27;, &#x27;杜塞尔多夫&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[<span class="number">3</span>])<span class="comment">#&#x27;慕尼黑&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[-<span class="number">2</span>])<span class="comment">#&#x27;温哥华&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 元组切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cityTuple = (<span class="string">&quot;维也纳&quot;</span>,<span class="string">&quot;苏黎世&quot;</span>,<span class="string">&quot;奥克兰&quot;</span>,<span class="string">&quot;慕尼黑&quot;</span>,<span class="string">&quot;温哥华&quot;</span>,<span class="string">&quot;杜塞尔多夫&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(cityTuple[:])<span class="comment">#(&#x27;维也纳&#x27;, &#x27;苏黎世&#x27;, &#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;, &#x27;温哥华&#x27;, &#x27;杜塞尔多夫&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[<span class="number">1</span>:<span class="number">4</span>])<span class="comment">#(&#x27;苏黎世&#x27;, &#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])<span class="comment">#(&#x27;苏黎世&#x27;, &#x27;慕尼黑&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[:<span class="number">4</span>])<span class="comment">#(&#x27;维也纳&#x27;, &#x27;苏黎世&#x27;, &#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[<span class="number">2</span>:])<span class="comment">#(&#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;, &#x27;温哥华&#x27;, &#x27;杜塞尔多夫&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(cityTuple[<span class="number">2</span>:-<span class="number">2</span>])<span class="comment">#(&#x27;奥克兰&#x27;, &#x27;慕尼黑&#x27;)</span></span><br></pre></td></tr></table></figure><h4>🚀 遍历元组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cityTuple = (<span class="string">&quot;维也纳&quot;</span>,<span class="string">&quot;苏黎世&quot;</span>,<span class="string">&quot;奥克兰&quot;</span>,<span class="string">&quot;慕尼黑&quot;</span>,<span class="string">&quot;温哥华&quot;</span>,<span class="string">&quot;杜塞尔多夫&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全球生活质量高的城市:&quot;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> city <span class="keyword">in</span> cityTuple:</span><br><span class="line">  <span class="built_in">print</span>(city,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment">#全球生活质量高的城市: 维也纳 苏黎世 奥克兰 慕尼黑 温哥华 杜塞尔多夫</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-元组复制和删除"><a href="#4-3-3-元组复制和删除" class="headerlink" title="4.3.3 元组复制和删除"></a>4.3.3 元组复制和删除</h3><blockquote><p><code>list_copy = list</code>：复制<br><code>del 列表名</code>：删除</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bat_tuple = (<span class="string">&quot;百度&quot;</span>,<span class="string">&quot;阿里巴巴&quot;</span>,<span class="string">&quot;腾讯&quot;</span>)</span><br><span class="line">bat_tuple_copy = bat_tuple          <span class="comment">#复制元组</span></span><br><span class="line"><span class="built_in">print</span>(bat_tuple)<span class="comment">#(&#x27;百度&#x27;, &#x27;阿里巴巴&#x27;, &#x27;腾讯&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(bat_tuple_copy)<span class="comment">#(&#x27;百度&#x27;, &#x27;阿里巴巴&#x27;, &#x27;腾讯&#x27;)</span></span><br><span class="line"><span class="keyword">del</span> bat_tuple        <span class="comment">#删除元组                           </span></span><br><span class="line"><span class="built_in">print</span>(bat_tuple)<span class="comment">#NameError: name &#x27;bat_tuple&#x27; is not defined</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-元组运算"><a href="#4-3-4-元组运算" class="headerlink" title="4.3.4 元组运算"></a>4.3.4 元组运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wanyue_tuple = (<span class="string">&quot;柳永&quot;</span>,<span class="string">&quot;晏殊&quot;</span>,<span class="string">&quot;欧阳修&quot;</span>,<span class="string">&quot;秦观&quot;</span>,<span class="string">&quot;李清照&quot;</span>)</span><br><span class="line">haofang_tuple  = (<span class="string">&quot;陆游&quot;</span>,<span class="string">&quot;苏轼&quot;</span>,<span class="string">&quot;辛弃疾&quot;</span>)                                 </span><br><span class="line">ci_author_tuple = wanyue_tuple + haofang_tuple                         </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宋朝词人:&quot;</span>,ci_author_tuple)<span class="comment">#宋朝词人: (&#x27;柳永&#x27;, &#x27;晏殊&#x27;, &#x27;欧阳修&#x27;, &#x27;秦观&#x27;, &#x27;李清照&#x27;, &#x27;陆游&#x27;, &#x27;苏轼&#x27;, &#x27;辛弃疾&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;李清照是宋朝词人吗?&quot;</span> ,<span class="string">&quot;李清照&quot;</span> <span class="keyword">in</span> ci_author_tuple)   <span class="comment">#李清照是宋朝词人吗? True        </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;岳飞&#x27;出现3次的元组:&quot;</span>,(<span class="string">&quot;岳飞&quot;</span>) * <span class="number">3</span>)  <span class="comment">#&#x27;岳飞&#x27;出现3次的元组: 岳飞岳飞岳飞   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;wanyue_tuple &lt; ci_author_tuple ?&quot;</span>,wanyue_tuple &lt; ci_author_tuple)<span class="comment">#wanyue_tuple &lt; ci_author_tuple ? True</span></span><br></pre></td></tr></table></figure><h3 id="4-3-5-元组统计"><a href="#4-3-5-元组统计" class="headerlink" title="4.3.5 元组统计"></a>4.3.5 元组统计</h3><blockquote><ul><li><code>len(list)</code>：返回列表list中的元素个数</li><li><code>max(list)</code>：返回列表list中元素的最大值</li><li><code>min(list)</code>：返回列表list中元素的最小值</li><li><code>sum(list)</code>：返回列表list中所有元素的和</li><li><code>list.count(key)</code>：返回关键字key在列表中的出现次数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pellTuple = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">70</span>,<span class="number">169</span>,<span class="number">408</span>,<span class="number">985</span>)      <span class="comment">#佩尔数列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组中元素个数:&quot;</span>,<span class="built_in">len</span>(pellTuple))<span class="comment">#10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组中元素最大值:&quot;</span>,<span class="built_in">max</span>(pellTuple))<span class="comment">#元组中元素最大值: 985</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组中元素最小值:&quot;</span>,<span class="built_in">min</span>(pellTuple))<span class="comment">#元组中元素最小值: 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组所有元素的和:&quot;</span>,<span class="built_in">sum</span>(pellTuple))<span class="comment">#元组所有元素的和: 1681</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元素 %d 在元组中出现次: %d次.&quot;</span>%(<span class="number">5</span>,pellTuple.count(<span class="number">5</span>)))<span class="comment">#元素5在元组中出现次数: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组中的元素个数: %d.&quot;</span>%(<span class="built_in">len</span>(pellTuple)))<span class="comment">#元组中的元素个数: 10</span></span><br></pre></td></tr></table></figure><h2 id="4-4-字典"><a href="#4-4-字典" class="headerlink" title="4.4 字典"></a>4.4 字典</h2><h3 id="4-4-1-字典创建"><a href="#4-4-1-字典创建" class="headerlink" title="4.4.1 字典创建"></a>4.4.1 字典创建</h3><blockquote><ul><li>字典(Dictionary)是一种<strong>映射</strong>类型，用<code>&#123;&#125;</code>标识，是一个无序的“键(key): 值(value)”对集合</li><li>键(key)<strong>必须使用不可变类型</strong>，如字符串、数字等；值可以是简单数据或组合数据等多种不同类型</li><li>在同一个字典中，键(key)必须是唯一的，值可以是不唯一的</li><li>与列表通过索引(Index)访问和操作元素不同，字典当中的元素是通过<strong>键</strong>来访问和操作的</li></ul></blockquote><h4>🚀 使用{}运算符创建字典</h4><blockquote><p><code>字典名 ＝ &#123;key1:value1,key2:value2,key3:value3,…&#125;</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;&#125;       <span class="comment">#空字典.</span></span><br><span class="line">dict2 = &#123;<span class="string">&quot;氮&quot;</span>:<span class="number">0.78</span>,<span class="string">&quot;氧&quot;</span>:<span class="number">0.21</span>,<span class="string">&quot;稀有气体&quot;</span>:<span class="number">0.00939</span>,<span class="string">&quot;二氧化碳&quot;</span>:<span class="number">0.00031</span>,<span class="string">&quot;其他&quot;</span>:<span class="number">0.0003</span>&#125;</span><br></pre></td></tr></table></figure><h4>🚀 使用dict()函数创建字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span> ()  <span class="comment"># 空字典</span></span><br><span class="line"><span class="built_in">dict</span> ( name=<span class="string">&quot;Mary&quot;</span>, height=<span class="number">165</span>, weight=<span class="number">51</span> )  <span class="comment"># 以关键字创建字典</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Mary&#x27;, &#x27;height&#x27;: 165, &#x27;weight&#x27;: 51&#125;</span></span><br><span class="line"><span class="built_in">dict</span> ( <span class="built_in">zip</span> ( [ <span class="string">&quot;name&quot;</span>, <span class="string">&quot;height&quot;</span>, <span class="string">&quot;weight&quot;</span> ], [ <span class="string">&quot;Jack&quot;</span>, <span class="number">178</span>, <span class="number">72</span> ] ) )  <span class="comment"># 以映射函数创建字典</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Jack&#x27;, &#x27;height&#x27;: 178, &#x27;weight&#x27;: 72&#125;</span></span><br><span class="line"><span class="built_in">dict</span> ( [ (<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Linda&quot;</span>), (<span class="string">&quot;height&quot;</span>, <span class="number">166</span>), (<span class="string">&quot;weight&quot;</span>, <span class="number">53</span>) ] )  <span class="comment"># 以可迭代对象创建字典</span></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Linda&#x27;, &#x27;height&#x27;: 166, &#x27;weight&#x27;: 53&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2-字典访问"><a href="#4-4-2-字典访问" class="headerlink" title="4.4.2 字典访问"></a>4.4.2 字典访问</h3><h4>🚀 访问字典</h4><blockquote><p> 通过字典名访问字典，通过“<code>dict[key]</code>”或“<code>dict.get(key)</code>”访问指定元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LSZ_dict = &#123;<span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;李时珍&quot;</span>,<span class="string">&quot;出生时间&quot;</span>:<span class="number">1518</span>,<span class="string">&quot;籍贯&quot;</span>:<span class="string">&quot;湖北&quot;</span>,<span class="string">&quot;职业&quot;</span>:<span class="string">&quot;医生&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LSZ_dict:&quot;</span>,LSZ_dict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LSZ_dict中元素个数:&quot;</span>,<span class="built_in">len</span>(LSZ_dict))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名:&quot;</span>,LSZ_dict[<span class="string">&quot;姓名&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;籍贯:&quot;</span>,LSZ_dict.get(<span class="string">&quot;籍贯&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;职业:&quot;</span>,LSZ_dict.get(<span class="string">&quot;职业&quot;</span>))   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">LSZ_dict: &#123;&#x27;姓名&#x27;: &#x27;李时珍&#x27;, &#x27;出生时间&#x27;: 1518, &#x27;籍贯&#x27;: &#x27;湖北&#x27;, &#x27;职业&#x27;: &#x27;医生&#x27;&#125;</span></span><br><span class="line"><span class="string">LSZ_dict中元素个数: 4</span></span><br><span class="line"><span class="string">姓名: 李时珍</span></span><br><span class="line"><span class="string">籍贯: 湖北</span></span><br><span class="line"><span class="string">职业: 医生</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p> 遍历字典中所有元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LSZ_dict = &#123;<span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;李时珍&quot;</span>,<span class="string">&quot;出生时间&quot;</span>:<span class="number">1518</span>,<span class="string">&quot;籍贯&quot;</span>:<span class="string">&quot;湖北&quot;</span>,<span class="string">&quot;职业&quot;</span>:<span class="string">&quot;医生&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典中所有的键 / 值:&quot;</span>,end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> LSZ_dict.items():</span><br><span class="line">  <span class="built_in">print</span>(key,<span class="string">&#x27;/&#x27;</span>,value,end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典中所有的键:&quot;</span>,end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> LSZ_dict.keys():</span><br><span class="line">  <span class="built_in">print</span>(key,end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字典中所有的值:&quot;</span>,end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> LSZ_dict.values():</span><br><span class="line">  <span class="built_in">print</span>(value,end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">字典中所有的键 / 值:姓名 / 李时珍, 出生时间 / 1518, 籍贯 / 湖北, 职业 / 医生, </span></span><br><span class="line"><span class="string">字典中所有的键:姓名, 出生时间, 籍贯, 职业, </span></span><br><span class="line"><span class="string">字典中所有的值:李时珍, 1518, 湖北, 医生,</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 添加字典元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Libing_dict = &#123;<span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;李冰&quot;</span>,<span class="string">&quot;性别&quot;</span>:<span class="string">&quot;男&quot;</span>,<span class="string">&quot;职业&quot;</span>:<span class="string">&quot;水利&quot;</span>&#125;</span><br><span class="line">Libing_dict[<span class="string">&quot;时期&quot;</span>] = <span class="string">&quot;战国&quot;</span>              <span class="comment">#如果存在就修改，不存在就添加到最后</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Libing_dict:&quot;</span>,Libing_dict)</span><br><span class="line"><span class="comment">#Libing_dict: &#123;&#x27;姓名&#x27;:&#x27;李冰&#x27;,&#x27;性别&#x27;:&#x27;男&#x27;,&#x27;职业&#x27;:&#x27;水利&#x27;,&#x27;时期&#x27;:&#x27;战国&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4>🚀 添加字典元素</h4><blockquote><p><code>dict[key] = value</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;female&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;</span><br><span class="line">dict1[<span class="string">&quot;age&quot;</span>] = <span class="number">22</span>           <span class="comment">#修改字典元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;age:&quot;</span>,dict1[<span class="string">&quot;age&quot;</span>])<span class="comment">#age: 22</span></span><br></pre></td></tr></table></figure><h4>🚀 添加字典元素</h4><blockquote><p>字典创建后，可以根据需要使用<code>字典函数</code>或<code>del</code>语句删除指定元素或所有元素</p><p><code>del dict[key]</code>：删除关键字为key的元素<br><code>dict.pop(key)</code>：删除关键字为key的元素<br><code>dict.popitem()</code>：随机删除字典中的元素<br><code>dict.clear()</code>：删除字典中所有元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">influential_people_dict = &#123;<span class="string">&quot;牛顿&quot;</span>:<span class="string">&quot;物理学家&quot;</span>,<span class="string">&quot;孔子&quot;</span>:<span class="string">&quot;儒家&quot;</span>,<span class="string">&quot;亚里士多德&quot;</span>:<span class="string">&quot;哲学家&quot;</span>,<span class="string">&quot;达尔文&quot;</span>:<span class="string">&quot;生物学家&quot;</span>,<span class="string">&quot;欧几里得&quot;</span>:<span class="string">&quot;数学家&quot;</span>,<span class="string">&quot;伽利略&quot;</span>:<span class="string">&quot;天文学家&quot;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> influential_people_dict [<span class="string">&quot;牛顿&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(influential_people_dict)<span class="comment">#&#123;&#x27;孔子&#x27;: &#x27;儒家&#x27;, &#x27;亚里士多德&#x27;: &#x27;哲学家&#x27;, &#x27;达尔文&#x27;: &#x27;生物学家&#x27;, &#x27;欧几里得&#x27;: &#x27;数学家&#x27;, &#x27;伽利略&#x27;: &#x27;天文学家&#x27;&#125;</span></span><br><span class="line">influential_people_dict.pop(<span class="string">&quot;亚里士多德&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(influential_people_dict)<span class="comment">#&#123;&#x27;孔子&#x27;: &#x27;儒家&#x27;, &#x27;达尔文&#x27;: &#x27;生物学家&#x27;, &#x27;欧几里得&#x27;: &#x27;数学家&#x27;, &#x27;伽利略&#x27;: &#x27;天文学家&#x27;&#125;</span></span><br><span class="line">influential_people_dict.popitem()</span><br><span class="line"><span class="built_in">print</span>(influential_people_dict)<span class="comment">#&#123;&#x27;孔子&#x27;: &#x27;儒家&#x27;, &#x27;达尔文&#x27;: &#x27;生物学家&#x27;, &#x27;欧几里得&#x27;: &#x27;数学家&#x27;&#125;</span></span><br><span class="line">influential_people_dict.clear()</span><br><span class="line"><span class="built_in">print</span>(influential_people_dict)<span class="comment">#&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-3-字典复制和删除"><a href="#4-4-3-字典复制和删除" class="headerlink" title="4.4.3 字典复制和删除"></a>4.4.3 字典复制和删除</h3><blockquote><ul><li><code>list_copy = list.copy()</code>:字典浅复制</li><li><code>list_copy = list</code>:字典复制，<code>list</code>改变，<code>list_copy</code>也改变</li><li><code>del 列表名</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chinese_figure_dict = &#123;<span class="string">&quot;张衡&quot;</span>:<span class="string">&quot;地质学家&quot;</span>,<span class="string">&quot;张仲景&quot;</span>:<span class="string">&quot;医学家&quot;</span>,<span class="string">&quot;祖冲之&quot;</span>:<span class="string">&quot;数学家&quot;</span>&#125;</span><br><span class="line">chinese_figure_dict_copy1 = chinese_figure_dict.copy() <span class="comment">#字典浅复制</span></span><br><span class="line">chinese_figure_dict_copy2 = chinese_figure_dict        <span class="comment">#字典复制</span></span><br><span class="line">chinese_figure_dict[<span class="string">&quot;沈括&quot;</span>] = <span class="string">&quot;科学家&quot;</span></span><br><span class="line"><span class="built_in">print</span>(chinese_figure_dict)<span class="comment">#&#123;&#x27;张衡&#x27;: &#x27;地质学家&#x27;, &#x27;张仲景&#x27;: &#x27;医学家&#x27;, &#x27;祖冲之&#x27;: &#x27;数学家&#x27;, &#x27;沈括&#x27;: &#x27;科学家&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(chinese_figure_dict_copy1)<span class="comment">#&#123;&#x27;张衡&#x27;: &#x27;地质学家&#x27;, &#x27;张仲景&#x27;: &#x27;医学家&#x27;, &#x27;祖冲之&#x27;: &#x27;数学家&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(chinese_figure_dict_copy2)<span class="comment">#&#123;张衡&#x27;: &#x27;地质学家&#x27;, &#x27;张仲景&#x27;: &#x27;医学家&#x27;, &#x27;祖冲之&#x27;: &#x27;数学家&#x27;, &#x27;沈括&#x27;: &#x27;科学家&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> chinese_figure_dict         <span class="comment">#删除字典</span></span><br><span class="line"><span class="built_in">print</span>(chinese_figure_dict)<span class="comment">#NameError: name &#x27;chinese_figure_dict&#x27; is not defined</span></span><br></pre></td></tr></table></figure><h2 id="4-5-集合"><a href="#4-5-集合" class="headerlink" title="4.5 集合"></a>4.5 集合</h2><h3 id="4-5-1-集合创建"><a href="#4-5-1-集合创建" class="headerlink" title="4.5.1 集合创建"></a>4.5.1 集合创建</h3><blockquote><ul><li>集合(Set)：在大括号<code>&#123;&#125;</code>之间、用逗号分隔、无序且<strong>不重复</strong>的元素集合</li><li>不可以为集合创建索引或执行切片(slice)操作</li><li>没有键(key)可用来获取集合中元素的值</li><li>Python中可以使用<code>&#123;&#125;</code>运算符或者 <code>set()</code>函数创建集合</li></ul></blockquote><h4>🚀 使用{}运算符创建集合</h4><blockquote><p><code>集合名 ＝ &#123;元素1,元素2,元素3,…&#125;</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>&#125;              <span class="comment">#元素为数字</span></span><br><span class="line">set2 = &#123;<span class="string">&quot;锂&quot;</span>,<span class="string">&quot;铷&quot;</span>,<span class="string">&quot;铯&quot;</span>,<span class="string">&quot;钫&quot;</span>,<span class="string">&quot;铍&quot;</span>&#125;    <span class="comment">#元素为字符串</span></span><br></pre></td></tr></table></figure><blockquote><p><code>集合名 ＝ set(sequence)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>()                        <span class="comment">#空集合</span></span><br><span class="line"><span class="built_in">set</span>([<span class="string">&quot;氮&quot;</span>,<span class="string">&quot;氧&quot;</span>,<span class="string">&quot;氦&quot;</span>,<span class="string">&quot;氖&quot;</span>,<span class="string">&quot;氩&quot;</span>,<span class="string">&quot;氪&quot;</span>])  <span class="comment">#列表转换为集合</span></span><br><span class="line"><span class="built_in">set</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>,<span class="number">3</span>))     <span class="comment">#使用range()函数创建集合</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2-集合访问"><a href="#4-5-2-集合访问" class="headerlink" title="4.5.2 集合访问"></a>4.5.2 集合访问</h3><h4>🚀 访问集合元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tourismSet = &#123;<span class="string">&quot;大峡谷&quot;</span>,<span class="string">&quot;大堡礁&quot;</span>,<span class="string">&quot;棕榈海滩&quot;</span>,<span class="string">&quot;南岛&quot;</span>,<span class="string">&quot;好望角&quot;</span>,<span class="string">&quot;拉斯维加斯&quot;</span>,<span class="string">&quot;悉尼港&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;世界著名旅游景点:&quot;</span>,tourismSet)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;遍历&#x27;世界著名旅游景点&#x27;集合: &quot;</span>,end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#遍历集合</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tourismSet:</span><br><span class="line">  <span class="built_in">print</span>(item,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">世界著名旅游景点: &#123;&#x27;南岛&#x27;, &#x27;拉斯维加斯&#x27;, &#x27;悉尼港&#x27;, &#x27;大堡礁&#x27;, &#x27;棕榈海滩&#x27;, &#x27;好望角&#x27;, &#x27;大峡谷&#x27;&#125;</span></span><br><span class="line"><span class="string">遍历&#x27;世界著名旅游景点&#x27;集合: 南岛 拉斯维加斯 悉尼港 大堡礁 棕榈海滩 好望角 大峡谷</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 添加和修改集合元素</h4><blockquote><p>集合创建后，可以使用集合函数在集合中添加或修改元素</p><ul><li><code>set.add(item)</code>：在集合中添加新元素item。</li><li><code>set.update(sequence)</code>：在集合中添加或修改元素。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">phoneSet = &#123;<span class="string">&quot;华为&quot;</span>,<span class="string">&quot;苹果&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;手机品牌:&quot;</span>,phoneSet)<span class="comment">#手机品牌: &#123;&#x27;华为&#x27;, &#x27;苹果&#x27;&#125;</span></span><br><span class="line">phoneSet.add(<span class="string">&quot;小米&quot;</span>)                 </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.add()添加元素后:&quot;</span>,phoneSet)<span class="comment">#set.add()添加元素后: &#123;&#x27;小米&#x27;, &#x27;华为&#x27;, &#x27;苹果&#x27;&#125;</span></span><br><span class="line">phoneSet.update([<span class="string">&quot;华为&quot;</span>,<span class="string">&quot;Oppo&quot;</span>,<span class="string">&quot;Vivo&quot;</span>])  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.update()添加元素后:&quot;</span>,phoneSet)<span class="comment">#set.update()添加元素后: &#123;&#x27;Vivo&#x27;, &#x27;Oppo&#x27;, &#x27;苹果&#x27;, &#x27;小米&#x27;, &#x27;华为&#x27;&#125;</span></span><br><span class="line"><span class="comment">#重复会忽略</span></span><br></pre></td></tr></table></figure><h4>🚀 删除集合元素</h4><blockquote><ul><li><code>set.remove(item)</code>：删除指定元素item</li><li><code>set.discard(item)</code>：删除指定元素item</li><li><code>set.pop()</code>：随机删除集合中的元素</li><li><code>set.clear()</code>：清空集合中的所有元素</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">world_tournament_set = &#123;<span class="string">&quot;世界杯排球赛&quot;</span>,<span class="string">&quot;世界乒乓球锦标赛&quot;</span>,<span class="string">&quot;世界篮球锦标赛&quot;</span>,<span class="string">&quot;世界足球锦标赛&quot;</span>&#125;      <span class="comment">#世界球类大赛</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;世界大赛:&quot;</span>,world_tournament_set)</span><br><span class="line">world_tournament_set.remove(<span class="string">&quot;世界足球锦标赛&quot;</span>)             <span class="comment">#删除指定集合元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.remove()删除元素后:&quot;</span>,world_tournament_set) </span><br><span class="line">world_tournament_set.discard(<span class="string">&quot;世界杯排球赛&quot;</span>)               <span class="comment">#删除指定集合元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.discard()删除元素后:&quot;</span>,world_tournament_set)</span><br><span class="line">world_tournament_set.pop()         <span class="comment">#随机删除集合元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.pop()删除元素后:&quot;</span>,world_tournament_set)</span><br><span class="line">world_tournament_set.clear()        <span class="comment">#清空集合元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set.clear()清空元素后:&quot;</span>,world_tournament_set)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">世界大赛: &#123;&#x27;世界足球锦标赛&#x27;, &#x27;世界乒乓球锦标赛&#x27;, &#x27;世界杯排球赛&#x27;, &#x27;世界篮球锦标赛&#x27;&#125;</span></span><br><span class="line"><span class="string">set.remove()删除元素后: &#123;&#x27;世界乒乓球锦标赛&#x27;, &#x27;世界杯排球赛&#x27;, &#x27;世界篮球锦标赛&#x27;&#125;</span></span><br><span class="line"><span class="string">set.discard()删除元素后: &#123;&#x27;世界乒乓球锦标赛&#x27;, &#x27;世界篮球锦标赛&#x27;&#125;</span></span><br><span class="line"><span class="string">set.pop()删除元素后: &#123;&#x27;世界篮球锦标赛&#x27;&#125;</span></span><br><span class="line"><span class="string">set.clear()清空元素后: set()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-3-集合复制和删除"><a href="#4-5-3-集合复制和删除" class="headerlink" title="4.5.3 集合复制和删除"></a>4.5.3 集合复制和删除</h3><blockquote><ul><li><code>list_copy = list.copy()</code>:列表浅复制</li><li><code>list_copy = list</code>:字典复制，<code>list</code>改变，<code>list_copy</code>也改变</li><li><code>del 列表名</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">world_GDP_set = &#123;<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;德国&quot;</span>,<span class="string">&quot;英国&quot;</span>&#125;</span><br><span class="line">world_GDP_set_copy1 = world_GDP_set.copy()</span><br><span class="line">world_GDP_set_copy2 = world_GDP_set</span><br><span class="line">world_GDP_set.add(<span class="string">&quot;法国&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world_GDP_set:&quot;</span>,world_GDP_set)<span class="comment">#world_GDP_set: &#123;&#x27;英国&#x27;, &#x27;日本&#x27;, &#x27;中国&#x27;, &#x27;美国&#x27;, &#x27;德国&#x27;, &#x27;法国&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world_GDP_set_copy1:&quot;</span>,world_GDP_set_copy1)<span class="comment">#world_GDP_set_copy1: &#123;&#x27;美国&#x27;, &#x27;英国&#x27;, &#x27;德国&#x27;, &#x27;日本&#x27;, &#x27;中国&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world_GDP_set_copy2:&quot;</span>,world_GDP_set_copy2)<span class="comment">#world_GDP_set_copy2: &#123;&#x27;英国&#x27;, &#x27;日本&#x27;, &#x27;中国&#x27;, &#x27;美国&#x27;, &#x27;德国&#x27;, &#x27;法国&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> world_GDP_set</span><br><span class="line"><span class="built_in">print</span>(world_GDP_set)<span class="comment">#NameError: name &#x27;world_GDP_set&#x27; is not defined</span></span><br></pre></td></tr></table></figure><h3 id="4-5-4-集合运算"><a href="#4-5-4-集合运算" class="headerlink" title="4.5.4 集合运算"></a>4.5.4 集合运算</h3><blockquote><ul><li><code>set1.union(set2)</code> 或 <code>set1 | set2</code>：并集运算</li><li><code>set1.intersection(set2)</code> 或 <code>set1 &amp; set2</code>：交集运算</li><li><code>set1. difference(set2)</code> 或 <code>set1 - set2</code>：差集运算</li><li><code>set1. issubset(set2)</code> 或 <code>set1 &lt; set2</code>：子集运算</li><li><code>item in set</code> 或<code>item not in set</code>：成员运算</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delicacySet1 = &#123;<span class="string">&quot;中国冰糖葫芦&quot;</span>,<span class="string">&quot;墨西哥卷饼&quot;</span>,<span class="string">&quot;英国炸鱼&quot;</span>,<span class="string">&quot;美国热狗&quot;</span>,<span class="string">&quot;土耳其烤肉&quot;</span>,<span class="string">&quot;新加坡炒粿&quot;</span>&#125;</span><br><span class="line">delicacySet2 = &#123; <span class="string">&quot;新加坡炒粿&quot;</span>,<span class="string">&quot;日本章鱼烧&quot;</span>,<span class="string">&quot;韩国炸鸡&quot;</span>,<span class="string">&quot;越南虾饼&quot;</span>,<span class="string">&quot;曼谷香脆煎饼&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(delicacySet1 | delicacySet2)<span class="comment">#&#123;&#x27;墨西哥卷饼&#x27;, &#x27;韩国炸鸡&#x27;, &#x27;美国热狗&#x27;, &#x27;曼谷香脆煎饼&#x27;, &#x27;日本章鱼烧&#x27;, &#x27;中国冰糖葫芦&#x27;, &#x27;英国炸鱼&#x27;, &#x27;越南虾饼&#x27;, &#x27;新加坡炒粿&#x27;, &#x27;土耳其烤肉&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(delicacySet1 &amp; delicacySet2)<span class="comment">#&#123;&#x27;新加坡炒粿&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(delicacySet1 - delicacySet2)<span class="comment">#&#123;&#x27;墨西哥卷饼&#x27;, &#x27;美国热狗&#x27;, &#x27;中国冰糖葫芦&#x27;, &#x27;英国炸鱼&#x27;, &#x27;土耳其烤肉&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(delicacySet1 &lt; delicacySet2)<span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;墨西哥巧克力&quot;</span> <span class="keyword">in</span> delicacySet1 | delicacySet2)<span class="comment">#False</span></span><br></pre></td></tr></table></figure><h3 id="4-5-5-集合统计"><a href="#4-5-5-集合统计" class="headerlink" title="4.5.5 集合统计"></a>4.5.5 集合统计</h3><blockquote><ul><li><code>len(list)</code>：返回列表list中的元素个数</li><li><code>max(list)</code>：返回列表list中元素的最大值</li><li><code>min(list)</code>：返回列表list中元素的最小值</li><li><code>sum(list)</code>：返回列表list中所有元素的和</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">triangleSet = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">45</span>,<span class="number">55</span>&#125;      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合中的元素个数: %d .&quot;</span>%(<span class="built_in">len</span>(triangleSet)))<span class="comment">#集合中的元素个数: 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合中元素最大值:&quot;</span>,<span class="built_in">max</span>(triangleSet))<span class="comment">#集合中元素最大值: 55</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合中元素最小值:&quot;</span>,<span class="built_in">min</span>(triangleSet))<span class="comment">#集合中元素最小值: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;集合所有元素的和:&quot;</span>,<span class="built_in">sum</span>(triangleSet))<span class="comment">#集合所有元素的和: 220</span></span><br></pre></td></tr></table></figure><h2 id="4-6-嵌套组合数据"><a href="#4-6-嵌套组合数据" class="headerlink" title="4.6 嵌套组合数据"></a>4.6 嵌套组合数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]       <span class="comment">#单位嵌套列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list:&quot;</span>,<span class="built_in">list</span>)<span class="comment">#: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list3 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">list</span> = [list1,list2,list3]       <span class="comment">#多个列表组成嵌套列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list:&quot;</span>,<span class="built_in">list</span>)<span class="comment">#list: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list[1]:&quot;</span>,<span class="built_in">list</span>[<span class="number">1</span>])      <span class="comment">#list[1]: [4, 5, 6]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list[1][1]:&quot;</span>,<span class="built_in">list</span>[<span class="number">1</span>][<span class="number">1</span>])<span class="comment">#list[1][1]: 5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nobel_prize_dict = &#123;<span class="string">&quot;物理学家&quot;</span>:[<span class="string">&quot;伦琴&quot;</span>,<span class="string">&quot;爱因斯坦&quot;</span>,<span class="string">&quot;波尔&quot;</span>],<span class="string">&quot;化学家&quot;</span>:[<span class="string">&quot;欧内斯特·卢瑟福&quot;</span>,<span class="string">&quot;范特霍夫&quot;</span>,<span class="string">&quot;玛丽·居里&quot;</span>],<span class="string">&quot;医学家&quot;</span>:[<span class="string">&quot;埃米尔·阿道夫·冯·贝林&quot;</span>,<span class="string">&quot;罗伯特·科赫&quot;</span>,<span class="string">&quot;屠呦呦&quot;</span>]&#125;</span><br><span class="line"><span class="comment">#遍历嵌套字典</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> nobel_prize_dict.items():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;获得诺贝尔奖的&quot;</span> + <span class="built_in">str</span>(key) + <span class="string">&quot;:&quot;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> value:</span><br><span class="line">    <span class="built_in">print</span>(item,end = <span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">获得诺贝尔奖的物理学家: 伦琴, 爱因斯坦, 波尔, </span></span><br><span class="line"><span class="string">获得诺贝尔奖的化学家: 欧内斯特·卢瑟福, 范特霍夫, 玛丽·居里, </span></span><br><span class="line"><span class="string">获得诺贝尔奖的医学家: 埃米尔·阿道夫·冯·贝林, 罗伯特·科赫, 屠呦呦,</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.04.15 下午</h1><h2 id="4-7-典型案例"><a href="#4-7-典型案例" class="headerlink" title="4.7 典型案例"></a>4.7 典型案例</h2><h3 id="4-7-1-查找"><a href="#4-7-1-查找" class="headerlink" title="4.7.1 查找"></a>4.7.1 查找</h3><blockquote><p>查找：在指定的信息中寻找一个特定的元素</p><ul><li>查找算法：如顺序查找算法、二分查找算法等</li><li>组合数据函数：如列表的list.index()函数等</li></ul></blockquote><h4>🚀 顺序查找</h4><blockquote><p>顺序查找算法：将列表中的元素逐个与给定关键字比较<br>如果有一个元素与给定关键字相等，则查找成功；否则，查找失败</p><p>顺序查找算法不要求列表中的元素是有序的，如果列表中有n个元素，顺序查找的最好情况是1，最坏情况是n，时间复杂度是O(n)</p></blockquote><blockquote><p>使用顺序查找算法查找给定关键字key在列表中是否存在</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br><span class="line">key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要查找的关键字: &quot;</span>))</span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">  <span class="keyword">if</span> list1[i] == key:                 </span><br><span class="line">    num = i</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> num != -<span class="number">1</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;要查找的关键字 %d 索引为 %d.&quot;</span>%(key,num))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;关键字 %d 查找失败！&quot;</span>%key)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入要查找的关键字: 9</span></span><br><span class="line"><span class="string">要查找的关键字9索引为 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 二分查找</h4><blockquote><p>二分查找又称为折半查找，属于<strong>有序</strong>查找算法，即要求列表中的元素是升序或降序排列的<br>二分查找的基本思想(假设列表中的元素是按升序排列的)</p><ol><li>将列表中间位置的元素与给定关键字key比较，如果两者相等，则查找成功；否则利用中间位置元素将列表分成前、后两个子列表</li><li>如果中间位置记录的元素大于key，则进一步查找前一子列表；否则进一步查找后一子列表</li><li>重复以上过程，直到找到满足条件的元素使查找成功，或直到子列表不存在为止，此时查找不成功</li></ol></blockquote><blockquote><p>如果列表中有n个元素，二分查找的最好情况是1，最坏情况是[log2(n)]+1([log2(n)]指对log2(n)的结果取整)，时间复杂度是O(log2(n))</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8013.png" alt="Python语言基础13"></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">key,<span class="built_in">list</span></span>):</span><br><span class="line">  low = <span class="number">0</span></span><br><span class="line">  high = <span class="built_in">len</span>(<span class="built_in">list</span>) – <span class="number">1</span><span class="comment">#下标从0开始，所以长度-1</span></span><br><span class="line">  <span class="keyword">while</span> (low &lt;= high):</span><br><span class="line">    middle = <span class="built_in">int</span>((low + high) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>[middle] &gt; key:    <span class="comment">#在列表的前半部分</span></span><br><span class="line">      high = middle – <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">list</span>[middle] &lt; key:  <span class="comment">#在列表的后半部分</span></span><br><span class="line">      low = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> middle        <span class="comment">#关键字对应元素的位置</span></span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>                    <span class="comment">#查找失败</span></span><br><span class="line"><span class="keyword">if</span> _ _name_ _ == <span class="string">&#x27;_ _main_ _&#x27;</span>:</span><br><span class="line">  <span class="built_in">list</span> = [<span class="number">2</span>,<span class="number">6</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">58</span>,<span class="number">69</span>]</span><br><span class="line">  key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入要查找的关键字: &quot;</span>))</span><br><span class="line">  location = binary_search(key,<span class="built_in">list</span>)</span><br><span class="line">  <span class="keyword">if</span> location != -<span class="number">1</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;要查找的关键字 %d 索引为 %d.&quot;</span> %(key,location))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;关键字 %d 查找失败！&quot;</span>%key)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入要查找的关键字: 28</span></span><br><span class="line"><span class="string">要查找的关键字28索引为 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-2-排序"><a href="#4-7-2-排序" class="headerlink" title="4.7.2 排序"></a>4.7.2 排序</h3><h4>🚀 冒泡排序</h4><blockquote><p>重复地访问要排序的元素，依次比较相邻两个元素，如果顺序错误就把它们调换过来，直到没有元素需要交换，排序完成</p><ol><li>比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置</li><li>对每对相邻元素做同样的工作，从开始第一对到结尾的最后一对</li><li>针对所有的元素重复以上的步骤，除了最后一个</li><li>重复上面的步骤，直到没有任何一对数字需要比较</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8014.png" alt="Python语言基础14"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">N=list1.__len__()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序之前:&#x27;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">  <span class="built_in">print</span>(list1[i],end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N - <span class="number">1</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N-i-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> list1[j] &gt; list1[j+<span class="number">1</span>]:</span><br><span class="line">      list1[j],list1[j+<span class="number">1</span>] = list1[j+<span class="number">1</span>],list1[j]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序之后:&#x27;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">  <span class="built_in">print</span>(list1[i],end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">排序之前: 8 3 1 5 2</span></span><br><span class="line"><span class="string">排序之后: 1 2 3 5 8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 选择排序</h4><blockquote><p>初始时在序列中找到最小(大)元素，放到序列的起始位置作为已排序序列，然后，从剩余未排序元素中继续寻找最小(大)元素，放到已排序序列的末尾，以此类推，直到所有元素均排序完毕</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8015.png" alt="Python语言基础15"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">N = list1.__len__()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序之前:&#x27;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">  <span class="built_in">print</span>(list1[i],end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N - <span class="number">1</span>):</span><br><span class="line">  <span class="built_in">min</span> = i</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>,N):</span><br><span class="line">    <span class="comment">#12,13行可以不要，如果j==i那么这次内循环14行就没有意义，直接跳出就可以了</span></span><br><span class="line">    <span class="keyword">if</span> i == j:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> list1[<span class="built_in">min</span>] &gt; list1[j]: <span class="built_in">min</span> = j</span><br><span class="line">  list1[i],list1[<span class="built_in">min</span>] = list1[<span class="built_in">min</span>],list1[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;排序之后:&#x27;</span>,end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">  <span class="built_in">print</span>(list1[i],end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">排序之前: 8 3 1 5 2</span></span><br><span class="line"><span class="string">排序之后: 1 2 3 5 8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-3-推导式"><a href="#4-7-3-推导式" class="headerlink" title="4.7.3 推导式"></a>4.7.3 推导式</h3><blockquote><p>推导式提供了创建组合数据的简单途径</p><p>推导式一般在 for 之后跟一个表达式，后面有零到多个for或if子句，返回结果是一个根据其后的 for 和 if条件生成的组合数据</p><p>通过推导式可以快速创建列表、元组、字典和集合等</p><p>列表推导式的一般格式为：<code>[表达式 for 变量 in 列表 [if 条件]]</code>，其中，if条件表示对列表中元素的过滤，可选</p><p>元组、字典、集合等推导式的创建与列表创建类似，只需要将外层[]替换成相应的{}或()</p></blockquote><blockquote><p>使用推导式创建列表</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]      <span class="comment">#[0, 1, 4, 9, 16, 25]</span></span><br><span class="line">[[x,<span class="built_in">pow</span>(<span class="number">10</span>,x)] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]<span class="comment">#[[0, 1], [1, 10], [2, 100], [3, 1000]]</span></span><br><span class="line">[<span class="built_in">abs</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,-<span class="number">2</span>,<span class="number">3</span>,-<span class="number">4</span>,<span class="number">5</span>,-<span class="number">6</span>] <span class="keyword">if</span> x &lt; <span class="number">0</span>]<span class="comment">#[2, 4, 6]</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> list1 <span class="keyword">for</span> y <span class="keyword">in</span> list2]</span><br><span class="line"><span class="comment">#[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]</span></span><br><span class="line">list3 = [<span class="string">&quot;指南针&quot;</span>,<span class="string">&quot;火药&quot;</span>,<span class="string">&quot;造纸术&quot;</span>,<span class="string">&quot;印刷术&quot;</span>]</span><br><span class="line">list4 = [<span class="string">&quot;中国劳动人民&quot;</span>,<span class="string">&quot;唐朝炼丹家&quot;</span>,<span class="string">&quot;蔡伦&quot;</span>,<span class="string">&quot;毕昇&quot;</span>]</span><br><span class="line">[list3[i] + <span class="string">&quot;由&quot;</span> + list4[i] + <span class="string">&quot;发明&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list3))]</span><br><span class="line"><span class="comment">#[&#x27;指南针由中国劳动人民发明&#x27;, &#x27;火药由唐朝炼丹家发明&#x27;, &#x27;造纸术由蔡伦发明&#x27;, &#x27;印刷术由毕昇发明&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>使用推导式创建集合</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">&#123;item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>&#125;         </span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="built_in">str</span>.title() <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> &#123;<span class="string">&quot;chinese&quot;</span>,<span class="string">&quot;america&quot;</span>,<span class="string">&quot;england&quot;</span>&#125;&#125; </span><br><span class="line">&#123;<span class="string">&#x27;America&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;England&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用推导式创建字典</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;i: i % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="literal">False</span>, <span class="number">2</span>: <span class="literal">False</span>, <span class="number">3</span>: <span class="literal">True</span>, <span class="number">4</span>: <span class="literal">False</span>, <span class="number">5</span>: <span class="literal">False</span>, <span class="number">6</span>: <span class="literal">True</span>, <span class="number">7</span>: <span class="literal">False</span>, <span class="number">8</span>: <span class="literal">False</span>, <span class="number">9</span>: <span class="literal">True</span>, <span class="number">10</span>: <span class="literal">False</span>&#125;</span><br><span class="line">chineseList = [<span class="string">&quot;运动&quot;</span>,<span class="string">&quot;饮食&quot;</span>,<span class="string">&quot;营养&quot;</span>]</span><br><span class="line">englishList = [<span class="string">&quot;motion&quot;</span>,<span class="string">&quot;diet&quot;</span>,<span class="string">&quot;nutrition&quot;</span>]</span><br><span class="line">&#123;chineseList[i]: englishList[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chineseList))&#125;</span><br><span class="line"><span class="comment">#&#123;&#x27;运动&#x27;: &#x27;motion&#x27;, &#x27;饮食&#x27;: &#x27;diet&#x27;, &#x27;营养&#x27;: &#x27;nutrition&#x27;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用推导式创建元组</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">questionList = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;profession&#x27;</span>,<span class="string">&#x27;favorites&#x27;</span>]</span><br><span class="line">answerList = [<span class="string">&#x27;Linda&#x27;</span>,<span class="string">&#x27;programming&#x27;</span>,<span class="string">&#x27;music&#x27;</span>]</span><br><span class="line"><span class="built_in">tuple</span>(<span class="built_in">zip</span>(questionList,answerList))</span><br><span class="line"><span class="comment">#((&#x27;name&#x27;, &#x27;Linda&#x27;), (&#x27;profession&#x27;, &#x27;programming&#x27;), (&#x27;favorites&#x27;, &#x27;music&#x27;))</span></span><br></pre></td></tr></table></figure><h3 id="4-7-4-列表作为堆栈和队列使用"><a href="#4-7-4-列表作为堆栈和队列使用" class="headerlink" title="4.7.4 列表作为堆栈和队列使用"></a>4.7.4 列表作为堆栈和队列使用</h3><blockquote><p>列表作为堆栈使用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list1.append(<span class="string">&quot;three&quot;</span>)            </span><br><span class="line">list1.append(<span class="string">&quot;two&quot;</span>)             </span><br><span class="line">list1.append(<span class="string">&quot;one&quot;</span>)             </span><br><span class="line"><span class="built_in">print</span>(list1.pop())                </span><br><span class="line"><span class="built_in">print</span>(list1.pop())                </span><br><span class="line"><span class="built_in">print</span>(list1.pop())                </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">one</span></span><br><span class="line"><span class="string">two</span></span><br><span class="line"><span class="string">three</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>列表作为队列使用，列表作为队列添加和删除元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque          </span><br><span class="line">q = deque([<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;杜甫&quot;</span>,<span class="string">&quot;王维&quot;</span>])     </span><br><span class="line">q.append(<span class="string">&quot;韩愈&quot;</span>)                            </span><br><span class="line">q.append(<span class="string">&quot;白居易&quot;</span>)               </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出队列元素: &quot;</span>,q.popleft())      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;出队列元素: &quot;</span>,q.popleft())     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;队列剩余元素: &quot;</span>,q)                </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">出队列元素: 李白</span></span><br><span class="line"><span class="string">出队列元素: 杜甫</span></span><br><span class="line"><span class="string">队列剩余元素: deque([&#x27;王维&#x27;, &#x27;韩愈&#x27;, &#x27;白居易&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="5-函数"><a href="#5-函数" class="headerlink" title="5 函数"></a>5 函数</h1><h2 id="5-1-函数定义和调用"><a href="#5-1-函数定义和调用" class="headerlink" title="5.1 函数定义和调用"></a>5.1 函数定义和调用</h2><h3>🚀 函数定义</h3><blockquote><p>函数是组织好的、可重复使用的、用来实现单一或相关联功能的代码段<br>函数的使用能提高应用的模块性、代码的重用率和可读性</p><p>Python提供了许多内建函数，如<code>input()</code>、<code>print()</code>等函数，可以直接在程序中使用，当Python提供的内建函数不能满足要求时，需要用户自定义函数</p><p>用户自定义函数的一般格式为：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">[参数<span class="number">1</span>,参数<span class="number">2</span>,…]</span>)：</span><br><span class="line">    <span class="string">&quot;&quot;&quot;函数说明&quot;&quot;&quot;</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myHello</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello, everyone!&quot;</span></span><br><span class="line"><span class="comment">#myHello()函数的返回结果为&quot;Hello, everyone!&quot;</span></span><br></pre></td></tr></table></figure><h3>🚀 函数调用</h3><blockquote><p>函数定义完成后，就可以在程序中调用了，函数调用时需要指出函数名称，并传入相应的参数<br>函数调用时传入的参数称为实际参数，简称实参<br>在默认情况下，函数调用时传入的实参个数、顺序等必须和函数定义时形参的个数、顺序一致<br>函数调用时的执行顺序如下：</p><ol><li>执行函数调用前的语句</li><li>执行函数调用，运行被调用函数内的语句，并返回相应结果</li><li>执行函数调用后的语句</li></ol></blockquote><blockquote><p>定义一个求梯形面积函数并调用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">echelonArea</span>(<span class="params">top,bottom,height</span>):    <span class="comment">#3个形参:top上底,bottom下底,height高</span></span><br><span class="line">   area = <span class="number">1</span> / <span class="number">2</span> * (top + bottom) * height <span class="comment">#计算梯形面积</span></span><br><span class="line">   <span class="keyword">return</span> area                              </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   t = <span class="number">3.6</span>; b = <span class="number">6.2</span>; h = <span class="number">4.5</span>   </span><br><span class="line">   area1 = echelonArea(t,b,h)        </span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;area1 ＝&quot;</span>,area1)  </span><br><span class="line">   area2 = echelonArea                      </span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;area2 ＝&quot;</span>,area2(t,b,h))                </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">area1 ＝ 22.05</span></span><br><span class="line"><span class="string">area2 ＝ 22.05</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-2-函数参数"><a href="#5-2-函数参数" class="headerlink" title="5.2 函数参数"></a>5.2 函数参数</h2><h3 id="5-2-1-参数传递"><a href="#5-2-1-参数传递" class="headerlink" title="5.2.1 参数传递"></a>5.2.1 参数传递</h3><blockquote><p>定义一个函数Swap(x,y)，实参为<strong>数字类型</strong>。在函数Swap(x,y)中交换2个形参的值，观察函数外面的实参变化情况</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Swap</span>(<span class="params">x,y</span>):                           <span class="comment">#2个形参:x、y</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;交换前：x = %d, y = %d&quot;</span>%(x,y))</span><br><span class="line">   x,y = y,x                                 <span class="comment">#交换2个形参(x、y)的值</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;交换后：x = %d, y = %d&quot;</span>%(x,y))</span><br><span class="line">a = <span class="number">5</span>; b = <span class="number">6</span>                                 <span class="comment">#定义变量a、b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用前：a = %d, b = %d.&quot;</span>%(a,b))</span><br><span class="line">Swap(a,b)                                    <span class="comment">#调用函数Swap()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用后：a = %d, b =%d.&quot;</span>%(a,b))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用前：a = 5, b = 6</span></span><br><span class="line"><span class="string">交换前：x = 5, y = 6</span></span><br><span class="line"><span class="string">交换后：x = 6, y = 5</span></span><br><span class="line"><span class="string">调用后：a = 5, b = 6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>由此可见，和C++、JAVA同理，形参的改变不会影响实参</p></blockquote><blockquote><p>定义一个函数<code>changeList(myList)</code>，实参为<strong>列表</strong>。在函数调用中给列表myList添加了一个新元素，观察函数外面的实参变化情况</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeList</span>(<span class="params">myList</span>):               </span><br><span class="line">  myList.append(<span class="number">4</span>)                     </span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                                       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用前list1:&quot;</span>,list1)</span><br><span class="line">changeList(list1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用后list1:&quot;</span>,list1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用前list1: [1, 2, 3]</span></span><br><span class="line"><span class="string">调用后list1: [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>不可变类型：</strong>类似 C++ 的值传递，如整数、字符串、元组。如 <code>fun(a)</code>，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象</p><p><strong>可变类型：</strong>类似 C++ 的引用传递，如 列表，字典。如 <code>fun(list)</code>，则是将 list 真正的传过去，修改后 fun 外部的 list 也会受影响</p></blockquote><h3 id="5-2-2-参数类型"><a href="#5-2-2-参数类型" class="headerlink" title="5.2.2 参数类型"></a>5.2.2 参数类型</h3><h4>🚀 必需参数</h4><blockquote><p>定义一个加法函数<code>myAdd()</code>，使用必需参数传递参数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myAdd</span>(<span class="params">x,y,z</span>):</span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">a = <span class="number">3</span>; b = <span class="number">4</span>; c = <span class="number">5</span>                     <span class="comment">#定义变量a、b、c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用结果:&quot;</span>,myAdd(a,b,c))          <span class="comment">#调用函数，使用必需参数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用结果: 12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 关键字参数</h4><blockquote><p>定义一个函数<code>stuInfo()</code>，使用关键字参数传递参数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stuInfo</span>(<span class="params">sno,sname</span>):                </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + sno + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;姓名：&quot;</span> + sname</span><br><span class="line"><span class="built_in">print</span>(stuInfo(sname = <span class="string">&quot;Rose&quot;</span>,sno = <span class="string">&quot;x1001&quot;</span>))     </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">学号：x1001</span></span><br><span class="line"><span class="string">姓名：Rose</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 默认参数</h4><blockquote><p>定义一个函数<code>stuInfo()</code>，使用默认参数传递参数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stuInfo</span>(<span class="params">sno,sname,age = <span class="number">18</span></span>):                         </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;学号：&quot;</span> + sno + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;姓名：&quot;</span> + sname + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;年龄：&quot;</span> + <span class="built_in">str</span>(age)</span><br><span class="line"><span class="built_in">print</span>(stuInfo(sname = <span class="string">&quot;Rose&quot;</span>,sno = <span class="string">&quot;x1001&quot;</span>))                   <span class="comment">#age使用默认参数值18      </span></span><br><span class="line"><span class="built_in">print</span>(stuInfo(sname = <span class="string">&quot;Mike&quot;</span>,sno = <span class="string">&quot;x1002&quot;</span>,age = <span class="number">20</span>))   <span class="comment">#age使用传入参数值20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">学号：x1001, 姓名：Rose, 年龄：18</span></span><br><span class="line"><span class="string">学号：x1002, 姓名：Mike, 年龄：20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 不定长参数</h4><blockquote><p>在实际应用中，有可能需要一个函数能处理比当初声明时更多的参数，这种参数称为不定长参数</p><p>不定长参数有如下两种形式:</p><ul><li><code>*args</code>：将接收的多个参数放在一个元组中</li><li><code>**args</code>：将显式赋值的多个参数放入字典中</li></ul></blockquote><blockquote><p>定义一个求和函数<code>addFunc()</code>，使用不定长参数传递参数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addFunc</span>(<span class="params">x,y,*args</span>):</span><br><span class="line">    res = x + y</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> args:</span><br><span class="line">        res += k</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;调用结果:&quot;</span>,addFunc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)) <span class="comment">#调用结果: 15</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">**args</span>):</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> args.items():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s:%s&quot;</span>%(key,value))</span><br><span class="line">func(新发明<span class="number">1</span>=<span class="string">&quot;高铁&quot;</span>,新发明<span class="number">2</span>=<span class="string">&quot;扫码支付&quot;</span>,新发明<span class="number">3</span>=<span class="string">&quot;共享单车&quot;</span>,新发明<span class="number">4</span>=<span class="string">&quot;网购&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">新发明1:高铁</span></span><br><span class="line"><span class="string">新发明2:扫码支付</span></span><br><span class="line"><span class="string">新发明3:共享单车</span></span><br><span class="line"><span class="string">新发明4:网购</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-3-参数传递的序列解包"><a href="#5-2-3-参数传递的序列解包" class="headerlink" title="5.2.3 参数传递的序列解包"></a>5.2.3 参数传递的序列解包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,z</span>):</span><br><span class="line"><span class="keyword">return</span> x * <span class="number">100</span> + y * <span class="number">10</span> + z</span><br><span class="line"><span class="comment">#元组，一一对应</span></span><br><span class="line">func(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">#123</span></span><br><span class="line"><span class="comment">#字典，有序</span></span><br><span class="line">func(**&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;)<span class="comment">#123</span></span><br><span class="line">func(**&#123;<span class="string">&#x27;z&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">3</span>&#125;)<span class="comment">#321</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.04.16 晚上</h1><h2 id="5-3-特殊函数"><a href="#5-3-特殊函数" class="headerlink" title="5.3 特殊函数"></a>5.3 特殊函数</h2><h3 id="5-3-1-匿名函数"><a href="#5-3-1-匿名函数" class="headerlink" title="5.3.1 匿名函数"></a>5.3.1 匿名函数</h3><blockquote><p><strong>匿名函数</strong>是指没有函数名的简单函数，只可以包含一个表达式，不允许包含其他复杂的语句，表达式的结果就是函数的返回值。在Python中，使用关键字lambda创建匿名函数</p><p>创建匿名函数的一般格式为：<code>lambda [arg1[,arg2,…,argn]]: expression</code></p><ul><li><code>arg1,arg2,…,argn</code>：形参，可以没有，也可以有一个或多个</li><li><code>expression</code>：表达式</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">3</span>,<span class="number">4</span>)   <span class="comment">#7</span></span><br><span class="line">func = <span class="keyword">lambda</span> a,b=<span class="number">3</span>,c=<span class="number">2</span>: b ** <span class="number">2</span>-<span class="number">4</span> * a * c  </span><br><span class="line">func(<span class="number">1</span>)    <span class="comment">#1(1传递给a,bc使用默认参数)</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">4</span>)  <span class="comment">#8(a=1,b=4,c使用默认参数)</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"><span class="built_in">sum</span>(list1,list2)     <span class="comment">#[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y: x + y,list1,list2))      <span class="comment">#[5, 7, 9]</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-递归函数"><a href="#5-3-2-递归函数" class="headerlink" title="5.3.2 递归函数"></a>5.3.2 递归函数</h3><blockquote><p>如果一个函数在函数体中直接或者间接调用自身，那么这个函数就称为<strong>递归函数</strong></p><p>递归函数在执行过程中可能会返回以再次调用该函数</p><p>如果函数a中调用函数a自身，则称为<strong>直接递归</strong></p><p>如果在函数a中调用函数b，在函数b中又调用函数a，则称为<strong>间接递归</strong></p></blockquote><blockquote><p>求1+2+…+n的和来分析递归函数的原理和使用方法</p><p>如果用<code>fac(n)</code>表示1+2+…+n的和，则<br>fac(n)&#x3D; 1+2+…+n，fac(n-1)&#x3D; 1+2+…+(n-1)…fac(2)&#x3D; 1 + 2，fac(1)&#x3D; 1</p><p>$fac(n)\begin{cases}<br>&amp; \text{ n+fac(n-1) } ,n&gt;1 \<br>&amp; \text{ 1 }   ,n&#x3D;1<br>\end{cases} $</p></blockquote><blockquote><p>根据<code>fac(n)</code>的公式，可以定义如下的求和函数<code>fac(n)</code>：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fac</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">return</span> fac(n-<span class="number">1</span>)+n</span><br></pre></td></tr></table></figure><blockquote><p>典中点再来一个爬楼梯问题，使用递归函数求斐波那契数列前20项之和</p><p>$fib(n)\begin{cases}<br>&amp; \text{ fib(n-1)+fib(n-2) } ,n&gt;2 \<br>&amp; \text{ 1 }   ,n&#x3D;1或2<br>\end{cases} $</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义求斐波那契数列第n项的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"><span class="comment">#求斐波那契数列前20项目之和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):  </span><br><span class="line">  <span class="built_in">sum</span> = <span class="built_in">sum</span> + fib(i)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;前20项之和为:&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">前20项之和为: 17710</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3-嵌套函数"><a href="#5-3-3-嵌套函数" class="headerlink" title="5.3.3 嵌套函数"></a>5.3.3 嵌套函数</h3><blockquote><ul><li>嵌套函数指在一个函数(称为外函数)中定义了另外一个函数(称为内函数)</li><li>嵌套函数中的内函数只能在<strong>外函数</strong>中调用，不能在外函数外面<strong>直接</strong>调用</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义外函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outerFunc</span>():</span><br><span class="line">  <span class="comment">#定义内函数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">innerFunc</span>():</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;innerFunc&#x27;</span>)              <span class="comment">#内函数中的语句</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;outerFunc&#x27;</span>)              <span class="comment">#外函数中的语句</span></span><br><span class="line">  innerFunc()                         <span class="comment">#调用内函数</span></span><br><span class="line">outerFunc()                           <span class="comment">#调用外函数</span></span><br><span class="line">innerFunc()                           <span class="comment">#报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">innerFunc</span></span><br><span class="line"><span class="string">outerFunc</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义外函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outerFunc</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="comment">#定义内函数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">innerFunc</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line">  <span class="keyword">return</span> innerFunc                          <span class="comment">#调用内函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方法一调用结果:&quot;</span>,outerFunc(<span class="number">3</span>)(<span class="number">4</span>))    <span class="comment">#在调用时传递外函数参数和内函数参数</span></span><br><span class="line">a = outerFunc(<span class="number">3</span>)                              <span class="comment">#调用外函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方法二调用结果:&quot;</span>,a(<span class="number">4</span>))                       <span class="comment">#间接调用内函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">方法一调用结果: 12</span></span><br><span class="line"><span class="string">方法二调用结果: 12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-4-装饰器"><a href="#5-4-装饰器" class="headerlink" title="5.4 装饰器"></a>5.4 装饰器</h2><h3 id="5-4-1-装饰器的定义和调用"><a href="#5-4-1-装饰器的定义和调用" class="headerlink" title="5.4.1 装饰器的定义和调用"></a>5.4.1 装饰器的定义和调用</h3><blockquote><p>装饰器(Decorator)是Python函数中一个比较特殊的功能，用来包装函数的函数。可以使程序代码更简洁。</p><p>装饰器常用于下列情况：</p><ul><li>将多个函数中的重复代码拿出来整理成一个装饰器</li><li>对多个函数的共同功能进行处理</li></ul></blockquote><blockquote><p> 定义装饰器的一般格式</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">  @decorator</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>装饰器的定义和调用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;I am in deco.&quot;</span>)</span><br><span class="line">  func()                                      </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;deco return value.&quot;</span></span><br><span class="line"><span class="comment">#使用装饰器修饰函数</span></span><br><span class="line"><span class="meta">@deco                                        </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;I am in func.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(func)                                      </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am in deco.</span></span><br><span class="line"><span class="string">I am in func.</span></span><br><span class="line"><span class="string">deco return value.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用装饰器修改网页文本格式</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="comment">#定义内函数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">modify_text</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;strong&gt;&quot;</span> + func(<span class="built_in">str</span>) + <span class="string">&quot;&lt;/strong&gt;&quot;</span></span><br><span class="line">  <span class="keyword">return</span> modify_text</span><br><span class="line"><span class="comment">#使用装饰器修饰函数</span></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">textFunc</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"><span class="built_in">print</span>(textFunc(<span class="string">&quot;text&quot;</span>))                           </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;strong&gt;text&lt;/strong&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-带参数的装饰器"><a href="#5-4-2-带参数的装饰器" class="headerlink" title="5.4.2 带参数的装饰器"></a>5.4.2 带参数的装饰器</h3><blockquote><p>使用带参数的装饰器检查函数参数合法性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义带参数的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DECO</span>(<span class="params">args</span>):</span><br><span class="line">  <span class="comment">#定义内部装饰器</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment">#定义内函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">x,y</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;%d %s %d = &quot;</span>%(x,args,y),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> func(x,y)</span><br><span class="line">    <span class="keyword">return</span> call_func</span><br><span class="line">  <span class="keyword">return</span> deco</span><br><span class="line"><span class="comment">#传递装饰器参数</span></span><br><span class="line"><span class="meta">@DECO(<span class="params"><span class="string">&#x27;&amp;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">andFunc</span>(<span class="params">x,y</span>):     <span class="comment">#按位&#x27;与&#x27;运算</span></span><br><span class="line">  <span class="keyword">return</span> x &amp; y</span><br><span class="line"><span class="comment">#传递装饰器参数.</span></span><br><span class="line"><span class="meta">@DECO(<span class="params"><span class="string">&#x27;|&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">orFunc</span>(<span class="params">x,y</span>):      <span class="comment">#按位&#x27;或&#x27;运算</span></span><br><span class="line">  <span class="keyword">return</span> x | y</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="built_in">print</span>(andFunc(<span class="number">5</span>,<span class="number">6</span>))                                        </span><br><span class="line">  <span class="built_in">print</span>(orFunc(<span class="number">5</span>,<span class="number">6</span>))                                         </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5 &amp; 6 = 4</span></span><br><span class="line"><span class="string">5 | 6 = 7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-5-变量作用域"><a href="#5-5-变量作用域" class="headerlink" title="5.5 变量作用域"></a>5.5 变量作用域</h2><blockquote><p>Python中，不同位置定义的变量决定了这个变量的访问权限和作用范围。Python中的变量可分为如下4种</p><ol><li>局部变量和局部作用域<code>L(Local)</code>：包含在def关键字定义的语句块中</li><li>全局变量和全局作用域<code>G(Global)</code>：在模块的函数外定义的变量</li><li>闭包变量和闭包作用域<code>E(Enclosing)</code>：定义在嵌套函数的外函数内、内函数外的变量</li><li>内建变量和内建作用域<code>B(Built-in)</code>：系统内固定模块里定义的变量</li></ol></blockquote><h3 id="5-5-1-全局变量和局部变量"><a href="#5-5-1-全局变量和局部变量" class="headerlink" title="5.5.1 全局变量和局部变量"></a>5.5.1 全局变量和局部变量</h3><blockquote><p>全局变量和局部变量的使用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">100</span>                          <span class="comment">#定义全局变量x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x =&quot;</span>,x)               <span class="comment">#形参x的值来自实参</span></span><br><span class="line">y = <span class="number">200</span>                      <span class="comment">#创建局部变量y=200</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;y =&quot;</span>,y)               </span><br><span class="line">f(x)                             <span class="comment">#调用函数.实参为全局变量x=100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x = 100</span></span><br><span class="line"><span class="string">y = 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-2-global和nonlocal"><a href="#5-5-2-global和nonlocal" class="headerlink" title="5.5.2 global和nonlocal"></a>5.5.2 global和nonlocal</h3><blockquote><p>使用关键字<code>global</code>修改变量作用域</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">100</span>                                        <span class="comment">#定义全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myFunc</span>():</span><br><span class="line">  <span class="keyword">global</span> x                                      <span class="comment">#使用关键字global修改x为全局变量</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;全局变量: x =&quot;</span>,x)</span><br><span class="line">  x = <span class="number">200</span>                                     <span class="comment">#修改全局变量</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;修改后的全局变量: x =&quot;</span>,x)</span><br><span class="line">myFunc()                                        <span class="comment">#调用函数                            </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">全局变量: x = 100</span></span><br><span class="line"><span class="string">修改后的全局变量: x = 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用关键字<code>nonlocal</code>修改变量作用域</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outerFunc</span>():</span><br><span class="line">  x = <span class="number">100</span>                                             <span class="comment">#定义闭包变量x</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">innerFunc</span>():</span><br><span class="line">    <span class="keyword">nonlocal</span> x                                      <span class="comment">#使用关键字nonlocal修改x为闭包变量</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;闭包变量: x =&quot;</span>,x)</span><br><span class="line">  x = <span class="number">200</span>                                           <span class="comment">#修改闭包变量的值</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;修改后的闭包变量: x =&quot;</span>,x)</span><br><span class="line">  innerFunc()</span><br><span class="line">outerFunc()                                         <span class="comment">#调用外函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">闭包变量: x = 100</span></span><br><span class="line"><span class="string">修改后的闭包变量: x = 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="5-6-典型案例"><a href="#5-6-典型案例" class="headerlink" title="5.6 典型案例"></a>5.6 典型案例</h2><h3 id="5-6-1-加密和解密"><a href="#5-6-1-加密和解密" class="headerlink" title="5.6.1 加密和解密"></a>5.6.1 加密和解密</h3><blockquote><p>将输入字符串的所有字符加密，密钥key为3。然后，再使用同样的密钥key对加密后的字符串进行解密</p><p>分析：</p><ol><li>定义一个加密函数对传入的明文进行加密，返回加密后的密文</li><li>定义一个解密函数对传入的密文进行解密，返回解密后的明文</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryFunc</span>(<span class="params">encryString</span>):</span><br><span class="line">  decryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> encryString:</span><br><span class="line">    decryString = decryString + <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> decryString</span><br><span class="line"><span class="comment">#解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryFunc</span>(<span class="params">decryString</span>):</span><br><span class="line">  encryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> decryString:</span><br><span class="line">    encryString = encryString + <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> encryString</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  encryStr = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的字符串: &quot;</span>)</span><br><span class="line">  decryStr = encryFunc(encryStr)                  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;加密后的字符串:&quot;</span>,decryStr)</span><br><span class="line">  encryStr = decryFunc(decryStr)                  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;解密后的字符串:&quot;</span>,encryStr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入要加密的字符串: a3b5e8</span></span><br><span class="line"><span class="string">加密后的字符串: d6e8h;</span></span><br><span class="line"><span class="string">解密后的字符串: a3b5e8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-2-求最大公约数"><a href="#5-6-2-求最大公约数" class="headerlink" title="5.6.2 求最大公约数"></a>5.6.2 求最大公约数</h3><blockquote><p>求两个正整数的最大公约数</p></blockquote><blockquote><p>方法一：创建非递归函数求最大公约数<br>分析：非递归函数使用穷举法实现</p><ol><li>将两个数m和n做比较，取较小的数作为smaller</li><li>以smaller为被除数分别和输入的两个数m和n做除法运算</li><li>被除数每做一次除法运算，值减少1，直到两个运算的余数都为0，该被除数为这两个数的最大公约数</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义非递归函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gys</span>(<span class="params">m,n</span>):</span><br><span class="line">  <span class="keyword">if</span> m &gt; n:</span><br><span class="line">    smaller = n</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    smaller = m</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(smaller,<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> ((m % i == <span class="number">0</span>) <span class="keyword">and</span> (n % i == <span class="number">0</span>)):</span><br><span class="line">      gys = i</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">return</span> gys</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个整数: &quot;</span>))</span><br><span class="line">  num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个整数: &quot;</span>))</span><br><span class="line">  <span class="built_in">print</span>(num1,<span class="string">&quot;和&quot;</span>,num2,<span class="string">&quot;的最大公约数为</span></span><br><span class="line"><span class="string">      &quot;</span>,gys(num1,num2))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入第一个整数: 6</span></span><br><span class="line"><span class="string">请输入第二个整数: 10</span></span><br><span class="line"><span class="string">6 和 10 的最大公约数为 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>方法二：创建递归函数求最大公约数</p><p>分析：递归函数采用辗转相除法实现</p><ol><li>取两个数中较大的数做除数，较小的数做被除数</li><li>用较大的数除较小的数：如果余数为0，则较小数为这两个数的最大公约数；如果余数不为0，则用较小数除上一步计算出的余数</li><li>重复上述步骤，直到余数为0，则这两个数的最大公约数为上一步的余数</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义递归函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gys</span>(<span class="params">a,b</span>):</span><br><span class="line">  <span class="keyword">if</span> a &gt; b:</span><br><span class="line">    a,b = b,a</span><br><span class="line">  <span class="keyword">if</span> b % a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> gys(a,b % a)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个整数: &quot;</span>))</span><br><span class="line">  num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个整数: &quot;</span>))</span><br><span class="line">  <span class="built_in">print</span>(num1,<span class="string">&quot;和&quot;</span>,num2,<span class="string">&quot;的最大公约数为</span></span><br><span class="line"><span class="string">      &quot;</span>,gys(num1,num2))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入第一个整数: 20</span></span><br><span class="line"><span class="string">请输入第二个整数: 10</span></span><br><span class="line"><span class="string">20 和 10 的最大公约数为 10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>方法三：使用Math中的函数求最大公约数</p><p>分析：直接调用Math中的<code>gcd()</code>函数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个整数: &quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个整数: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(num1,<span class="string">&quot;和&quot;</span>,num2,<span class="string">&quot;的最大公约数为&quot;</span>,(math.gcd(num1,num2)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">请输入第一个整数: 12</span></span><br><span class="line"><span class="string">请输入第二个整数: 8</span></span><br><span class="line"><span class="string">12 和 8 的最大公约数为 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-3-使用装饰器检查函数参数合法性"><a href="#5-6-3-使用装饰器检查函数参数合法性" class="headerlink" title="5.6.3 使用装饰器检查函数参数合法性"></a>5.6.3 使用装饰器检查函数参数合法性</h3><blockquote><p>使用装饰器检查函数参数合法性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line">  <span class="comment">#检查func(x,y)中的参数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">check_call_func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> y &gt;= <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> func(x,y)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;提示: 函数参数 &quot;</span> + <span class="built_in">str</span>(x)+<span class="string">&quot; 和 &quot;</span>+<span class="built_in">str</span>(y)+<span class="string">&quot; 必须为非负数!&quot;</span></span><br><span class="line">  <span class="keyword">return</span> check_call_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rec_area</span>(<span class="params">x,y</span>):         <span class="comment">#计算长方形面积</span></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rec_perimeter</span>(<span class="params">x,y</span>):   <span class="comment">#计算长方形周长</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * (x + y)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="built_in">print</span>(rec_area(-<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">  <span class="built_in">print</span>(rec_perimeter(-<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">  <span class="built_in">print</span>(rec_area(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">  <span class="built_in">print</span>(rec_perimeter(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">提示: 函数参数 -3 和 4 必须为非负数!</span></span><br><span class="line"><span class="string">提示: 函数参数 -3 和 4 必须为非负数!</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">14</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-4-模拟轮盘抽奖游戏"><a href="#5-6-4-模拟轮盘抽奖游戏" class="headerlink" title="5.6.4 模拟轮盘抽奖游戏"></a>5.6.4 模拟轮盘抽奖游戏</h3><blockquote><p>编写程序模拟轮盘抽奖游戏<br>分析：抽奖数字范围为1～100</p><ol><li>抽中的数字在1～3范围，为特等奖，奖金为10000元</li><li>抽中的数字在4～10范围，为一等奖，奖金为5000元</li><li>抽中的数字在11～30范围，为二等奖，奖金为1000元</li><li>抽中的数字在31～100范围，为三等奖，奖金为300元</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="comment">#定义抽奖函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cjhs</span>(<span class="params">jxfb</span>):</span><br><span class="line">  zpds = random.randint(<span class="number">1</span>,<span class="number">100</span>)                    </span><br><span class="line">  <span class="comment">#根据zpds所在范围返回抽奖类型</span></span><br><span class="line">  <span class="keyword">for</span> jxjg,kdfw <span class="keyword">in</span> jxfb.items():</span><br><span class="line">    <span class="keyword">if</span> kdfw[<span class="number">0</span>] &lt;= zpds <span class="keyword">and</span>  zpds &lt;= kdfw[<span class="number">1</span>]:</span><br><span class="line">      <span class="keyword">return</span> jxjg</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="comment">#各奖项分布比例.</span></span><br><span class="line">  jxfb = &#123;<span class="string">&#x27;特等奖&#x27;</span>:(<span class="number">1</span>,<span class="number">3</span>),<span class="string">&#x27;一等奖&#x27;</span>:(<span class="number">4</span>,<span class="number">10</span>),<span class="string">&#x27;二等奖&#x27;</span>:(<span class="number">11</span>,<span class="number">30</span>),<span class="string">&#x27;三等奖&#x27;</span>:(<span class="number">31</span>,<span class="number">100</span>)&#125;</span><br><span class="line">  <span class="comment">#各奖项奖金.</span></span><br><span class="line">  jxjj = &#123;<span class="string">&#x27;特等奖&#x27;</span>:<span class="number">10000</span>元,<span class="string">&#x27;一等奖&#x27;</span>:<span class="number">5000</span>元,<span class="string">&#x27;二等奖&#x27;</span>:<span class="number">1000</span>元,<span class="string">&#x27;三等奖&#x27;</span>:<span class="number">300</span>元&#125;</span><br><span class="line">  zjqk = <span class="built_in">dict</span>()                       <span class="comment">#中奖情况</span></span><br><span class="line">  <span class="comment">#1轮抽奖的次数.</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    bczk = cjhs(jxfb)</span><br><span class="line">    zjqk[bczk] = zjqk.get(bczk,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">  zjj = <span class="number">0</span>                            <span class="comment">#总奖金</span></span><br><span class="line"> <span class="comment">#根据奖项类型和奖项奖金计算所得奖金情况.</span></span><br><span class="line">  <span class="keyword">for</span> key,value <span class="keyword">in</span> zjqk.items():</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;特等奖&quot;</span>: zjj = zjj + value * jxjj[key]</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;一等奖&quot;</span>: zjj = zjj + value * jxjj[key]</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;二等奖&quot;</span>: zjj = zjj + value * jxjj[key]</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">&quot;三等奖&quot;</span>: zjj = zjj + value * jxjj[key]</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;本轮游戏中奖情况:&quot;</span>,zjqk)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;本轮游戏共获得总奖金 =&quot;</span>,zjj)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果：(1次运行结果)</span></span><br><span class="line"><span class="string">本轮游戏中奖情况: &#123;&#x27;二等奖&#x27;: 7, &#x27;三等奖&#x27;: 18, &#x27;特等奖&#x27;: 2, &#x27;一等奖&#x27;: 3&#125;</span></span><br><span class="line"><span class="string">本轮游戏共获得总奖金 = 47400元</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 align="center">🌴 2022.04.20 下午</h1><h1 id="6-面向对象程序设计"><a href="#6-面向对象程序设计" class="headerlink" title="6 面向对象程序设计"></a>6 面向对象程序设计</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><h3>🚀 程序设计方法</h3><blockquote><ul><li>计算机程序设计的语言有很多种，如C&#x2F;C++、C#、Java和Python等</li><li>程序设计语言描述计算机系统的方式一般有两种：面向过程程序设计(Procedure Oriented Programming， POP)和面向对象程序设计(Object Oriented Programming，OOP)</li><li>POP把计算机程序视为一系列命令的集合，即一组函数按照事先设定的顺序依次执行，函数是程序的基本单元</li><li>为了简化程序设计，把函数继续分解为子函数来降低程序的复杂度。使用POP的程序设计语言有C、Python等</li><li>OOP是一种新的程序设计思想和方法。OOP把计算机程序视为一组对象(Object)的集合，每个对象都可以接收其他对象发送的消息，并处理这些消息。 计算机程序的执行指一系列消息在各个对象之间传递</li><li>支持OOP的程序设计语言有C++、C#、Java、Python等</li><li>OOP的基本思想是，将数据以及对数据的操作封装在一起，组成一个相互依存、不可分割的整体，即<strong>对象</strong></li><li>对相同类型的对象进行分类、抽象后，得出共同特征而形成<strong>类</strong></li><li>面向对象程序设计的关键是，如何合理地定义和组织这些类及类之间的关系</li><li>OOP的基本概念包括对象、类、消息、封装、继承和多态等。其中，封装、继承和多态是OOP最重要的三个特征</li></ul></blockquote><h3>🚀 Python中的面向对象程序设计</h3><blockquote><p>Python不仅支持POP，更是一种面向对象、高级的动态编程语言，完全支持OOP的各项功能，如封装、继承、多态及对类方法的覆盖或重写等</p><p>Python中对象的概念很广泛，一切内容都可以看成对象</p></blockquote><h2 id="6-2-类与对象"><a href="#6-2-类与对象" class="headerlink" title="6.2 类与对象"></a>6.2 类与对象</h2><h3 id="6-2-1-类的定义"><a href="#6-2-1-类的定义" class="headerlink" title="6.2.1 类的定义"></a>6.2.1 类的定义</h3><blockquote><p>类是一种类型，对象是该类型的一个变量</p><p>类是抽象的，一般不占用内存空间；对象是具体的，创建一个对象时要为其特征分配相应的内存空间</p></blockquote><blockquote><p>定义类的一般格式为：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;类说明&quot;&quot;&quot;</span></span><br><span class="line">    类体</span><br></pre></td></tr></table></figure><blockquote><ol><li>组成：主要由类头和类体两部分组成</li><li>类头：由关键字class开头，后面是类的名称</li><li>类体：类体中包含类的实现细节，向右缩进对齐。类体中一般包含两部分内容</li><li>数据成员：用来存储特征的值(体现对象的特征)，简称为成员</li><li>成员方法：用来对成员进行操作(体现对象的行为)，简称为方法</li><li>类说明：类中也可以选择性添加类的文档字符串，对类的功能等进行说明(就是通过注释生成自己的一个API文档)</li></ol></blockquote><blockquote><ul><li>要使用类中定义的成员和方法，必须对类实例化，即创建类的对象</li><li>在Python中，使用赋值的方式创建类的对象，其一般格式为：<code>对象名 = 类名([参数列表])</code></li><li>对象创建后，可以使用“对象.成员”“对象.方法()”调用该类的成员和方法</li></ul></blockquote><h3 id="6-2-2-对象创建和使用"><a href="#6-2-2-对象创建和使用" class="headerlink" title="6.2.2 对象创建和使用"></a>6.2.2 对象创建和使用</h3><blockquote><p>创建一个类的对象，调用类中的方法</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">  <span class="comment">#定义构造方法,self代表类的对象，而非类本身</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">  <span class="comment">#定义方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getName</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.name</span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">c1 = Car(<span class="string">&quot;奔驰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这辆汽车的品牌:&quot;</span>,c1.getName())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这辆汽车的品牌: 奔驰</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-类的成员"><a href="#6-3-类的成员" class="headerlink" title="6.3 类的成员"></a>6.3 类的成员</h2><h3 id="6-3-1-成员类型"><a href="#6-3-1-成员类型" class="headerlink" title="6.3.1 成员类型"></a>6.3.1 成员类型</h3><blockquote><p>按照能否在类的外面直接访问，类的成员可分为如下两种</p><ol><li>公有成员：公有成员不以下画线开头，在类的内部可以访问，在类的外面也可以访问</li><li>私有成员：以单下画线或双下画线开头，在类的外面不能直接访问，只能在类的内部访问或在类的外面通过对象的公有方法访问</li></ol><p>在形式上，以单下画线或双下画线开头的是私有成员</p><ol><li><code>_xxx</code>：一个以下画线开头的成员。<strong>类和派生类可以访问这些成员</strong></li><li><code>__xxx</code>：以两个或更多下画线开头但不能以两个或更多下画线结束的成员。对该成员，<strong>只有类自己可以访问</strong>，派生类也不能访问</li></ol><p>按照归属于类还是对象，类的成员可分为两类</p><ol><li>类成员：定义在类体中且在所有方法外的成员为类成员。类成员属于类本身，一般通过<strong>类名调用</strong>，不建议使用对象名调用</li><li>实例成员：在类的方法中定义的成员为实例成员。实例成员只能被对象调用。实例成员一般在构造方法<code>__init__()</code>中创建，或在其他方法中创建</li></ol></blockquote><blockquote><p>创建及使用类的公有成员和私有成员</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age</span>):</span><br><span class="line">    self.name = name          <span class="comment">#定义公有成员</span></span><br><span class="line">    self._sex = sex           <span class="comment">#定义单下画线私有成员</span></span><br><span class="line">    self.__age = age          <span class="comment">#定义双下画线私有成员</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getAge</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__age</span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">w = Woman(<span class="string">&quot;小芳&quot;</span>,<span class="string">&quot;Female&quot;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;姓名: %s, 性别: %s, 年龄: %d.&quot;</span>%(w.name,w._sex,w.getAge()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">姓名: 小芳, 性别: Female, 年龄: 18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>类成员和实例成员的创建及使用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">  chinese = <span class="number">142</span>                         </span><br><span class="line">  maths = <span class="number">1</span>                             </span><br><span class="line">  english = <span class="number">141</span>                          </span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):                          </span><br><span class="line">    self.name = name                    </span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">s1 = Student(<span class="string">&quot;马允&quot;</span>)                                                   </span><br><span class="line"><span class="built_in">print</span>(s1.name + <span class="string">&quot;的语文成绩: &quot;</span> + <span class="built_in">str</span>(Student.chinese))     </span><br><span class="line"><span class="built_in">print</span>(s1.name + <span class="string">&quot;的数学成绩: &quot;</span> + <span class="built_in">str</span>(Student.maths))   </span><br><span class="line"><span class="built_in">print</span>(s1.name + <span class="string">&quot;的英语成绩: &quot;</span> + <span class="built_in">str</span>(Student.english))  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">马允的语文成绩: 142</span></span><br><span class="line"><span class="string">马允的数学成绩: 1</span></span><br><span class="line"><span class="string">马允的英语成绩: 141</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>动态添加类的成员</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,p</span>):</span><br><span class="line">    self.name = n</span><br><span class="line">    self.price = p</span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">book1 = Book(<span class="string">&quot;堂吉诃德&quot;</span>,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;书名:&quot;</span>,book1.name,<span class="string">&quot;价格:&quot;</span>,book1.price)</span><br><span class="line">book1.author = <span class="string">&#x27;塞万提斯&#x27;</span>                           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;书名:&quot;</span>,book1.name,<span class="string">&quot;作者:&quot;</span>,book1.author,<span class="string">&quot;价格:&quot;</span>,book1.price)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">书名: 堂吉诃德 价格: 32</span></span><br><span class="line"><span class="string">书名: 堂吉诃德 作者: 塞万提斯 价格: 32</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-内置成员"><a href="#6-3-2-内置成员" class="headerlink" title="6.3.2 内置成员"></a>6.3.2 内置成员</h3><blockquote><p>所有的类(无论是系统内置的类还是自定义类)都有一组特殊的成员，其前后各有两个下画线，是类的内置成员</p><ol><li><code>__name__</code>：类的名字，用字符串表示</li><li><code>__doc__</code>：类的文档字符串</li><li><code>__bases__</code>：由所有父类组成的元组</li><li><code>__dict__</code>：由类的成员组成的字典</li><li><code>__module__</code>：类所属模块</li></ol></blockquote><blockquote><p>查看异常类Exception的内置成员</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类的名字:&quot;</span>,Exception.__name__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类的父类:&quot;</span>,Exception.__bases__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类的文档:&quot;</span>,Exception.__doc__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类的成员:&quot;</span>,Exception.__dict__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类所属模块:&quot;</span>,Exception.__module__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">类的名字: Exception</span></span><br><span class="line"><span class="string">类的父类: (&lt;class &#x27;BaseException&#x27;&gt;,)</span></span><br><span class="line"><span class="string">类的文档: Common base class for all non-exit exceptions.</span></span><br><span class="line"><span class="string">类的成员: &#123;&#x27;__init__&#x27;: &lt;slot wrapper &#x27;__init__&#x27; of &#x27;Exception&#x27; objects&gt;, :</span></span><br><span class="line"><span class="string">类所属模块: builtins</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-4-类的方法"><a href="#6-4-类的方法" class="headerlink" title="6.4 类的方法"></a>6.4 类的方法</h2><h3 id="6-4-1-方法类型"><a href="#6-4-1-方法类型" class="headerlink" title="6.4.1 方法类型"></a>6.4.1 方法类型</h3><blockquote><ol><li>公有方法。公有方法的名字不以下画线开头，可以在类的外面通过类名或对象名调用</li><li>私有方法。私有方法以2个或更多下画线开头，可以在类的方法中通过self调用，不能在类的外面直接调用</li><li>静态方法和类方法。静态方法和类方法成员可以通过类名和对象名调用，但不能直接访问属于对象的成员，只能访问属于类的成员，不属于任何对象。静态方法使用装饰器<code>@staticmethod</code>声明，类方法使用装饰器<code>@classmethod</code>声明</li><li>抽象方法。抽象方法一般定义在抽象类中并要求派生类对抽象方法进行实现</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">function_p</span>(<span class="params">self</span>):            </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在公有方法中调用:&quot;</span>,self.__function())  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;公有方法 &#x27;function_p&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__function</span>(<span class="params">self</span>):            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;私有方法 &#x27;__function&#x27;&quot;</span></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">function_c</span>(<span class="params">cls</span>):            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;类方法 &#x27;function_c&#x27;&quot;</span></span><br><span class="line"><span class="meta">  @staticmethod</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">function_s</span>():          </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;静态方法 &#x27;function_s&#x27;&quot;</span></span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">a1 = A()                                 </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对象调用: &quot;</span> + a1.function_p())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对象调用: &quot;</span> + a1.function_c())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对象调用: &quot;</span> + a1.function_s())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类名调用: &quot;</span> + A.function_p(a1))               </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类名调用: &quot;</span> + A.function_c())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;类名调用: &quot;</span> + A.function_s()) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在公有方法中调用: 私有方法 &#x27;__function&#x27;</span></span><br><span class="line"><span class="string">对象调用: 公有方法 &#x27;function_p&#x27;</span></span><br><span class="line"><span class="string">对象调用: 类方法 &#x27;function_c&#x27;</span></span><br><span class="line"><span class="string">对象调用: 静态方法 &#x27;function_s&#x27;</span></span><br><span class="line"><span class="string">在公有方法中调用: 私有方法 &#x27;__function&#x27;</span></span><br><span class="line"><span class="string">类名调用: 公有方法 &#x27;function_p&#x27;</span></span><br><span class="line"><span class="string">类名调用: 类方法 &#x27;function_c&#x27;</span></span><br><span class="line"><span class="string">类名调用: 静态方法 &#x27;function_s&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2-属性"><a href="#6-4-2-属性" class="headerlink" title="6.4.2 属性"></a>6.4.2 属性</h3><blockquote><ul><li>属性：一种特殊形式的方法，结合了成员和方法的各自优点，既可以通过属性访问类中的成员，也可以在访问前对用户为成员提供数据的合法性进行检测，还可以设置成员的访问机制</li><li>属性通常包括get()方法和set()方法。前者用于获取成员的值，后者用于设置成员的值</li><li>除此之外，属性也可以包含其他方法，如删除方法<code>del()</code>等</li></ul></blockquote><blockquote><p>使用属性访问并检查私有成员值的合法性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self,radius</span>):</span><br><span class="line">    <span class="keyword">if</span> radius &gt;  <span class="number">0</span>:</span><br><span class="line">      self.__radius  =  radius</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;圆的面积为: &#123;0&#125;.&quot;</span>.<span class="built_in">format</span>(<span class="number">3.14</span> * self.__radius ** <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;半径 %f 不在规定范围内(&gt;=0)，请重新设置!&quot;</span>% radius)</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.__radius         </span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">c = Circle()</span><br><span class="line">c.<span class="built_in">set</span>(<span class="number">2.5</span>)</span><br><span class="line">c.<span class="built_in">set</span>(-<span class="number">2.5</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">圆的面积为: 19.625.</span></span><br><span class="line"><span class="string">半径 -2.500000 不在规定范围内(&gt;=0)，请重新设置!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用属性访问私有成员</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__get</span>(<span class="params">self</span>):                 <span class="comment">#读成员方法</span></span><br><span class="line">    <span class="keyword">return</span> self.__value</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__set</span>(<span class="params">self,value</span>):           <span class="comment">#写成员方法</span></span><br><span class="line">    self.__value = value</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__del</span>(<span class="params">self</span>):                 <span class="comment">#删除成员方法</span></span><br><span class="line">    <span class="keyword">del</span> self.__value</span><br><span class="line">  value = <span class="built_in">property</span>(__get,__<span class="built_in">set</span>,__<span class="keyword">del</span>)    </span><br><span class="line">t = Test()</span><br><span class="line">t.value = <span class="number">100</span>                       <span class="comment">#写成员</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;value = %d.&quot;</span>%t.value)   <span class="comment">#读成员</span></span><br><span class="line"><span class="keyword">del</span> t.value                        <span class="comment">#删除成员</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;value = %d.&quot;</span>%t.value)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">value = 100.</span></span><br><span class="line"><span class="string">AttributeError: &#x27;Test&#x27; object has no attribute &#x27;_Test__value&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-3-特殊方法"><a href="#6-4-3-特殊方法" class="headerlink" title="6.4.3 特殊方法"></a>6.4.3 特殊方法</h3><blockquote><p>在Python中，类有大量的特殊方法，其中比较常见的是构造方法<code>__init__()</code>和析构方法<code>__del__()</code></p><ul><li>构造方法<code>__init__()</code>用来为类中的成员设置初始值或进行必要的初始化工作，在类实例化时被自动调用和执行</li><li>析构方法<code>__del__()</code>一般用来释放对象占用的资源，在删除对象和回收对象空间时被自动调用和执行</li></ul></blockquote><blockquote><p>构造方法和析构方法的使用</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">object</span>):                            </span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,w,h</span>):</span><br><span class="line">    self.w = w</span><br><span class="line">    self.h = h</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行构造方法...&#x27;</span>)</span><br><span class="line">  <span class="comment">#定义求面积方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getArea</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self.w * self.h</span><br><span class="line">  <span class="comment">#定义析构方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行析构方法...&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  rect = Rectangle(<span class="number">3</span>,<span class="number">4</span>)       <span class="comment">#创建对象，调用构造方法__init__()</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积为:&quot;</span>,rect.getArea())       </span><br><span class="line">  <span class="keyword">del</span> rect                    <span class="comment">#删除对象，调用析构方法__del__()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">执行构造方法...</span></span><br><span class="line"><span class="string">面积为: 12</span></span><br><span class="line"><span class="string">执行析构方法...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-类的继承与多态"><a href="#6-5-类的继承与多态" class="headerlink" title="6.5 类的继承与多态"></a>6.5 类的继承与多态</h2><h3 id="6-5-1-类的继承"><a href="#6-5-1-类的继承" class="headerlink" title="6.5.1 类的继承"></a>6.5.1 类的继承</h3><blockquote><p>继承类称为派生类或子类，被继承类称为父类或基类</p><p>在Python中，派生类可以继承一个父类(单继承)或多个父类(多继承)</p><p>当派生类继承多个父类时，多个父类之间用逗号隔开</p><p>创建派生类的格式为：</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">派生类</span>(父类<span class="number">1</span>，父类<span class="number">2</span>，…):</span><br><span class="line">    类体</span><br></pre></td></tr></table></figure><blockquote><p>派生类可以继承父类的成员和方法，也可以定义自己的成员和方法</p><p>如果父类方法不能满足要求，派生类也可以重写父类的方法</p></blockquote><blockquote><p>类的单继承</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义People类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a</span>):</span><br><span class="line">    self.name = n</span><br><span class="line">    self.age = a</span><br><span class="line">  <span class="comment">#定义公有方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是%s，今年%d岁.&quot;</span> % (self.name,self.age))</span><br><span class="line"><span class="comment">#定义Student类，继承类People</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,g</span>):</span><br><span class="line">    People.__init__(self,n,a)                </span><br><span class="line">    self.grade = g</span><br><span class="line">  <span class="comment">#重写父类的方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是%s，今年%d岁，读%d年级.&quot;</span> % (self.name,self.age,self.grade))</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">function_a</span>(<span class="params">self</span>)</span><br><span class="line">    <span class="comment">#类内调用两种</span></span><br><span class="line">    <span class="built_in">super</span>(Student,self).speak();</span><br><span class="line">    self.speak()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="comment">#创建Student类的对象.</span></span><br><span class="line">  s = Student(<span class="string">&#x27;孔融&#x27;</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">  s.speak()                                </span><br><span class="line">  <span class="built_in">super</span>(Student,s).speak()</span><br><span class="line">  s.function_a()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是孔融，今年10岁，读4年级.</span></span><br><span class="line"><span class="string">我是孔融，今年10岁.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>类的多继承</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义People类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a</span>):</span><br><span class="line">    self.name = n</span><br><span class="line">  <span class="comment">#定义公有方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s说: 我今年%d岁.&quot;</span> % (self.name,self.age))</span><br><span class="line"><span class="comment">#定义Speaker类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Speaker</span>():</span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">    self.name = n</span><br><span class="line">    self.topic = t</span><br><span class="line"> <span class="comment">#定义公有方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我叫%s，是一名科学家，今天演讲的主题是%s.&quot;</span> % (self.name,self.topic))</span><br><span class="line"><span class="comment">#定义Scientist类，继承People类和Speaker类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scientist</span>(Speaker,People):</span><br><span class="line">  <span class="comment">#定义构造方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,t</span>):</span><br><span class="line">    People.__init__(self,n,a)</span><br><span class="line">    Speaker.__init__(self,n,t)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="comment">#创建Scientist类的对象，传入参数.</span></span><br><span class="line">  Hawkin = Scientist(<span class="string">&quot;霍金&quot;</span>,<span class="number">50</span>,<span class="string">&quot;《时间简史》&quot;</span>)</span><br><span class="line">  Hawkin.speak()               </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我叫霍金，是一名科学家，今天演讲的主题是《时间简史》.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-2-类的多态"><a href="#6-5-2-类的多态" class="headerlink" title="6.5.2 类的多态"></a>6.5.2 类的多态</h3><blockquote><p>多态(Polymorphism)：一般是指父类的一个方法在不同派生类对象中具有不同表现和行为</p><p>派生类在继承了父类的行为和属性之后，还可能增加某些特定的行为和属性，也可能会对继承父类的行为进行一定的改变，这些都是多态的表现形式</p></blockquote><blockquote><p>类的多态实现</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义类Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>():</span><br><span class="line">  <span class="comment">#定义方法</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am an animal.&quot;</span></span><br><span class="line"><span class="comment">#定义类，继承类Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">  <span class="comment">#重写父类方法  getInfo().</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am a lion.&quot;</span></span><br><span class="line"><span class="comment">#定义类，继承类Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">  <span class="comment">#重写父类方法getInfo().</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am a tiger.&quot;</span></span><br><span class="line"><span class="comment">#定义类，继承类Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leopard</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">  <span class="comment">#重写父类方法getInfo()</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getInfo</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am a leopard.&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    objectList = [item() <span class="keyword">for</span> item <span class="keyword">in</span> (Animal,Lion,Tiger,Leopard)]</span><br><span class="line">  <span class="comment">#不同对象调用同一方法</span></span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">object</span> <span class="keyword">in</span> objectList:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">object</span>.getInfo())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">I am an animal.</span></span><br><span class="line"><span class="string">I am a lion.</span></span><br><span class="line"><span class="string">I am a tiger.</span></span><br><span class="line"><span class="string">I am a leopard.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-6-抽象类和抽象方法"><a href="#6-6-抽象类和抽象方法" class="headerlink" title="6.6 抽象类和抽象方法"></a>6.6 抽象类和抽象方法</h2><blockquote><p>抽象类往往用来表征对问题领域进行分析、设计中得出的抽象概念，是对一系列看上去不同但本质上相同的概念抽象</p><p>抽象类特点：抽象类中通常包含抽象方法(没有实现功能)，该类不能被实例化，只能被继承，且派生类必须实现抽象类中的抽象方法</p><p>Python中一般使用抽象基类(Abstract Base Class，ABC)来实现抽象类</p><p>ABC主要定义了基本类和最基本的抽象方法，可以为派生类定义公有的API，不需要具体实现，相当于Java中的接口或抽象类</p></blockquote><h1 align="center">🌴 2022.05.07 下午</h1><h1 id="7-模块包库"><a href="#7-模块包库" class="headerlink" title="7 模块包库"></a>7 模块包库</h1><h2 id="7-1-前言"><a href="#7-1-前言" class="headerlink" title="7.1 前言"></a>7.1 前言</h2><p>模块(Module)：一个以<code>.py</code> 结尾的Python文件，包含了 Python 对象和语句</p><p>包(Package)：Python模块文件所在的目录，并且在该目录下必须有一个名为<code>_init_.py</code>的文件</p><p>库(Library)：具有相关功能的包和模块集合，如Python标准库、NumPy库等</p><h2 id="7-2-常用标准库模块"><a href="#7-2-常用标准库模块" class="headerlink" title="7.2 常用标准库模块"></a>7.2 常用标准库模块</h2><h3 id="7-2-1-Turtle"><a href="#7-2-1-Turtle" class="headerlink" title="7.2.1 Turtle"></a>7.2.1 Turtle</h3><blockquote><p> Turtle是Python内嵌的绘制线、圆及其他形状(包括文本)的图形模块</p></blockquote><p>1．画布(Canvas)<br>画布是Turtle模块展开用于绘图的区域</p><ul><li>使用<code>turtle.screensize()</code>函数设置画布的一般格式为： <code>turtle.screensize(width,height,bg)</code>  ，例如，<code>turtle.screensize(600, 400, &quot;black&quot;)</code>设置画布的宽为600、高为400、背景颜色为黑色</li><li>使用<code>turtle. setup()</code>函数设置画布的一般格式为：<code>turtle.setup(width,height,startx,starty)</code>，例如，<code>turtle.setup(width=800, height=600, startx=100, starty=100)</code>设置画布宽和高分别为800和600，画布左上角顶点在窗口的坐标位置为(100,100)</li></ul><p>2．画笔<br>(1) 画笔状态。Turtle模块绘图使用位置方向描述画笔的状态<br>(2) 画笔属性。画笔的属性包括画笔的颜色、宽度和移动速度等</p><ul><li><code>turtle.pensize(width)</code>：设置画笔宽度width，数字越大，画笔越宽</li><li><code>turtle.pencolor(color)</code>：设置画笔颜色color，可以是字符串如”red”、”yellow”，或RGB格式</li><li><code>turtle.speed(speed)</code>：设置画笔移动速度speed，范围为[0,10]的整数，数字越大，画笔移动的速度越快</li></ul><p>(3)绘图命令：操纵Turtle模块绘图有许多命令，通过相应函数完成。绘图命令通常分为三类：画笔运动命令、画笔控制命令和全局控制命令</p><blockquote><p>使用Turtle模块绘制一个圆和一个填充的正方形</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle                <span class="comment">#导入模块</span></span><br><span class="line">turtle.penup()                                         </span><br><span class="line">turtle.goto(-<span class="number">150</span>,<span class="number">0</span>)                                      </span><br><span class="line">turtle.pendown()                                      </span><br><span class="line">turtle.pencolor(<span class="string">&#x27;blue&#x27;</span>)      <span class="comment">#画笔颜色为蓝色</span></span><br><span class="line">turtle.begin_fill()                                      </span><br><span class="line">turtle.fillcolor(<span class="string">&#x27;blue&#x27;</span>)     <span class="comment">#填充颜色为蓝色</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  turtle.forward(<span class="number">100</span>)        <span class="comment">#画笔向当前方向移动距离100 </span></span><br><span class="line">  turtle.left(<span class="number">90</span>)            <span class="comment">#画笔逆时针旋转90°                 </span></span><br><span class="line">turtle.end_fill() </span><br><span class="line"><span class="comment">#画圆</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(<span class="number">100</span>,<span class="number">0</span>)           <span class="comment">#将画笔移动到指定的绝对坐标位置(100,0)</span></span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.color(<span class="string">&#x27;red&#x27;</span>)          <span class="comment">#画笔颜色为红色</span></span><br><span class="line">turtle.pensize(<span class="number">3</span>)            <span class="comment">#画笔宽度为3.</span></span><br><span class="line">turtle.circle(<span class="number">50</span>)            <span class="comment">#圆的半径为50</span></span><br><span class="line">turtle.done()                <span class="comment">#使绘图容器不消失</span></span><br></pre></td></tr></table></figure><blockquote><p>使用Turtle模块在画布上写文字</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle                                            </span><br><span class="line">t = turtle.Turtle()              <span class="comment">#创建turtle对象</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">80</span>,<span class="number">20</span>)</span><br><span class="line">t.write(<span class="string">&quot;望庐山瀑布&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">14</span>,<span class="string">&quot;normal&quot;</span>)) <span class="comment">#设置字体、大小、加粗</span></span><br><span class="line">t.sety(-<span class="number">10</span>)                     <span class="comment">#画笔向下移动到-10</span></span><br><span class="line">t.write(<span class="string">&quot;日照香炉生紫烟&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">14</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">t.sety(-<span class="number">40</span>)                      <span class="comment">#画笔向下移动到-40</span></span><br><span class="line">t.write(<span class="string">&quot;遥看瀑布挂前川&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">14</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">t.sety(-<span class="number">70</span>)                    <span class="comment">#画笔向下移动</span></span><br><span class="line">t.write(<span class="string">&quot;飞流直下三千尺&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">14</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">t.sety(-<span class="number">100</span>)                   <span class="comment">#画笔向下移动</span></span><br><span class="line">t.write(<span class="string">&quot;疑是银河落九天&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">14</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">t.hideturtle()                                               </span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h3 id="7-2-2-Random"><a href="#7-2-2-Random" class="headerlink" title="7.2.2 Random"></a>7.2.2 Random</h3><h4>🚀 random.random()函数</h4><p><code>random.random()</code>函数用于生成一个[0, 1)之间的随机浮点数，其一般格式为：<code>random.random()</code></p><blockquote><p>使用random.random()函数生成5个[0, 1)之间的随机浮点数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                                              </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):                                                </span><br><span class="line">  <span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.43511825592243447</span></span><br><span class="line"><span class="string">0.7599585286688377</span></span><br><span class="line"><span class="string">0.511071683639099</span></span><br><span class="line"><span class="string">0.9829050908694336</span></span><br><span class="line"><span class="string">0.07342341214429426</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 random.uniform()函数</h4><p><code>random.uniform()</code>函数用于生成一个指定范围内的随机符点数，其一般格式为：<code>random.uniform(a,b)</code></p><blockquote><p>使用random.uniform()函数生成指定范围的随机浮点数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                    </span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">3</span>,<span class="number">6</span>))  </span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">8</span>,<span class="number">6</span>))  </span><br><span class="line"><span class="built_in">print</span>(random.uniform(-<span class="number">1</span>,<span class="number">1</span>))   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[61, 25, 40, 75, 7]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 random.randrange()函数</h4><blockquote><p><code>random.randrange()</code>函数用于生成指定范围、指定步长的随机整数，其一般格式为：<code>random.randrange([start],stop[,step])</code></p></blockquote><blockquote><p>使用<code>random.randrange()</code>函数随机生成10个1～100范围的奇数添加到列表中</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                               </span><br><span class="line">list1 = []                                    </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):                        </span><br><span class="line">  list1.append(random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(list1) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[41, 81, 3, 71, 59, 75, 89, 31, 23]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 random.choice()函数</h4><blockquote><p><code>random.choice()</code>函数的功能是从序列对象中获取一个随机元素，其一般格式为：<code>random.choice(sequence)</code></p></blockquote><blockquote><p>使用random.choice()函数从列表中随机获取一个元素</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                       </span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]         </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):                  </span><br><span class="line">  r = random.choice(list1) </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;r =&quot;</span>,r) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">r = 4</span></span><br><span class="line"><span class="string">r = 8</span></span><br><span class="line"><span class="string">r = 3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 random.shuffle()函数</h4><blockquote><p><code>random.shuffle()</code>函数用于将一个序列对象中的元素打乱，其一般格式为： <code>random.shuffle(sequence[,random])</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                    </span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]     </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):               </span><br><span class="line">  random.shuffle(list1)           </span><br><span class="line">  <span class="built_in">print</span>(list1) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[7, 5, 1, 3, 8, 2, 6, 4]</span></span><br><span class="line"><span class="string">[6, 3, 5, 7, 1, 4, 2, 8]</span></span><br><span class="line"><span class="string">[2, 5, 4, 7, 1, 3, 6, 8]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 random.sample()函数</h4><blockquote><p><code>random.sample()</code>函数从指定序列对象中随机获取指定长度的片段，其一般格式为：<code>random.sample(sequence,k)</code></p></blockquote><blockquote><p>使用random.sample()函数从列表中随机选择若干元素形成一个新列表</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                     </span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]      </span><br><span class="line">slice1 = random.sample(list1,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice1:&quot;</span>,slice1) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">slice1: [4, 3, 5, 1]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-Time-amp-Datetime"><a href="#7-2-3-Time-amp-Datetime" class="headerlink" title="7.2.3 Time &amp; Datetime"></a>7.2.3 Time &amp; Datetime</h3><h4>🚀 Time模块</h4><blockquote><p>Time模块主要用于时间访问和转换，提供了各种与时间相关的函数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time                                                      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间戳格式时间:&quot;</span>,time.time())<span class="comment"># 时间戳格式时间: 1537320859.5078118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;struct_time格式时间:&quot;</span>,time.localtime(time.time()))<span class="comment">#struct_time格式时间: time.struct_time(tm_year=2018, tm_mon=9, tm_mday=19,</span></span><br><span class="line">tm_hour=<span class="number">9</span>, tm_min=<span class="number">34</span>, tm_sec=<span class="number">19</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">262</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串格式时间:&quot;</span>,time.ctime())<span class="comment"># 字符串格式时间: Wed Sep 19 09:34:19 2022</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串格式时间:&quot;</span>,time.asctime())<span class="comment"># 字符串格式时间: Wed Sep 19 09:34:19 2022</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>,time.localtime()))  <span class="comment"># 2022-09-19 09:34</span></span><br></pre></td></tr></table></figure><h4>🚀 Datetime模块</h4><blockquote><p>date类为日期类。创建一个date对象的一般格式为：<code>d = datetime.date(year,month,day)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">d = date.today()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前本地日期:&quot;</span>,d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;日期: %d 年 %d 月 %d日.&quot;</span>%(d.year,d.month,d.day))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天是周 %d.&quot;</span>%d.isoweekday())  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当前本地日期:2022-05-07</span></span><br><span class="line"><span class="string">日期: 2022 年 5 月 7日.</span></span><br><span class="line"><span class="string">今天是周 6.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>Time类为时间类。创建一个time对象的一般格式为：<code>t = time(hour,[minute[,second,[microsecond[,tzinfo]]]])</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> time               </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间最大值:&quot;</span>,time.<span class="built_in">max</span>)           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间最小值:&quot;</span>,time.<span class="built_in">min</span>)            </span><br><span class="line">t = time(<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">8888</span>)       <span class="comment">#创建time对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间: %d时%d分%d秒%d微秒.&quot;</span>%(t.hour,t.minute,t.second,t.microsecond))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">时间最大值: 23:59:59.999999</span></span><br><span class="line"><span class="string">时间最小值: 00:00:00</span></span><br><span class="line"><span class="string">时间: 20时30分50秒8888微秒</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>Datetime类为日期时间类。创建一个datetime对象的一般格式为： <code>dt = datetime(year,month,day,hour,minute,second,microsecond,tzinfo)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime                    </span><br><span class="line">dt = datetime.now()                                           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前日期:&quot;</span>,dt.date())                        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前时间:&quot;</span>,dt.time())                       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前年份: %d,当前月份: %d,当前日期: %d.&quot;</span>%(dt.year,dt.month,dt.day))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间:&quot;</span>,datetime(<span class="number">2018</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">12</span>,<span class="number">20</span>,<span class="number">36</span>))   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当前日期: 2022-05-07</span></span><br><span class="line"><span class="string">当前时间: 14:38:59.054000</span></span><br><span class="line"><span class="string">当前年份: 2022, 当前月份: 5, 当前日期: 07.</span></span><br><span class="line"><span class="string">时间: 2022-05-07 14:40:36</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>timedelta对象表示两个不同时间之间的差值。 <code>td = datetime.timedelta(days,seconds,microseconds,milliseconds,hours,weeks)</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta                </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1周包含的总秒数：&quot;</span>,timedelta(days=<span class="number">7</span>).total_seconds())  </span><br><span class="line">d = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前本地系统时间:&quot;</span>,d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1天后:&quot;</span>,d + timedelta(days=<span class="number">1</span>))                        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1天前:&quot;</span>,d + timedelta(days=-<span class="number">1</span>))                       </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1周包含的总秒数: 604800.0</span></span><br><span class="line"><span class="string">当前本地系统时间: 2022-05-07 14:48:23.400000</span></span><br><span class="line"><span class="string">1天后: 2022-05-07 14:48:23.400000</span></span><br><span class="line"><span class="string">1天前: 2022-05-07 14:48:23.400000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-4-Os"><a href="#7-2-4-Os" class="headerlink" title="7.2.4 Os"></a>7.2.4 Os</h3><h4>🚀 获取平台信息</h4><p>使用Os模块的一些属性和方法可以获取系统平台的相关信息</p><ul><li><code>os.getcwd()</code>：获取当前工作目录</li><li><code>os.sep</code>：查看操作系统特定的路径分隔符</li><li><code>os.linesep</code>：查看当前平台使用的行终结符</li><li><code>os.pathsep</code>：查看用于分割文件路径的字符串</li><li><code>os.name</code>：查看当前系统平台</li><li><code>os.environ</code>：查看当前系统的环境变量</li></ul><blockquote><p>使用Os模块获取系统相关信息</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os                                </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分隔符:&quot;</span>,os.sep)                    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;操作系统平台:&quot;</span>,os.name)           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;环境变量path:&quot;</span>,os.getenv(<span class="string">&#x27;path&#x27;</span>))    </span><br></pre></td></tr></table></figure><h4>🚀 目录、文件操作</h4><ul><li><code>os.mkdir(newdir)</code>：创建新目录newdir</li><li><code>os.rmdir(dir)</code>：删除目录dir</li><li><code>os.listdir(path)</code>：列出指定目录path下所有文件</li><li><code>os.chdir(path)</code>：改变当前脚本的工作目录为指定路径path</li><li><code>os.remove(file)</code>：删除一个指定文件file</li><li><code>os.rename(oldnam,newname)</code>：重命名一个文件</li></ul><blockquote><p>使用Os模块对目录、文件进行操作</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os                                                    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前工作路径:&quot;</span>,os.getcwd())                              </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前路径的目录和文件列表:&quot;</span>,os.listdir())                    </span><br><span class="line">os.rename(<span class="string">&quot;test1.py&quot;</span>,<span class="string">&quot;test2.py&quot;</span>)                                </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重命名文件后,当前路径的目录和文件列表:&quot;</span>,os.listdir())      </span><br><span class="line">os.mkdir(<span class="string">&quot;newDir&quot;</span>)                                           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;创建新目录后,当前路径的目录和文件列表:&quot;</span>,os.listdir())      </span><br><span class="line">os.chdir(<span class="string">&quot;newDir&quot;</span>)                                            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;改变当前工作路径后, 当前工作路径:&quot;</span>,os.getcwd()) </span><br></pre></td></tr></table></figure><blockquote><p>使用os.path模块获取文件属性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os                                                     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(路径,文件):&quot;</span>,os.path.split(<span class="string">r&quot;d:\Python\test\test1.py&quot;</span>))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;目录存在?:&quot;</span>,os.path.exists(<span class="string">r&quot;d:\Python\test&quot;</span>))           </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件存在?:&quot;</span>,os.path.isfile(<span class="string">r&quot;d:\Python\test\test1.py&quot;</span>))    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件大小:&quot;</span>,os.path.getsize(<span class="string">r&quot;d:\Python\test\test1.py&quot;</span>))   </span><br></pre></td></tr></table></figure><h4>🚀 调用系统命令</h4><ul><li><code>os.popen(cmd[, mode[, bufsize]])</code>：用于由一个命令打开一个管道</li><li><code>os.system(shell)</code>：运行shell命令</li></ul><blockquote><p>使用Os模块中的函数调用系统命令</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os                                             </span><br><span class="line">os.system(<span class="string">&quot;mkdir d:\\newDir&quot;</span>)              </span><br><span class="line">os.popen(<span class="string">r&quot;c:\windows\notepad.exe&quot;</span>)       <span class="comment">#打开记事本程序.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序运行成功!&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">程序运行成功!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-5-Sys"><a href="#7-2-5-Sys" class="headerlink" title="7.2.5 Sys"></a>7.2.5 Sys</h3><blockquote><p>使用Sys模块获取系统信息</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys                          </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;参数:&quot;</span>,sys.argv)          <span class="comment"># 参数: [&#x27;d:/pythonProjects/test1.py&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python版本:&quot;</span>,sys.version) <span class="comment"># Python版本: 3.7.2 (v3.7.2:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;操作系统:&quot;</span>,sys.platform)   <span class="comment"># 操作系统: win32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大Int值:&quot;</span>,sys.maxsize)   <span class="comment"># 最大Int值: 9223372036854775807</span></span><br><span class="line">sys.exit(<span class="number">0</span>)                     </span><br></pre></td></tr></table></figure><h3 id="7-2-6-Timeit"><a href="#7-2-6-Timeit" class="headerlink" title="7.2.6 Timeit"></a>7.2.6 Timeit</h3><p>Timeit模块是一个具有计时功能的模块，常用于测试一段代码的运行时</p><p>Timeit模块常用的函数有timeit()和repeat()函数</p><p>timeit()函数返回执行代码所用的时间，单位为秒，其一般格式为：<code>t = timeit(stmt=&#39;code&#39;,setup=&#39;code&#39;,timer=&lt;defaulttimer&gt;,number=n)</code></p><p>repeat()函数比timeit()函数多了一个repeat参数，表示重复执行指定代码这个过程多少遍，返回一个列表表示执行每遍的时间；其一般格式为：<code>t = repeat(stmt=&#39;code&#39;,setup=&#39;code&#39;,timer=&lt;defaulttimer&gt;,repeat=m,number=n)</code></p><blockquote><p>测试函数myFun()中代码的执行时间</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myFun</span>():</span><br><span class="line">  <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">      <span class="built_in">sum</span> = <span class="built_in">sum</span> + i * j</span><br><span class="line">t1 = timeit.timeit(stmt=myFun,number=<span class="number">1000</span>)            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1:&quot;</span>,t1)</span><br><span class="line">t2 = timeit.repeat(stmt=myFun,number=<span class="number">1000</span>, repeat=<span class="number">6</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t2:&quot;</span>,t2)</span><br></pre></td></tr></table></figure><h3 id="7-2-7-Zlib"><a href="#7-2-7-Zlib" class="headerlink" title="7.2.7 Zlib"></a>7.2.7 Zlib</h3><blockquote><p>使用Zlib模块对字符串进行压缩和解压缩</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib                                     </span><br><span class="line"><span class="built_in">str</span> = <span class="string">b&#x27;What is your name? What is your name? What is your name?&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;压缩前: %s,字符个数%d.&quot;</span>%(<span class="built_in">str</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)))</span><br><span class="line">str_com = zlib.compress(<span class="built_in">str</span>)                 </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;压缩后: %s, 字符个数%d.&quot;</span>%(str_com,<span class="built_in">len</span>(str_com)))</span><br><span class="line">str_dec = zlib.decompress(str_com)      </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解压后: %s, 字符个数%d.&quot;</span>%(str_dec,<span class="built_in">len</span>(str_dec)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">压缩前: b&#x27;What is your name?What is your name? What is your name?&#x27;, 字符个数56.</span></span><br><span class="line"><span class="string">压缩后: b&#x27;x\x9c\x0b\xcfH,Q\xc8,V\xa8\xcc/- </span></span><br><span class="line"><span class="string">                R\xc8K\xccM\xb5\x0f\xc7\x10Q\xc0\</span></span><br><span class="line"><span class="string">     x14\x02\x00(\x11\ x13\x9e&#x27;, 字符个数30.</span></span><br><span class="line"><span class="string">解压后: b&#x27;What is your name?What is your name? What is your name?&#x27;, 字符个数56.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-第三方库"><a href="#7-3-第三方库" class="headerlink" title="7.3 第三方库"></a>7.3 第三方库</h2><h3 id="7-3-1-NumPy"><a href="#7-3-1-NumPy" class="headerlink" title="7.3.1 NumPy"></a>7.3.1 NumPy</h3><blockquote><p>NumPy是基于Python的一种开源数值计算第三方库，它支持高维数组运算、大型矩阵处理、矢量运算、线性代数运算、随机数生成等功能</p></blockquote><h4>🚀 数组</h4><p>NumPy库中的ndarray是一个多维数组对象。该对象由两部分组成：实际的数据和描述这些数据的元数据。和Python中的列表、元组一样，NumPy数组的下标也是从0开始</p><h5>🚁 创建数组</h5><p>在NumPy库中，创建数组可使用<code>np.array()</code>函数，其一般格式为：<code>numpy.array(object,dtype=None,copy=True,order=None,subok=False,ndmin=0)</code></p><ul><li>object为数组或嵌套的数列</li><li>dtype为数组元素的数据类型</li><li>copy指定对象是否需要复制</li><li>order为创建数组的样式，C为行方向，F为列方向，A为任意方向(默认)</li><li>subok指定默认返回一个与基类类型一致的数组</li><li>ndmin为指定生成数组的最小维度</li></ul><blockquote><p>创建数组</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])       <span class="comment">#一维数组</span></span><br><span class="line"><span class="comment">#array([1, 2, 3, 4, 5, 6])</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]).reshape(<span class="number">2</span>,<span class="number">3</span>)     <span class="comment">#二维数组</span></span><br><span class="line"><span class="comment">#array([[1, 2, 3],[4, 5, 6]])</span></span><br><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])     <span class="comment">#二维数组</span></span><br><span class="line"><span class="comment">#array([[1, 2, 3],[4, 5, 6]])</span></span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],dtype=<span class="built_in">complex</span>)          <span class="comment">#指定数据类型为复数</span></span><br><span class="line"><span class="comment">#array([1.+0.j, 3.+0.j, 5.+0.j])</span></span><br><span class="line">np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],ndmin=<span class="number">2</span>)    <span class="comment">#指定最小维度</span></span><br><span class="line"><span class="comment">#array([[2, 4, 6]])</span></span><br></pre></td></tr></table></figure><blockquote><p>创建特定数组</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#array([0, 1, 2, 3, 4, 5])</span></span><br><span class="line">np.arange(<span class="number">6</span>, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="comment">#array([0., 1., 2., 3., 4., 5.])</span></span><br><span class="line">np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#array([1, 3, 5, 7, 9])</span></span><br><span class="line">np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment">#array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])</span></span><br><span class="line">np.logspace(<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#array([  1.,   2.,   4.,   8.,  16.,  32.,  64., 128., 256., 512.])</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#array([[0., 0.],[0., 0.]])</span></span><br><span class="line">np.ones([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">#array([[1., 1., 1.],[1., 1., 1.]])</span></span><br></pre></td></tr></table></figure><h5>🚁 数组索引和切片</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">a[<span class="number">5</span>]<span class="comment">#5</span></span><br><span class="line">a[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]<span class="comment">#array([1, 3, 5])</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b[<span class="number">2</span>,<span class="number">2</span>]<span class="comment">#9</span></span><br><span class="line">b[<span class="number">1</span>:]<span class="comment">#array([[4, 5, 6],[7, 8, 9]])</span></span><br></pre></td></tr></table></figure><blockquote><p>查看数组属性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a.ndim<span class="comment"># 3</span></span><br><span class="line">a.shape<span class="comment"># (2, 3, 4)</span></span><br><span class="line">a.size<span class="comment"># 24</span></span><br><span class="line">a.dtype<span class="comment"># dtype(&#x27;int32&#x27;)</span></span><br><span class="line">a.itemsize<span class="comment"># 4</span></span><br></pre></td></tr></table></figure><blockquote><p>数组操作</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line">a.reshape(<span class="number">2</span>,<span class="number">4</span>)      <span class="comment">#改变数组形状</span></span><br><span class="line"><span class="comment"># array([[0, 1, 2, 3],</span></span><br><span class="line"><span class="comment">#       [4, 5, 6, 7]])</span></span><br><span class="line">np.transpose(a.reshape(<span class="number">2</span>,<span class="number">4</span>))       </span><br><span class="line"><span class="comment">#array([[0, 4],</span></span><br><span class="line"><span class="comment">#       [1, 5],</span></span><br><span class="line"><span class="comment">#       [2, 6],</span></span><br><span class="line"><span class="comment">#       [3, 7]])</span></span><br><span class="line">a.reshape(<span class="number">2</span>,<span class="number">4</span>).ravel()       <span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7])</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a.flat: </span><br><span class="line">    <span class="built_in">print</span>(element, end=<span class="string">&quot; &quot;</span>)<span class="comment"># 0 1 2 3 4 5 6 7</span></span><br></pre></td></tr></table></figure><blockquote><p>数组运算</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">a * <span class="number">2</span>                           <span class="comment">#数组与数相乘</span></span><br><span class="line"><span class="comment">#array([[2, 4],                                               </span></span><br><span class="line"><span class="comment">#       [6, 8]])</span></span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line">a + b                          <span class="comment">#两个数组相加</span></span><br><span class="line"><span class="comment">#array([[ 6,  8],                                            </span></span><br><span class="line"><span class="comment">#       [10, 12]])</span></span><br><span class="line">np.dot(a,b)                    <span class="comment">#两个数组的内积</span></span><br><span class="line"><span class="comment">#array([[19, 22],                                             </span></span><br><span class="line"><span class="comment">#       [43, 50]])</span></span><br><span class="line">np.matmul(a,b)                 <span class="comment">#两个数组的矩阵乘法</span></span><br><span class="line"><span class="comment">#array([[19, 22],</span></span><br><span class="line"><span class="comment">#       [43, 50]])</span></span><br><span class="line"><span class="comment">#上述结果计算方法: 1*5+2*7=19, 1*6+2*8=22, 3*5+4*7=43, 3*6+4*8=50</span></span><br><span class="line">np.vdot(a,b)                     <span class="comment">#两个数组的点积</span></span><br><span class="line"><span class="comment">#370</span></span><br><span class="line"><span class="comment">#上述结果计算方法: 1*5+2*6+3*7+4*8=70</span></span><br><span class="line">np.inner(a,b)                   <span class="comment">#两个数组的向量内积</span></span><br><span class="line"><span class="comment">#array([[17, 23],</span></span><br><span class="line"><span class="comment">#       [39, 53]])</span></span><br><span class="line"><span class="comment">#上述结果计算方法: 1*5+2*6=17, 1*7+2*8=23, 3*5+4*6=39, 3*7+4*8=53</span></span><br><span class="line">np.linalg.det(a)                   <span class="comment">#求矩阵行列式</span></span><br><span class="line"><span class="comment">#-2.0000000000000004</span></span><br><span class="line">np.linalg.inv(a)                  <span class="comment">#求逆矩阵</span></span><br><span class="line"><span class="comment">#array([[-2. ,  1. ],</span></span><br><span class="line"><span class="comment">#       [ 1.5, -0.5]])</span></span><br></pre></td></tr></table></figure><h4>🚀 矩阵</h4><blockquote><p>在NumPy中，通常使用mat()函数或matrix()函数创建矩阵，也可以通过矩阵的转置、逆矩阵等方法来创建矩阵</p></blockquote><blockquote><p>创建矩阵</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.mat(<span class="string">&quot;3 4;5 6&quot;</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[[<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.T</span><br><span class="line">matrix([[<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">        [<span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.I                       </span><br><span class="line">matrix([[-<span class="number">3.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">        [ <span class="number">2.5</span>, -<span class="number">1.5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mat(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>))     </span><br><span class="line">matrix([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><blockquote><p>矩阵运算</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.mat(<span class="string">&#x27;1, 2; 3, 4&#x27;</span>)                                       </span><br><span class="line">A * <span class="number">2</span>                           <span class="comment">#矩阵和数相乘</span></span><br><span class="line">matrix([[<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">8</span>]])</span><br><span class="line">B = np.mat(<span class="string">&#x27;5, 6; 7, 8&#x27;</span>)</span><br><span class="line">A + B                            <span class="comment">#两个矩阵相加</span></span><br><span class="line"><span class="comment">#matrix([[ 6,  8],</span></span><br><span class="line"><span class="comment">#        [10, 12]])</span></span><br><span class="line">A.dot(B)                          <span class="comment">#两个矩阵点积</span></span><br><span class="line"><span class="comment">#matrix([[19, 22],</span></span><br><span class="line"><span class="comment">#        [43, 50]])</span></span><br><span class="line">np.matmul(A,B)                <span class="comment">#两个矩阵相乘</span></span><br><span class="line"><span class="comment">#matrix([[19, 22],</span></span><br><span class="line"><span class="comment">#        [43, 50]])</span></span><br><span class="line">np.inner(A,B)                          <span class="comment">#两个矩阵内积</span></span><br><span class="line"><span class="comment">#matrix([[17, 23],</span></span><br><span class="line"><span class="comment">#        [39, 53]])</span></span><br><span class="line">np.linalg.inv(A)                     <span class="comment">#逆矩阵</span></span><br><span class="line"><span class="comment">#matrix([[-2. ,  1. ],</span></span><br><span class="line"><span class="comment">#        [ 1.5, -0.5]])</span></span><br><span class="line">np.linalg.det(A)                   <span class="comment">#求矩阵的行列式</span></span><br><span class="line"><span class="comment">#-2.0000000000000004</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-Pandas"><a href="#7-3-2-Pandas" class="headerlink" title="7.3.2 Pandas"></a>7.3.2 Pandas</h3><p>Pandas是基于NumPy库的一种解决数据分析任务的工具库</p><p>Pandas库的主要功能有：创建Series(系列)和DataFrame(数据帧)、索引选取和过滤、算术运算、数据汇总和描述性统计、数据排序和排名、处理缺失值和层次化索引等</p><p>Pandas库下载网址：<a href="https://pypi.org/project/pandas/#files%E3%80%82">https://pypi.org/project/pandas/#files。</a></p><h4>🚀 系列(Series)</h4><blockquote><p>系列与NumPy库中的一维数组(array)类似，能保存字符串、Bool值、数字等不同的数据类型</p></blockquote><p>创建一个系列的一般格式为：<code>pandas.Series(data,index,dtype,copy)</code></p><ul><li>data：数据，采取各种形式，如ndarray、list、constants等</li><li>index：索引值，必须是唯一的和散列的</li><li>dtype：数据类型</li><li>copy：复制数据，默认为False</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                          </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                         </span><br><span class="line">data = np.array([<span class="string">&#x27;需求分析&#x27;</span>,<span class="string">&#x27;概要设计&#x27;</span>,<span class="string">&#x27;详细设计&#x27;</span>,<span class="string">&#x27;编制代码&#x27;</span>,<span class="string">&#x27;运行维护&#x27;</span>])</span><br><span class="line">s = pd.Series(data)      </span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    需求分析</span></span><br><span class="line"><span class="string">1    概要设计</span></span><br><span class="line"><span class="string">2    详细设计</span></span><br><span class="line"><span class="string">3    编制代码</span></span><br><span class="line"><span class="string">4    运行维护</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>从字典创建一个系列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd            </span><br><span class="line">data = &#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&quot;优秀&quot;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&quot;良好&quot;</span>,<span class="string">&#x27;C&#x27;</span>:<span class="string">&quot;合格&quot;</span>,<span class="string">&#x27;D&#x27;</span>:<span class="string">&quot;不合格&quot;</span>&#125;</span><br><span class="line">s = pd.Series(data)</span><br><span class="line"><span class="built_in">print</span>(s)                            </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s[0]:&quot;</span>,s[<span class="number">0</span>])                  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A     优秀</span></span><br><span class="line"><span class="string">B     良好</span></span><br><span class="line"><span class="string">C     合格</span></span><br><span class="line"><span class="string">D    不合格</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">s[0]: 优秀</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4>🚀 数据帧(DataFrame)</h4><blockquote><p>数据帧是二维的表格型数据结构，即数据以行和列的表格方式排列。与系列相比，数据帧使用得更普遍</p></blockquote><p>创建一个数据帧的一般格式为：<code>pandas.DataFrame(data,index,columns,dtype,copy)</code></p><ul><li>data：数据，可以是各种类型，如ndarray、series、lists、dict、 constant或DataFrame等</li><li>index，columns：分别为行标签和列标签</li><li>dtype：每列的数据类型</li><li>copy：复制数据，默认值为False</li></ul><blockquote><p>从列表创建DataFrame</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                                  </span><br><span class="line">data = [[<span class="string">&#x27;Tom&#x27;</span>,<span class="number">3</span>],[<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">1</span>]]</span><br><span class="line">df = pd.DataFrame(data,columns = [<span class="string">&#x27;Name&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)                                   </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      Name    Age</span></span><br><span class="line"><span class="string">0    Tom      3</span></span><br><span class="line"><span class="string">1    Jerry    1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>DataFrame的创建和访问</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>)),index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>],</span><br><span class="line">columns=[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df                    <span class="comment">#数据帧</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">A    0    1      2</span></span><br><span class="line"><span class="string">B    3    4      5</span></span><br><span class="line"><span class="string">C    6    7      8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="number">1</span>:<span class="number">2</span>]               <span class="comment">#选取行数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">B    3    4      5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[[<span class="string">&#x27;three&#x27;</span>,<span class="string">&#x27;one&#x27;</span>]]    <span class="comment">#选取列数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   three  one</span></span><br><span class="line"><span class="string">A      2    0</span></span><br><span class="line"><span class="string">B      5    3</span></span><br><span class="line"><span class="string">C      8    6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[df[<span class="string">&#x27;three&#x27;</span>] &gt; <span class="number">5</span>]    <span class="comment">#数据过滤</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   one  two  three</span></span><br><span class="line"><span class="string">C    6    7      8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;two&#x27;</span>]      <span class="comment">#使用.loc()选取单个数据</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.iloc[<span class="number">1</span>,<span class="number">1</span>]            <span class="comment">#使用.iloc()选取单个数据.</span></span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><h3 id="7-3-3-SciPy"><a href="#7-3-3-SciPy" class="headerlink" title="7.3.3 SciPy"></a>7.3.3 SciPy</h3><blockquote><p>SciPy库是一款方便、易于使用、专为科学和工程设计的工具库，包括统计、优化、整合、线性代数、傅里叶变换、信号和图像处理、常微分方程求解等</p></blockquote><h4>🚀 SciPy库的使用</h4><p>SciPy库中的模块很多，不同模块的功能相对独立：</p><ul><li>scipy.constants(数学常量)</li><li>scipy.fftpack(快速傅里叶变换)</li><li>scipy.integrate(积分)</li><li>scipy.optimize(优化算法)</li><li>scipy.stats(统计函数)</li><li>scipy.special(特殊数学函数)</li><li>scipy.signal(信号处理)</li><li>scipy.ndimage(N维图像)</li></ul><h5>🚁 constants模块</h5><blockquote><p>查看constants模块中常用数学常量</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> constants <span class="keyword">as</span> con       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>con.hour                 <span class="comment">#1小时对应的秒数</span></span><br><span class="line"><span class="number">3600.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>con.c                     <span class="comment">#真空中的光速</span></span><br><span class="line"><span class="number">299792458.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>con.inch                 <span class="comment">#1英寸对应的米数</span></span><br><span class="line"><span class="number">0.0254</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>con.degree                   <span class="comment">#1°等对应的弧度数</span></span><br><span class="line"><span class="number">0.017453292519943295</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>con.golden                      <span class="comment">#黄金比例</span></span><br><span class="line"><span class="number">1.618033988749895</span></span><br></pre></td></tr></table></figure><h5>🚁 special模块</h5><blockquote><p>使用special模块完成特殊数学函数功能</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scipy <span class="keyword">import</span> special <span class="keyword">as</span> sp        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sp.cbrt(<span class="number">27</span>)         <span class="comment">#求立方根</span></span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sp.sindg(<span class="number">45</span>)        <span class="comment">#正弦函数，参数为角度</span></span><br><span class="line"><span class="number">0.7071067811865476</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sp.comb(<span class="number">6</span>,<span class="number">3</span>)       <span class="comment">#6中选3的组合数</span></span><br><span class="line"><span class="number">20.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sp.perm(<span class="number">5</span>,<span class="number">3</span>)       <span class="comment">#5中选3的排列数</span></span><br><span class="line"><span class="number">60.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sp.<span class="built_in">round</span>(<span class="number">5.67</span>)              <span class="comment">#返回四舍五入后的整数</span></span><br><span class="line"><span class="number">6.0</span></span><br></pre></td></tr></table></figure><h5>🚁 scipy.linalg模块</h5><blockquote><p>计算方阵的行列式和逆矩阵</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                            </span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> linalg                         </span><br><span class="line">mat = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方阵:&quot;</span>,mat)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方阵的行列式:%6.2f.&quot;</span>%linalg.det(mat))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方阵的逆矩阵:&quot;</span>,linalg.inv(mat))</span><br></pre></td></tr></table></figure><blockquote><p>信号处理模块signal</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.signal</span><br><span class="line">x = np.array([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">h = np.array([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">nn = scipy.signal.convolve(x,h)     <span class="comment">#一维卷积运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nn:&quot;</span>,nn)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">nn: [18 45 82 67 40]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-4-Matplotlib"><a href="#7-3-4-Matplotlib" class="headerlink" title="7.3.4 Matplotlib"></a>7.3.4 Matplotlib</h3><p><a href="https://pypi.org/project/matplotlib/#files">Matplotlib</a>是一个基于Python、跨平台、交互式的2D绘图库，以各种硬拷贝格式生成出版质量级别的图形</p><h4>🚀 Matplotlib库的使用</h4><blockquote><p>使用plot()函数绘制图形并设置坐标轴</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]           <span class="comment">#创建x轴数据</span></span><br><span class="line">y = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">32</span>,<span class="number">111</span>]<span class="comment">#计算y轴数据</span></span><br><span class="line">plt.xlim((<span class="number">0</span>,<span class="number">10</span>))         <span class="comment">#设置x轴刻度范围</span></span><br><span class="line">plt.ylim((<span class="number">0</span>,<span class="number">120</span>))          <span class="comment">#设置y轴刻度范围</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>,fontproperties=<span class="string">&#x27;SimHei&#x27;</span>,fontsize=<span class="number">16</span>)    <span class="comment">#设置x轴字体</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>,fontproperties=<span class="string">&#x27;SimHei&#x27;</span>,fontsize=<span class="number">16</span>)    <span class="comment">#设置y轴字体</span></span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;r&#x27;</span>,lw=<span class="number">2</span>)      <span class="comment">#(x、y):坐标，&#x27;r&#x27;:红色，lw:线宽</span></span><br><span class="line">plt.show()              <span class="comment">#显示图形</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8016.png" alt="Python语言基础16"></p><blockquote><p>使用figure()函数画绘制多幅图形</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt                       </span><br><span class="line">x = np.linspace(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">50</span>)    <span class="comment">#生成50个从-1到1范围内均匀的数</span></span><br><span class="line"><span class="comment">#figure 1</span></span><br><span class="line">y1 = <span class="number">3</span> * x – <span class="number">1</span>   <span class="comment">#计算y1</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;r&#x27;</span>)       <span class="comment">#绘图</span></span><br><span class="line"><span class="comment">#figure 2</span></span><br><span class="line">y2 = x ** <span class="number">2</span>       <span class="comment">#计算y2</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x,y2,<span class="string">&#x27;b&#x27;</span>)       <span class="comment">#绘图</span></span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8017.png" alt="Python语言基础17"></p><blockquote><p>使用matplotlib.pyplot绘图并设置图例</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt              </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                      </span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">20</span>,<span class="number">1</span>)                               </span><br><span class="line">plt.plot(x,x ** <span class="number">2</span> + <span class="number">1</span>,<span class="string">&#x27;red&#x27;</span>,lw=<span class="number">2</span>)             </span><br><span class="line">plt.plot(x,x * <span class="number">16</span>,<span class="string">&#x27;b&#x27;</span>,linestyle=’dashed’,lw=<span class="number">2</span>)    </span><br><span class="line">plt.legend([<span class="string">&#x27;x**2&#x27;</span>, <span class="string">&#x27;16*x&#x27;</span>])              <span class="comment">#设置图例</span></span><br><span class="line">plt.show()   </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8018.png" alt="Python语言基础18"></p><blockquote><p>使用scatter ()函数绘制散点图</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np, matplotlib.pyplot <span class="keyword">as</span> plt                     </span><br><span class="line">n = <span class="number">512</span>               <span class="comment">#数据个数</span></span><br><span class="line">x = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)         <span class="comment">#均值为0, 方差为1的随机数</span></span><br><span class="line">y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)         <span class="comment">#均值为0, 方差为1的随机数</span></span><br><span class="line">color = np.arctan2(y,x) <span class="comment">#计算颜色值</span></span><br><span class="line">plt.scatter(x,y,s=<span class="number">75</span>,c=color,alpha=<span class="number">0.6</span>)     <span class="comment">#绘制散点图</span></span><br><span class="line">plt.xlim((-<span class="number">2.0</span>,<span class="number">2.0</span>))                               </span><br><span class="line">plt.ylim((-<span class="number">2.0</span>,<span class="number">2.0</span>))                               </span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8019.png" alt="Python语言基础19"></p><blockquote><p>使用subplot()函数绘制多个子图</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt            </span><br><span class="line">plt.figure()                                                </span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)             <span class="comment">#第1个子图</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">&#x27;r&#x27;</span>)             </span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)             <span class="comment">#第2个子图</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>],<span class="string">&#x27;b&#x27;</span>)             </span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)             <span class="comment">#第3个子图</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>],<span class="string">&#x27;g&#x27;</span>)             </span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)             <span class="comment">#第4个子图</span></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">16</span>],<span class="string">&#x27;y&#x27;</span>)           </span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8020.png" alt="Python语言基础20"></p><h3 id="7-3-5-Jieba"><a href="#7-3-5-Jieba" class="headerlink" title="7.3.5 Jieba"></a>7.3.5 Jieba</h3><p>Jieba库支持三种分词模式</p><ul><li>精确模式：把文本精确地切分开，不存在冗余单词</li><li>全模式：把文本中所有可能的词语都扫描出来，存在冗余</li><li>搜索引擎模式：在精确模式的基础上，对长词再次切分，存在冗余</li><li>Jiaba分词还支持繁体分词和自定义分词</li></ul><p>在命令行界面中执行命令pip install jieba，下载库</p><h4>🚀 Jieba库的使用</h4><h5>🚁 分词</h5><p>可使用方法 <code>jieba.cut()</code>和<code>jieba.cut_for_search()</code>对中文字符串进行分词</p><ul><li>string：需要分词的中文字符串，编码格式为Unicode、UTF-8或GBK</li><li>cut_all：是否使用全模式，默认值为 False</li><li>HMM：是否使用 HMM 模型，默认值为 True。</li></ul><p>方法<code>jieba.cut_for_search()</code>和<code>jieba.lcut_for_search()</code>接收2个参数</p><ul><li>string：需要分词的中文字符串，编码格式为Unicode、UTF-8或GBK</li><li>HMM：是否使用HMM模型，默认值为 True</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba                                   </span><br><span class="line">segList1 = jieba.cut(<span class="string">&quot;居里夫人1903年获诺贝尔奖时做了精彩演讲&quot;</span>,cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全模式:&quot;</span>,<span class="string">&quot;/&quot;</span>.join(segList1))                 </span><br><span class="line">segList2 = jieba.cut(<span class="string">&quot;居里夫人1903年获诺贝尔奖时做了精彩演讲&quot;</span>,cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;精确模式:&quot;</span>,<span class="string">&quot;/&quot;</span>.join(segList2))              </span><br><span class="line">segList3 = jieba.cut(<span class="string">&quot;居里夫人1903年获诺贝尔奖时做了精彩演讲&quot;</span>,cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;搜索引擎模式:&quot;</span>,<span class="string">&quot;.&quot;</span>.join(segList3))           </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">全模式: 居里/居里夫人/里夫/夫人/1903/年/获/诺贝/诺贝尔/诺贝尔奖/贝尔/奖/时/做/了/精彩/演讲</span></span><br><span class="line"><span class="string">精确模式: 居里夫人/1903/年/获/诺贝尔奖/时做/了/精彩/演讲</span></span><br><span class="line"><span class="string">搜索引擎模式: 居里夫人.1903.年.获.诺贝尔奖.时做.了.精彩.演讲</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5>🚁 关键词提取</h5><p>Jieba库采用“词频－逆向文件频率” 算法进行关键词抽取。<code>jieba.analyse.extract_tags(sentence,topK=20,withWeight=False,allowPOS=())</code></p><ul><li>sentence为待提取的文本</li><li>topK为返回若干个TF&#x2F;IDF权重最大的关键词，默认值为20</li><li>withWeight为是否返回关键词权重值，默认值为False</li><li>allowPOS指定仅包括指定词性的词，默认值为空，即不筛选</li></ul><blockquote><p>使用Jieba库提取中文字符串中的关键词</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba                              </span><br><span class="line"><span class="keyword">import</span> jieba.analyse                       </span><br><span class="line">sentence = <span class="string">&quot;艾萨克·牛顿(1643年1月4日—1727年3月31日)爵士，\</span></span><br><span class="line"><span class="string">   英国皇家学会会长，英国著名的物理学家，百科全书式的“全才”，\</span></span><br><span class="line"><span class="string">   著有《自然哲学的数学原理》《光学》。&quot;</span></span><br><span class="line"><span class="comment">#关键词提取.</span></span><br><span class="line">keywords = jieba.analyse.extract_tags(sentence,topK=<span class="number">20</span>,withWeight=<span class="literal">True</span>,</span><br><span class="line">allowPOS=(<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;nr&#x27;</span>,<span class="string">&#x27;ns&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> keywords:</span><br><span class="line">  <span class="built_in">print</span>(item[<span class="number">0</span>],item[<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">艾萨克 1.5364049674375</span></span><br><span class="line"><span class="string">数学原理 1.321059142725</span></span><br><span class="line"><span class="string">爵士 1.13206132069</span></span><br><span class="line"><span class="string">牛顿 1.03458251822375</span></span><br><span class="line"><span class="string">会长 0.97365128905875</span></span><br><span class="line"><span class="string">物理学家 0.97365128905875</span></span><br><span class="line"><span class="string">光学 0.937137931755</span></span><br><span class="line"><span class="string">英国 0.62829620167375</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5>🚁 词性标注</h5><p>Jieba库支持创建自定义分词器，方法如下：<code>jieba.posseg.POSTokenizer(tokenizer=None)</code><br>，tokenizer指定内部使用的jieba.Tokenizer分词器，jieba.posseg.dt 为默认词性标注分词器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg                </span><br><span class="line">words = pseg.cut(<span class="string">&quot;中国人民是不可战胜的&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> word,flag <span class="keyword">in</span> words:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s %s&#x27;</span> % (word,flag))</span><br></pre></td></tr></table></figure><h3 id="7-3-6-PyInstaller"><a href="#7-3-6-PyInstaller" class="headerlink" title="7.3.6 PyInstaller"></a>7.3.6 PyInstaller</h3><p>Pyinstaller库可以用来打包Python应用程序。打包时，Pyinstaller库会扫描Python程序的所有文档，分析所有代码找出代码运行所需的模块，然后将所有这些模块和代码放在一个文件夹里或一个可执行文件里。用户就不用下载各种软件运行环境，如各种版本的Python和各种不同的包，只需要执行打包好的可执行文件就可以使用软件了</p><p>下载与安装：在命令行界面中执行命令<code>pip install pyinstaller</code></p><h4>🚀 打包Python程序</h4><blockquote><p>创建一个Python源文件test1.py</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random                  </span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]   </span><br><span class="line">slice1 = random.sample(list1,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1:&quot;</span>,list1)              </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;slice1:&quot;</span>,slice1)            </span><br><span class="line"><span class="built_in">input</span>()                          <span class="comment">#保持运行结果显示</span></span><br></pre></td></tr></table></figure><blockquote><p>打开命令行界面，进入源文件test1.py所在路径</p><p>在命令行界面中运行命令<code>pyinstaller-F test1.py</code>打包源文件</p><p>成功执行命令后，生成的可执行文件test1.exe在源文件test1.py所在路径的文件夹<strong>dist</strong></p></blockquote><h2 id="7-4-自定义模块"><a href="#7-4-自定义模块" class="headerlink" title="7.4 自定义模块"></a>7.4 自定义模块</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8021.png" alt="Python语言基础21"></p><h4>🚀 [场景1]  在源文件A11.py中调用包pack1中的模块A12</h4><p>在本场景中，源文件A11.py和模块A12在同一路径。实现步骤为：</p><ol><li><p>在pack1文件夹下添加文件<code>__init__.py</code></p></li><li><p>分别编写源文件A11.py和模块A12中的程序代码</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模块A12中的程序代码</span></span><br><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_A12</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;A12 in Pack1&#x27;</span><span class="comment">#模块A12就是名为A12.py的源文件</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">import</span> A12　                                      </span><br><span class="line"><span class="built_in">print</span>(A12.func_A12())    <span class="comment">#调用函数A12.func_A12()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A12 <span class="keyword">in</span> Pack1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法二源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">from</span> A12 <span class="keyword">import</span> *              </span><br><span class="line"><span class="built_in">print</span>(func_A12())        <span class="comment">#调用函数func_A12()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A12 <span class="keyword">in</span> Pack1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法三源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">from</span> A12 <span class="keyword">import</span> func_A12       </span><br><span class="line"><span class="built_in">print</span>(func_A12())        <span class="comment">#调用函数func_A12()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A12 <span class="keyword">in</span> Pack1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法四源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">import</span> A12 <span class="keyword">as</span> a         <span class="comment">#给模块A12取别名为a</span></span><br><span class="line"><span class="built_in">print</span>(a.func_A12())      <span class="comment">#调用函数a.func_A12()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A12 <span class="keyword">in</span> Pack1.</span><br></pre></td></tr></table></figure><h4>🚀 [场景2]  在源文件main.py中调用包pack2中的模块A2</h4><p>本场景中，源文件main.py和模块A2所在的包pack2在同一路径。实现步骤为：</p><ol><li>在pack2文件夹下添加文件<code>__init__.py</code></li><li>分别编写模块A2和源文件main.py中的程序代码</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模块A2中的程序代码</span></span><br><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_A2</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;A2 in Pack2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一源文件main.py中的程序代码</span></span><br><span class="line"><span class="keyword">from</span> pack2.A2 <span class="keyword">import</span> *  <span class="comment">#或from pack2.A2 import func_A2</span></span><br><span class="line"><span class="built_in">print</span>(func_A2())   <span class="comment">#调用函数func_A2()</span></span><br><span class="line">main.py的运行结果：</span><br><span class="line">A2 <span class="keyword">in</span> Pack2.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法二源文件main.py 中的程序代码</span></span><br><span class="line"><span class="keyword">import</span> pack2.A2                    <span class="comment">#导入pack2.A2模块</span></span><br><span class="line"><span class="built_in">print</span>(pack2.A2.func_A2())            <span class="comment">#调用函数pack2.A2.func_A2()</span></span><br><span class="line">main.py的运行结果：</span><br><span class="line">A2 <span class="keyword">in</span> Pack2.</span><br></pre></td></tr></table></figure><h4>🚀 [场景3]  在源文件A11.py中调用模块A2</h4><p>在本场景中，源文件A11.py和模块A2分别在两个不同路径的包pack1和pack2中。实现步骤为：</p><ol><li>在pack2文件夹下添加文件<code>__init__.py</code></li><li>分别编写源文件A11.py和模块A2中的程序代码</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模块A2中的程序代码</span></span><br><span class="line"><span class="comment">#定义函数.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_A2</span>():</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;A2 in Pack2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法一源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;d:\\PythonProjects\\p1\\pack\\pack2&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> A2              <span class="comment">#导入模块A2</span></span><br><span class="line"><span class="built_in">print</span>(A2.func_A2())      <span class="comment">#调用函数A2.func_A2()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A2 <span class="keyword">in</span> Pack2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方法二源文件A11.py中的程序代码</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;d:\\PythonProjects\\p1\\pack&#x27;</span>)    <span class="comment">#pack所在路径</span></span><br><span class="line"><span class="keyword">import</span> pack2.A2                     <span class="comment">#导入pack2.A2模块</span></span><br><span class="line"><span class="built_in">print</span>(pack2.A2.func_A2())<span class="comment">#调用函数pack2.A2.func_A2()</span></span><br><span class="line">A11.py的运行结果：</span><br><span class="line">A2 <span class="keyword">in</span> Pack2</span><br></pre></td></tr></table></figure><h2 id="7-5-典型案例"><a href="#7-5-典型案例" class="headerlink" title="7.5 典型案例"></a>7.5 典型案例</h2><h3 id="7-5-1-使用Turtle绘制表面填充正方体"><a href="#7-5-1-使用Turtle绘制表面填充正方体" class="headerlink" title="7.5.1  使用Turtle绘制表面填充正方体"></a>7.5.1  使用Turtle绘制表面填充正方体</h3><blockquote><p>分析：</p><ol><li>从视角上看正方体一般只能看到三个面，正立面、顶面和右侧面</li><li>只需要对这三个面(分别为填充红色、绿色和蓝色)进行绘制和填充即可</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle           <span class="comment">#导入模块</span></span><br><span class="line"><span class="comment">#画正方体正面</span></span><br><span class="line">n = <span class="number">100</span>                         <span class="comment">#正方体边长</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">100</span>,-<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)      <span class="comment">#画笔颜色为红色</span></span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&#x27;red&#x27;</span>)     <span class="comment">#填充颜色为红色</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  turtle.forward(n)</span><br><span class="line">  turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"><span class="comment">#画正方体顶面</span></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(-<span class="number">100</span>,n-<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&#x27;green&#x27;</span>)    <span class="comment">#画笔颜色为绿色</span></span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&#x27;green&#x27;</span>)  <span class="comment">#填充颜色为绿色</span></span><br><span class="line">turtle.left(<span class="number">45</span>)</span><br><span class="line">turtle.forward(<span class="built_in">int</span>(n * <span class="number">0.6</span>)) <span class="comment">#倾斜边长为60</span></span><br><span class="line">turtle.right(<span class="number">45</span>)</span><br><span class="line">turtle.forward(n)</span><br><span class="line">turtle.left(<span class="number">360</span> - <span class="number">135</span>)</span><br><span class="line">turtle.forward(<span class="built_in">int</span>(n * <span class="number">0.6</span>)) <span class="comment">#倾斜边长为60</span></span><br><span class="line">turtle.end_fill()</span><br><span class="line"><span class="comment">#画正方体右侧面.</span></span><br><span class="line">turtle.left(<span class="number">45</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.goto(n-<span class="number">100</span>,-<span class="number">50</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pencolor(<span class="string">&#x27;blue&#x27;</span>)      <span class="comment">#画笔颜色为蓝色</span></span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&#x27;blue&#x27;</span>)   <span class="comment">#填充颜色为蓝色</span></span><br><span class="line">turtle.left(<span class="number">135</span>)</span><br><span class="line">turtle.forward(<span class="built_in">int</span>(n * <span class="number">0.6</span>)) <span class="comment">#倾斜边长为60</span></span><br><span class="line">turtle.left(<span class="number">45</span>)</span><br><span class="line">turtle.forward(n)</span><br><span class="line">turtle.left(<span class="number">135</span>)</span><br><span class="line">turtle.forward(<span class="built_in">int</span>(n * <span class="number">0.6</span>)) <span class="comment">#倾斜边长为60</span></span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h3 id="7-5-2-使用NumPy和Matplotlib分析股票"><a href="#7-5-2-使用NumPy和Matplotlib分析股票" class="headerlink" title="7.5.2  使用NumPy和Matplotlib分析股票"></a>7.5.2  使用NumPy和Matplotlib分析股票</h3><blockquote><p>使用NumPy和Matplotlib对股票000001(平安银行)在2018年7月的交易数据进行分析并显示股票收盘价走势图</p><p>分析：股票000001(平安银行)在2018年7月的交易数据存储在文件000001_stock01.csv中(可从网站资源中下载)，数据各列分别是date(日期)、open(开盘价)、high(最高价)、close(收盘价)、low(最低价)、volume(成交量)。股票000001在2018-07-2～2018-07-6的交易数据如下所示：<br>2018&#x2F;7&#x2F;2,  9.05,  9.05,  8.61,  8.55,  1315520.12<br>2018&#x2F;7&#x2F;3,  8.69,  8.7,   8.67,  8.45,  1274838.5<br>2018&#x2F;7&#x2F;4,  8.63,  8.75,  8.61,  8.61,  711153.38<br>2018&#x2F;7&#x2F;5,  8.62,  8.73,  8.6,   8.55,  835768.81<br>2018&#x2F;7&#x2F;6,  8.61,  8.78,  8.66,  8.45,  988282.75</p></blockquote><ul><li>使用NumPy对股票文件进行处理需要先将股票交易文件000001_stock01.csv中的不同列数据分别读到多个数组中保存</li><li>使用numpy.mean()函数计算收盘价和成交量的算术平均值</li><li>使用numpy.average()函数计算收盘价的加权平均价格</li><li>使用numpy.max()函数、np.min()函数分别计算股票最高价、最低价</li><li>使用numpy.ptp()函数计算股票最高价波动范围、股票最低价波动范围</li><li>使用matplotlib.pyplot中的相关函数绘制了股票000001在2018年7月的收盘价走势图</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np,os                                  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt                       </span><br><span class="line"><span class="comment">#将000001_stock01.csv中的第4列(收盘价)、6列(成交量)数据读到数组c、v中</span></span><br><span class="line">close,volume=np.loadtxt(os.getcwd()+<span class="string">&quot;\\resource\\000001_stock01.csv&quot;</span>, </span><br><span class="line">delimiter=<span class="string">&#x27;,&#x27;</span>,usecols=(<span class="number">3</span>,<span class="number">5</span>),unpack=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;收盘价的算术平均价格:%6.2f 元.&quot;</span>%np.mean(close))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成交量的算术平均值:%10.2f 手.&quot;</span>%np.mean(volume)) </span><br><span class="line"><span class="comment">#计算收盘价的加权平均价格(时间越靠近现在，权重越大). </span></span><br><span class="line">t = np.arange(<span class="built_in">len</span>(close))       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;收盘价的加权平均价格:%6.2f 元.&quot;</span>%(np.average(close,weights=t)))</span><br><span class="line"><span class="comment">#将000001_stock01.csv中的第3列(最高价)、5列(最低价)数据读到数组high、low中</span></span><br><span class="line">high,low = np.loadtxt(os.getcwd()+<span class="string">&quot;\\resource\\000001_stock01.csv&quot;</span>,delimiter=</span><br><span class="line"><span class="string">&#x27;,&#x27;</span>,usecols=(<span class="number">2</span>,<span class="number">4</span>),unpack=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;股票最高价:%6.2f 元.&quot;</span>%np.<span class="built_in">max</span>(high))             </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;股票最低价:%6.2f 元.&quot;</span>%np.<span class="built_in">min</span>(low))              </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;股票最高价波动范围:%6.2f 元.&quot;</span>%np.ptp(high))          </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;股票最低价波动范围:%6.2f 元.&quot;</span>%np.ptp(low))       </span><br><span class="line"><span class="string">&quot;&quot;&quot;----------显示股票000001在2018年7月的收盘价走势图--------------&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#将000001_stock01.csv中的第1列(日期)数据读到数组date中.</span></span><br><span class="line">date = np.loadtxt(os.getcwd()+<span class="string">&quot;\\resource\\000001_stock01.csv&quot;</span>,dtype=<span class="built_in">str</span>,delimiter</span><br><span class="line">=<span class="string">&#x27;,&#x27;</span>,usecols=(<span class="number">0</span>,),unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(date,close,<span class="string">&#x27;r&#x27;</span>,lw=<span class="number">2</span>)                            </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴-日期&#x27;</span>,fontsize=<span class="number">14</span>)                       </span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴-收盘价(元)&#x27;</span>,fontsize=<span class="number">14</span>)                 </span><br><span class="line">plt.legend([<span class="string">&#x27;收盘价(元)&#x27;</span>])                                </span><br><span class="line">plt.gcf().autofmt_xdate()                                 </span><br><span class="line">plt.show() </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">收盘价的算术平均价格: 8.96 元.</span></span><br><span class="line"><span class="string">成交量的算术平均值: 928649.01 手.</span></span><br><span class="line"><span class="string">收盘价的加权平均价格: 9.11 元.</span></span><br><span class="line"><span class="string">股票最高价: 9.59 元.</span></span><br><span class="line"><span class="string">股票最低价: 8.45 元.</span></span><br><span class="line"><span class="string">股票最高价波动范围: 0.89 元.</span></span><br><span class="line"><span class="string">股票最低价波动范围: 0.88 元.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8022.png" alt="Python语言基础22"></p><h3 id="7-5-3-使用Pandas分析股票交易数据"><a href="#7-5-3-使用Pandas分析股票交易数据" class="headerlink" title="7.5.3  使用Pandas分析股票交易数据"></a>7.5.3  使用Pandas分析股票交易数据</h3><blockquote><p>使用Pandas对股票000001(平安银行)在2018年7月的交易数据进行统计分析<br>分析：<br>文件名为000001_stock02.csv(可从网站资源下载)。为了适应Pandas要求，为文件中各列数据添加了对应的列名<br>Date,       open,  high,  low,   close, volume<br>2018&#x2F;7&#x2F;2,  9.05,  9.05,  8.61,  8.55,  1315520.12<br>2018&#x2F;7&#x2F;3,  8.69,  8.7,   8.67,  8.45,  1274838.5<br>2018&#x2F;7&#x2F;4,  8.63,  8.75,  8.61,  8.61,  711153.38<br>2018&#x2F;7&#x2F;5,  8.62,  8.73,  8.6,   8.55,  835768.81<br>2018&#x2F;7&#x2F;6,  8.61,  8.78,  8.66,  8.45,  988282.75</p></blockquote><ul><li>使用Pandas中的pd.loc()函数、pd.count()函数对文件000001_stock02.csv中的股票数据进行筛选计数</li><li>使用NumPy中的np.where()函数结合在Pandas中获取的列数据对股票数据进行分组</li><li>调用Pandas中的pd.describe()函数对股票数据进行描述性统计</li><li>调用Pandas中的pd.corr()函数分别对股票数据进行相关性分析</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd                      </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> os                     </span><br><span class="line">data = pd.read_csv(os.getcwd()+<span class="string">&quot;\\resource\\000001_stock02.csv&quot;</span>)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.股票最高价高于9.00元的天数:&quot;</span>,(data.loc[(data[<span class="string">&#x27;high&#x27;</span>]&gt;=<span class="number">9.00</span>),</span><br><span class="line">[<span class="string">&#x27;date&#x27;</span>]].count()).iloc[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.股票收盘价分组:&quot;</span>,np.where(data[<span class="string">&#x27;close&#x27;</span>]&gt;=<span class="number">9.00</span>,<span class="string">&#x27;高&#x27;</span>,<span class="string">&#x27;低&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3.股票数据的描述性统计:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.describe())                       </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;4.股票数据的相关性分析:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.corr()) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">1.股票最高价高于9.00元的天数: 11</span></span><br><span class="line"><span class="string">2.股票收盘价分组: [&#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27; &#x27;低&#x27;</span></span><br><span class="line"><span class="string"> &#x27;低&#x27; &#x27;低&#x27; &#x27;高&#x27; &#x27;高&#x27; &#x27;高&#x27; &#x27;高&#x27; &#x27;高&#x27; &#x27;高&#x27; &#x27;高&#x27;]</span></span><br><span class="line"><span class="string">3.股票数据的描述性统计:</span></span><br><span class="line"><span class="string">            open       high        low      　　close        volume</span></span><br><span class="line"><span class="string">count  22.000000  22.000000  22.000000  22.000000  2.200000e+01</span></span><br><span class="line"><span class="string">mean     8.939545   9.074545  8.963636   8.825455   9.286490e+05</span></span><br><span class="line"><span class="string">std      0.300531   0.306404  0.308507   0.300630   4.077300e+05</span></span><br><span class="line"><span class="string">min      8.600000   8.700000  8.600000   8.450000   3.753563e+05</span></span><br><span class="line"><span class="string">25%      8.700000   8.815000  8.705000   8.610000   6.330535e+05</span></span><br><span class="line"><span class="string">50%      8.805000   8.995000  8.880000   8.690000   8.345635e+05</span></span><br><span class="line"><span class="string">75%      9.237500   9.427500  9.250000   9.135000   1.241252e+06</span></span><br><span class="line"><span class="string">max      9.440000   9.590000  9.420000   9.330000   1.781688e+06</span></span><br><span class="line"><span class="string">4.股票数据的相关性分析:</span></span><br><span class="line"><span class="string">             open       high       low       close     volume</span></span><br><span class="line"><span class="string">open   1.000000  0.893724  0.814231  0.940618 -0.090078</span></span><br><span class="line"><span class="string">high   0.893724  1.000000  0.954085  0.901292  0.237201</span></span><br><span class="line"><span class="string">low    0.814231  0.954085  1.000000  0.896178  0.218021</span></span><br><span class="line"><span class="string">close  0.940618  0.901292  0.896178  1.000000 -0.140180</span></span><br><span class="line"><span class="string">volume  -0.090078  0.237201  0.218021 -0.140180  1.000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-5-4-使用图像处理库处理和显示图像"><a href="#7-5-4-使用图像处理库处理和显示图像" class="headerlink" title="7.5.4  使用图像处理库处理和显示图像"></a>7.5.4  使用图像处理库处理和显示图像</h3><blockquote><p>分析：</p><ul><li>使用imageio库中的imread()函数读取图像文件</li><li>获取图像的数据类型和图像大小</li><li>使用imageio库中的imwrite()函数等修改图像颜色、图像大小，裁减图像</li><li>使用matplotlib.pyplot和matplotlib.image库中的相关函数绘制原始图像</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio,os,numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">tiger_jpg=imageio.imread(os.getcwd()+<span class="string">&quot;\\resource\\tiger.jpg&quot;</span>)<span class="comment">#读取图像.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;图像的数据类型:&quot;</span>, tiger_jpg.dtype)                                                <span class="comment">#获取图像数据类型.</span></span><br><span class="line">img_shape = tiger_jpg.shape                                                              <span class="comment">#获取图像大小.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(图像大小, 通道数):&quot;</span>, tiger_jpg.shape)</span><br><span class="line">imageio.imwrite(<span class="string">&quot;tiger_mc.jpg&quot;</span>, tiger_jpg * [<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.5</span>] )<span class="comment">#修改图像颜色并保存.</span></span><br><span class="line">imageio.imwrite(<span class="string">&quot;timg_ms.jpg&quot;</span>,numpy.array(Image.fromarray(tiger_jpg).resize((<span class="number">120</span>,<span class="number">70</span>)))) imageio.imwrite(<span class="string">&quot;timg_mi.jpg&quot;</span>, tiger_jpg[<span class="number">50</span>:<span class="number">130</span>, <span class="number">100</span>:<span class="number">240</span>])<span class="comment">#裁剪图像并保存.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;-------------------------绘制图像--------------------------&quot;&quot;&quot;</span></span><br><span class="line">plt.figure()                                         </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">tiger_jpg1 = mpimg.imread(os.getcwd()+<span class="string">&quot;\\resource\\tiger.jpg&quot;</span>)  <span class="comment">#读取图像.</span></span><br><span class="line">plt.imshow(tiger_jpg1)                                                       <span class="comment">#显示图像.</span></span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)                                                                           </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">tiger_jpg2 = mpimg.imread(<span class="string">&quot;tiger_mc.jpg&quot;</span>)                                     </span><br><span class="line">plt.imshow(tiger_jpg2)                                               </span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)                                           </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tiger_jpg3 = mpimg.imread(<span class="string">&quot;timg_ms.jpg&quot;</span>)                         </span><br><span class="line">plt.imshow(tiger_jpg3)                                                </span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)                                           </span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">tiger_jpg4 = mpimg.imread(<span class="string">&quot;timg_mi.jpg&quot;</span>)                          </span><br><span class="line">plt.imshow(tiger_jpg4)                                                </span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)                                           </span><br><span class="line">plt.show() </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">图像的数据类型: uint8</span></span><br><span class="line"><span class="string">(图像大小, 通道数): (220, 352, 3)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%8023.png" alt="Python语言基础23"></p>]]></content>
      
      
      <categories>
          
          <category> Python语言基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理清理VS工程目录缓存文件</title>
      <link href="/posts/4571/"/>
      <url>/posts/4571/</url>
      
        <content type="html"><![CDATA[<h1 id="批处理清理VS工程目录缓存文件"><a href="#批处理清理VS工程目录缓存文件" class="headerlink" title="批处理清理VS工程目录缓存文件"></a>批处理清理VS工程目录缓存文件</h1><h2>一、前言</h2><p>最近在学习Git仓库管理的时候，可以通过<code>.gitignore</code>制定忽略规则，忽略上传<code>.vs</code>文件。既然不使用<code>.vs</code>文件也可以使程序运行，那么对一些不常用的工程删除缓存文件可以空出来大概三百兆的空间，手动删有些麻烦，所以写了一个<code>.bat</code>的程序</p><h2>二、什么需要删？</h2><p>首先需要知道我们要删什么？</p><p>用<strong>Visual Studio</strong>写程序，每一个工程项目下会生成</p><ul><li><code>.vs</code>用来存储当前用户在解决方案中的工作配置，具体包括VS关闭前最后的窗口布局、最后打开的选项卡&#x2F;操作记录&#x2F;文件文档、某些自定义配置&#x2F;开发环境、调试断点等这类设置信息和状态</li><li>Debug</li><li>Release</li><li>ipch</li><li>sdf</li></ul><p>等缓存文件</p><blockquote><p>举一个我亲测的例子</p><p>我用的是Visual Studio 2017，新建八个源文件，每个源文件随便<code>cout</code>一些文字，大概5、6行的代码。每写完一个源文件都运行一次(运行才会产生缓存文件)，最终这个项目占245M，删掉缓存后，仅占13.7KB。何况缓存会随着每一次运行逐步增大，所以说，清掉这些缓存很有必要！</p></blockquote><h2>普通版</h2><blockquote><p>在工程目录下新建一个<code>.txt</code>文件，将以下内容保存为<code>.bat</code>后缀的文件，双击运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C%2B%2B/%E6%89%B9%E5%A4%84%E7%90%86VS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%9501.png" alt="Typora-Img/批处理VS工程目录01.png at main · GC-ZF/Typora-Img (github.com)"></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">del</span> /f /s /q \debug\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q debug</span><br><span class="line"><span class="built_in">del</span> /f /s /q ipch\*.*</span><br><span class="line"><span class="built_in">rd</span> /s/q  x64</span><br><span class="line"><span class="built_in">rd</span> /s/q  ipch</span><br><span class="line"><span class="built_in">del</span> /f /s /q \.vs\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q .vs</span><br><span class="line"><span class="built_in">del</span> /s /q *.sdf </span><br><span class="line"><span class="built_in">del</span> /f /s /q \x64\debug\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q x64\debug</span><br><span class="line"><span class="built_in">del</span> /f /s /q \test\x64\debug\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q test\x64\debug</span><br><span class="line"><span class="built_in">del</span> /f /s /q \test\debug\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q test\debug</span><br><span class="line"><span class="built_in">rd</span> /s /q test\x64</span><br><span class="line"><span class="built_in">del</span> /f /s /q test\ipch\*.*</span><br><span class="line"><span class="built_in">rd</span> /s/q  test\ipch</span><br><span class="line"><span class="built_in">del</span> /f /s /q \test\.vs\*.*</span><br><span class="line"><span class="built_in">rd</span> /s /q test\.vs</span><br><span class="line"><span class="built_in">del</span> /s /q test\*.sdf </span><br></pre></td></tr></table></figure><blockquote><p>接触过<a href="https://blog.csdn.net/qq_49488584/article/details/122609779?spm=1001.2014.3001.5501">CMD命令&#x2F;Powershell</a>的话，很容易发现，这段代码其实就是执行<code>del</code>删除指定文件夹内的所有文件之后执行<code>rd</code>删除空文件夹(因为不可以直接删除非空文件夹，所以先执行<code>del</code>再执行<code>rd</code>)。第11~20行删除的是项目名称为<code>text</code>文件内的指定文件，对我的**”C++ Study 源程序”**文件夹就没有作用，这种方法只能指定路径、指定文件名字，具有一定的局限性。</p></blockquote><h2>精简版</h2><blockquote><p>同理在工程目录下新建一个<code>.txt</code>文件，将以下内容保存为<code>.bat</code>后缀的文件，双击运行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98C%2B%2B/%E6%89%B9%E5%A4%84%E7%90%86VS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%9502.png" alt="Typora-Img/批处理VS工程目录01.png at main · GC-ZF/Typora-Img (github.com)"></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">setlocal enabledelayedexpansion  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (Debug) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (.vs) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (Release) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (Win32) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (x64) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (ipch) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (*.sdf) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">::删除CMake cache</span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (CMakeFiles) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (Testing) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (_CPack_Packages) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">rd</span> /s /q <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (CMakeCache.txt) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (Makefile) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (*.cmake) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (*.exe) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (*.a) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (install_manifest.txt) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><blockquote><p>这种方法可以**递归删除(即递归目录中所有文件夹)**当前目录下指定文件，即便是在下一级目录中。所以没有第一种方法的局限性</p><p>eg：需要删除 x64中<code>debug</code>文件夹，第一种方法的路径是<code>x64/debug</code>，第二种方法的路径是<code>debug</code>，至于<code>debug</code>在哪，<code>.bat</code>会自己递归遍历文件夹位置</p></blockquote><blockquote><p>如果一个文件夹中有多个C++工程项目，就不需要分别在工程目录下执行<code>.bat</code>，可以在根目录执行<code>.bat</code></p></blockquote><p><img src="/../../../../../Typora/Root/img/%E6%89%B9%E5%A4%84%E7%90%86%E6%B8%85%E7%90%86VS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6/%E6%89%B9%E5%A4%84%E7%90%86VS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%9502-16514157481084.png" alt="image-20220208183121481"></p><blockquote><p>以上是我自己写的工程项目中涉及的缓存文件夹，如果自己做别的开发，有其它缓存文件可以按以下格式，自己修改</p></blockquote><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /<span class="built_in">r</span> . %%a <span class="keyword">in</span> (需要删除的文件夹名字或指定后缀) <span class="keyword">do</span> (  </span><br><span class="line">  <span class="keyword">if</span> exist %%a (</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete&quot;</span> %%a</span><br><span class="line">  <span class="built_in">del</span> <span class="string">&quot;%%a&quot;</span> </span><br><span class="line"> )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用 从入门到入土 收藏吃灰系列</title>
      <link href="/posts/2334/"/>
      <url>/posts/2334/</url>
      
        <content type="html"><![CDATA[<h1>Git使用 从入门到入土 收藏吃灰系列</h1><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ul><li>参考安装<a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%7B%22request_id%22:%22164239270916780264034862%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164239270916780264034862&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833.pc_search_insert_es_download&utm_term=git%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Git 详细安装教程</a></li><li>参考视频<a href="https://www.bilibili.com/video/BV1FE411P7B3?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click">B站 Git最新教程通俗易懂</a>，这个有点长，感觉讲的精华不多</li><li>参考视频<a href="https://www.bilibili.com/video/BV1BE411g7SV?spm_id_from=333.999.0.0">『Git』知道这些就够了_哔哩哔哩_bilibili</a>，这个精华多，推荐看这个</li><li>参考视频<a href="https://www.bilibili.com/video/BV1tf4y1e7yt?spm_id_from=333.999.0.0">7小时学会Git 基础全套完整教程（从入门到精通）_哔哩哔哩_bilibili</a>，这个虽然长，但是他偏实践，对小白友好，特别有意思</li><li><a href="https://oschina.gitee.io/learn-git-branching/">附一个Git动画学习网站</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li></ul><p>讲讲小张的感受：我没有接触过<code>Git</code>，所以看了很多视频，对于入门使用确实只要知道<code>git clone</code>,<code>git add</code>,<code>git commit</code>,<code>git push</code>,<code>git merge </code>,确实也就足够了。但是我很好奇背后的原理，为什么要用<code>git add</code>到暂存区而不是直接<code>git commit</code>？很多指令之间为什么要按一定的顺序执行？所以这个系列我以初学的时候，小白的角度从安装到工作原理(有的是我自己的见解，如果感觉不对，欢迎指正)，再到实际应用！另外，推荐看一遍第三个参考视频，然后看一下第二个参考视频，对工作原理的讲解和实际应用确实不错！</p><h1 id="二、版本控制"><a href="#二、版本控制" class="headerlink" title="二、版本控制"></a>二、版本控制</h1><h2 id="2-1什么是版本控制？"><a href="#2-1什么是版本控制？" class="headerlink" title="2.1什么是版本控制？"></a>2.1什么是版本控制？</h2><blockquote><p>Q：什么是&#x3D;&#x3D;版本控制&#x3D;&#x3D;？</p><p>A：版本控制(Revision control)是一种在开发过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><p>A：版本迭代，新的版本</p></blockquote><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目技术</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！不停的修改、提交，我们就迫切需要一个版本控制工具！通过版本控制可以回溯历史版本。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A001.png" alt="image-20220117112041369"></p><p>多人开发就必须要使用版本控制！</p><h3>常见的版本控制工具</h3><p>主流的版本控制器：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li><strong>Visual Studio Online</strong></li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h2 id="2-2版本控制的分类"><a href="#2-2版本控制的分类" class="headerlink" title="2.2版本控制的分类"></a>2.2版本控制的分类</h2><h3>1.本地版本控制</h3><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A002.png" alt="Local Computer"></p><h3>2.集中版本控制  SVN</h3><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A003.png" alt="Central VCS Server"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，&#x3D;&#x3D;所有数据都保存在单一的服务器上&#x3D;&#x3D;，有很大的风险这个服务器损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><h3>3.分布式版本控制 Git</h3><p>每个人都拥有全部的代码！&#x3D;&#x3D;安全隐患&#x3D;&#x3D;！程序员携代码跑路！！！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，<strong>只要有一个用户</strong>的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A004.png" alt="Server Computer"></p><h2 id="2-3Git与SVN最主要区别"><a href="#2-3Git与SVN最主要区别" class="headerlink" title="2.3Git与SVN最主要区别"></a>2.3Git与SVN最主要区别</h2><blockquote><p>&#x3D;&#x3D;笔试可能会问到&#x3D;&#x3D;</p><p>Q：Git与SVN最主要区别是什么？</p><p>A：SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。<br>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p></blockquote><p><font size=6 color="#2fc1df">Git是目前世界上最先进的分布式版本控制系统</font></p><h1 id="三、Git历史"><a href="#三、Git历史" class="headerlink" title="三、Git历史"></a>三、Git历史</h1><p>同生活中的许多伟大事物一样，Git诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper(付费)来管理和维护代码。</p><p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。(2周左右！)也就是后来的 Git！</p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A005.jpg" alt="李纳斯"></p><p>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p><h1 id="四、Git安装及卸载"><a href="#四、Git安装及卸载" class="headerlink" title="四、Git安装及卸载"></a>四、Git安装及卸载</h1><h2 id="4-1安装"><a href="#4-1安装" class="headerlink" title="4.1安装"></a>4.1安装</h2><blockquote><p>以下除了第三步修改路径，第四步我加了添加快捷方式，其余都为默认设置，无脑安装即可。只是做了一些解释，如果有需要，可以根据自身情况修改。</p></blockquote><h3>4.1.1软件下载</h3><blockquote><p><a href="https://git-scm.com/">git官网</a>，下载git对应操作系统的版本。所有东西下载慢的话就可以去找镜像！官网下载太慢，我们可以使用<a href="http://npm.taobao.org/mirrors/git-for-windows">淘宝镜像下载</a></p></blockquote><p>[git官网给出的指令教程](<a href="https://git-scm.com/book/en/v2">Git - Book (git-scm.com)</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A006.png" alt="image-20220117120239969"></p><h3>4.1.2使用许可声明</h3><blockquote><p>双击下载好的安装包，开始安装，点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A007.png" alt="image-20220117122201653"></p><h3>4.1.3选择安装目录</h3><blockquote><p>修改一下路径，点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A008.png" alt="image-20220117122303269"></p><h3>4.1.4选择安装组件</h3><blockquote><p>这里我勾选了添加桌面图标(个人习惯)。点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A009.png" alt="image-20220117122824758"></p><h3>4.1.5选择开始菜单文件夹</h3><blockquote><p>&#x3D;&#x3D;文本框不能为空&#x3D;&#x3D;，如果不要添加到开始菜单，勾选即可。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A010.png" alt="image-20220117122939981"></p><blockquote><p>安装后菜单栏如图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A011.png" alt="image-20220117154815823"></p><h3>4.1.6选择 Git 默认编辑器</h3><blockquote><p>Git 安装程序里面内置了 10 种编辑器，比如 <code>Atom</code>、<code>Notepad</code>、<code>Notepad++</code>、<code>Sublime Text</code>、<code>Visual Studio Code</code>、<code>Vim</code> 等等，默认的是<code> Vim</code> ，选择 <code>Vim</code> 后可以直接进行到下一步，但是<code>Vim</code>是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步。<br>下图为默认编辑器 <code>Vim</code>可直接点击<strong>Next</strong>到第七步。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A012.png" alt="image-20220117123220462"></p><blockquote><p>如果你不想用 <code>Vim</code> 当默认编辑器，换一个，比如 <code>Notepad++</code> ，那么你者需要点击下面的蓝色字体 “ Notepad++ “ 去其官网下载安装好才能进行下一步 <strong>next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A013.png" alt="image-20220117123256688"></p><blockquote><p>安装后还要配置在<code>我的电脑-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;系统变量-&gt;Path-&gt;编辑添加</code>Notepad++ 的安装地址，如 <code>C:\Program Files\notepad++</code><br>这样才能在 Git Bash 里面直接调用 Notepad++。点击<strong>Next</strong>到第七步。</p></blockquote><h3>4.1.7决定初始化新项目(仓库)的主干名字</h3><blockquote><p>第一种是让 Git 自己选择，名字是<code>master</code>，但是未来也有可能会改为其他名字；第二种是我们自行决定，默认是<code>main</code>，当然，你也可以改为其他的名字。一般默认第一种，点击<strong>Next</strong>到第八步。</p></blockquote><blockquote><p><strong>注： 第二个选项下面有个<code>NEW！</code>，说很多团队已经重命名他们的默认主干名为<code>main</code>. 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter(黑人的命也是命)运动，很多人认为<code>master</code>不尊重黑人，呼吁改为<code>main</code>.</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A014.png" alt="image-20220117123633410"></p><h3>4.1.8调整path 环境变量</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><blockquote><p><strong>这步意思是指使用什么方式打开git？</strong></p><p>第一种是仅从&#x3D;&#x3D;Git Bash&#x3D;&#x3D;使用Git。这个的意思就是你只能通过Git安装后的Git Bash来使用Git，其他的什么命令提示符啊等第三方软件都不行。</p><p>第二种是&#x3D;&#x3D;从命令行以及第三方软件进行 Git&#x3D;&#x3D;。这个就是在第一种基础上进行第三方支持，你将能够从&#x3D;&#x3D;Git Bash&#x3D;&#x3D;，&#x3D;&#x3D;命令提示符(cmd)&#x3D;&#x3D; 和  &#x3D;&#x3D;Windows PowerShell&#x3D;&#x3D;以及可以从 &#x3D;&#x3D;Windows 系统环境变量&#x3D;&#x3D;中寻找 Git 的任何第三方软件中使用 Git。推荐使用这个。</p><p>第三种是从&#x3D;&#x3D;命令提示符使用 Git 和可选的 Unix 工具&#x3D;&#x3D;。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。一句话，适合比较懂的人折腾。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A015.png" alt="image-20220117123937426"></p><blockquote><p><strong>翻译</strong></p><p>Adjusting your PATH environment<br>调整路径环境</p><p>How would you like to use Git from the command line?<br>您希望如何使用命令行中的Git？</p><ul><li><input disabled="" type="checkbox"> use Git from Git Bash only<br>只使用Git Bash中的Git</li></ul><p>This is the most cautious choice as your PATH will not be modified at all.You wonly be able to use the Git command line tools from Git Bash.<br>这是最谨慎的选择，因为您的路径根本不会被修改，您将只能使用Git命令行工具Git Bash。</p><ul><li><input disabled="" type="checkbox"> Git from the command line and also from 3rd-party software<br>git来自命令行，也来自第三方软件。</li></ul><p>(Recommended) This option adds only some minimal Git wrappers to yourPATH to avoid cluttering your environment with optional Unix tools.<br>(推荐)此选项只向您的PATH添加一些最小的Git包装器，以避免将您的环境与可选的Unix工具相混淆。</p><p>You will be able to use Git from Git Bash, the Command Prompt and the WindovPowershell as well as any third-party software looking for Git in PATH.<br>您将能够使用Git从Git Bash，命令提示符和WindovPowershell以及任何第三方软件寻找Git的路径。</p><ul><li><input disabled="" type="checkbox"> use Git and optional Unix tools from the Command Prompt<br>从命令提示符中使用Git和可选Unix工具</li></ul><p>Both Git and the optional Unix tools will be added to your PATH.<br>Git和可选的Unix工具都将添加到您的路径中。</p><p>Warning: This will override Windows tools like “find” and “sort”. onlyuse this option if you understand the implications.<br>警告：这将覆盖Windows工具，如“查找”和“排序”。只有当你理解其含义时，才使用这个选项。</p></blockquote><h3>4.1.9选择SSH可执行文件</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A016.png" alt="image-20220117145123565"></p><blockquote><p><strong>翻译</strong></p><p>choosing the SSH executable<br>选择SSH可执行文件</p><p>Which Secure Shell client program would you like Git to use?<br>您希望Git使用哪个安全的Shell客户端程序？</p><ul><li><p><input disabled="" type="checkbox"> use bundled opensSH<br>使用捆绑开放SH</p><p>This uses ssh.exe that comes with Git.<br>它使用Git附带的ssh.exe。</p></li><li><p><input disabled="" type="checkbox"> Use external opensSH<br>使用外部操作系统SH</p><p>NEW!This uses an external ssh.exe.Git will not install its own OpenSSH(and related) binaries but use them as found on the PATH.<br>新的！这将使用外部的ssh.exe.Git不会安装它自己的OpenSSH(和相关的)二进制文件，而是像在路径上找到的那样使用它们。</p></li></ul></blockquote><h3>4.1.10选择HTTPS后端传输</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A017.png" alt="image-20220117145227617"></p><blockquote><p><strong>翻译</strong></p><p>Choosing HnIPS transport backend<br>选择HnIPS传输后端</p><p>which SSL&#x2F;TLS library would you like Git to use for HTTPS connections?<br>对于HTTPS连接，您希望Git使用哪个SSL&#x2F;TLS库？</p><ul><li><p><input disabled="" type="checkbox"> use the openSSL library<br>使用OpenSSL库</p><p>server certificates will be validated using the ca-bundle.crt file.<br>服务器证书将使用ca-bundle.crt文件进行验证。</p></li><li><p><input disabled="" type="checkbox"> use the native Windows secure Channel library<br>使用本机Windows安全通道库</p><p>Server certificates will be validated using Windows Certificate Stores.<br>服务器证书将使用Windows证书存储进行验证。</p><p>This option also allows you to use your company’s internal Root CA certificatesdistributed e.g. via Active Directory Domain Services.<br>此选项还允许您使用公司的内部根CA证书，例如通过ActiveDirectory域服务分发的。</p></li></ul></blockquote><p>这两种选项有什么区别呢？[来自](<a href="https://stackoverflow.com/questions/62456484/whats-the-difference-between-openssl-and-the-native-windows-secure-channel-libr">git - What’s the difference between OpenSSL and the native windows Secure Channel library - Stack Overflow</a>)</p><blockquote><p>如果在具有企业管理证书的组织中使用 Git，则将需要使用安全通道。如果你仅使用 Git 来访问公共存储库（例如 <a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a> ），或者你的组织不管理自己的证书，那么使用 SSL 后端（它们只是同一协议的不同实现）就可以了。</p><p>也就是说，作为普通用户，只是用 Git 来访问 Github、<a href="https://so.csdn.net/so/search?q=GitLab&spm=1001.2101.3001.7020">GitLab</a> 等网站，选择前者就行了。点击next到第十一步。</p></blockquote><h3>4.1.11配置行尾符号转换</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A018.png" alt="image-20220117145441510"></p><blockquote><p><strong>翻译</strong></p><p>Configuring the line ending conversions<br>配置行结束转换</p><p>How should Git treat line endings in text files?</p><ul><li><input disabled="" type="checkbox"> Checkout windows-style, commit Unix-style line endings<br>签出窗口样式，提交unix样式的行尾。</li></ul><p>Git will convert LF to CRLF when checking out text files. When committingtext files, CRLF will be converted to LF. For cross-platform projects,<br> GIT将在签出文本文件时将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。跨平台项目，</p><p>this is the recommended setting on Windows (“ core.autocrif” is set to “true”).<br> 这是在Windows上建议的设置(“core.autocrif”设置为“true”)。</p><ul><li><input disabled="" type="checkbox"> checkout as-is, commit Unix-style line endings<br>以-is签出，提交unix样式的行尾。</li></ul><p>Git will not perform any conversion when checking out text files. when<br> 当签出文本文件时，git将不会执行任何转换。什么时候</p><p>committing text files,CRLF will be converted to LF.For cross-platform projects,this is the recommended setting on Unix (“core.autocrlf” is set to “input”).<br> 提交文本文件时，CRLF将转换为LF.or跨平台项目，这是Unix上的建议设置(“core.autocrlf”设置为“input”)。</p><ul><li><input disabled="" type="checkbox"> checkout as-is, commit as-is<br>按-原样结帐，按-原样提交</li></ul><p>Git will not perform any conversions when checking out or committingtext files.Choosing this option is not recommended for cross-platformprojects (“core.autocrlf” is set to “false”).<br>当签出或提交文本文件时，git将不会执行任何转换。对于跨平台项目，不建议选择此选项(“core.autocrlf”设置为“false”)。</p></blockquote><p>这三种选择分别是：</p><ul><li><p>签出 Windows 样式,提交 Unix 样式的行结尾。</p></li><li><p>按原样签出，提交Unix样式的行结尾。</p></li><li><p>按原样签出，按原样提交。&#96;</p></li></ul><p>那 Windows 样式和 Unix 样式到底有什么区别呢？</p><p>引用 《<a href="https://book.douban.com/subject/26462816/">GitHub 入门与实践</a>》 <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%7B%22request_id%22:%22164239270916780264034862%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164239270916780264034862&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833.pc_search_insert_es_download&utm_term=git%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187#fn2">第 50 页内容</a></p><blockquote><p>GitHub 中公开的代码大部分都是以 Mac 或 Linux 中的 LF（Line Feed）换行。然而，由于 Windows 中是以 CRLF（Carriage Return+ Line Feed）换行的，所以在非对应的编辑器中将不能正常显示。</p><p>Git 可以通过设置自动转换这些换行符。使用 Windows 环境的各位，请选择推荐的 “Checkout Windows-style，commit Unix-style line endings” 选项。换行符在签出时会自动转换为 CRLF，在提交时则会自动转换为 LF .</p></blockquote><p>上面说 Mac 、Linux、Unix 的 Line Feed ，翻译过来就是换行符，用 “\n” 表示，换行符 “\n” 的 ASCII 值为10；<br>Windows 的是 Carriage Return+ Line Feed（回车+换行），用 “\r\n” 表示，回车符 “\r” 的 ASCII 值为13；</p><p>这上下两者是不一样的。<br>我们现在的教程就是介绍怎么安装 Windows 版 Git，肯定选第一项啦。</p><h3>4.1.12配置终端模拟器以与 Git Bash 一起使用</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A019.png" alt="image-20220117150139136"></p><blockquote><p><strong>翻译</strong></p><p>Configuring the terminal emulator to use with Git Bash<br>配置用于Git Bash的终端模拟器</p><p>which terminal emulator do you want to use with your Git Bash?<br>您想在Git Bash中使用哪个终端模拟器？</p><ul><li><p><input disabled="" type="checkbox"> Use MinITY (the default terminal of MsYs2)<br>使用MinITY(MsYs 2的默认终端)</p><p>Git Bash will use MinTTY as terminal emulator, which sports a resizable windownon-rectangular selections and a Unicode font. Windows console programs(sucas interactive Python) must be launched via ‘winpty<code> to work in MinTTY. Git Bash will use MinTTY as terminal emulator, which sports a resizable windownon-rectangular selections and a Unicode font. Windows console programs(sucas interactive Python) must be launched via &#39;winpty</code> to work in MinTTY.</p><p>Git Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。 Windows 控制台程序（例如交互式 Python）必须通过 “winpty” 启动才能在 MinTTY 中运行。</p></li><li><p><input disabled="" type="checkbox"> use windows’ default console window<br>使用windows的默认控制台窗口</p><p>Git will use the default console window of Windows (“cmd.exe”), which works vwith Win32 console programs such as interactive Python or node.js, but has avery limited default scroll-back, needs to be configured to use a Unicode font inorder to display non-ASCII characters correctly, and prior to Windows 10 itswindow was not freely resizable and it only allowed rectangular text selections.</p><p>Git 将使用 Windows 的默认控制台窗口（”cmd.exe”），该窗口可与 Win32 控制台程序（例如交互式Python 或<br>node.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在<br>Windows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。</p></li></ul></blockquote><p>建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（’cmd’）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。<br>相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击next到第十三步。</p><h3>4.1.13选择默认的 “git pull” 行为</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A020.png" alt="image-20220117150545907"></p><blockquote><p><strong>翻译</strong></p><p>Choose the default behavior of git pull<br>选择git拉出的默认行为。</p><p>what should <code>git pull</code> do by default?<br>默认情况下，“git pull”应该做什么？</p><ul><li><p><input disabled="" type="checkbox"> DefaulIt fasiforward .ormerge)</p><p>默认（快进或合并）</p><p>This is the standard behavior of <code>git pull</code> : fast-forward the current branch tothe fetched branch when possible, otherwise create a merge commit.<br>这是 “git pull” 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。</p></li><li><p><input disabled="" type="checkbox"> Rebase<br>重基</p><p>Rebase the current branch onto the fetched branch. f there are no localcommits to rebase, this is equivalent to a fast-forward.<br>将当前分支重新定位到获取的分支上。不存在要重基的本地提交，这相当于快速转发.</p></li><li><p><input disabled="" type="checkbox"> only ever fast-forward<br>只有永远快进</p><p>Fast-forward to the fetched branch. Fail if that is not possible.<br>快进到抓取的树枝上。如果这是不可能的，那就失败。</p></li></ul></blockquote><blockquote><p>Q：“git pull” 是什么意思呢？<br>A：git pull 就是获取最新的远程仓库分支到本地，并与本地分支合并</p></blockquote><p>上面给了三个 “git pull” 的行为：<br>第一个是 merge<br>第二个是 rebase<br>第三个是 直接获取</p><p>第一种 git pull &#x3D; git fetch + git merge<br>第二种 git pull &#x3D; git fetch + git rebase<br>第三种 git pull &#x3D; git fetch ？(这个没试过，纯属猜测)</p><p>一般默认选择第一项，git rebase 绝大部分程序员都用不好或者不懂，而且风险很大，但是很多会用的人也很推崇，但是用不好就是灾难。</p><p>git pull 只是拉取远程分支并与本地分支合并，而 git fetch 只是拉取远程分支，怎么合并，选择 merge 还是 rebase ，可以再做选择。</p><p>更多参考资料：</p><ol><li><a href="https://www.zhihu.com/question/38305012">知乎 - git pull 和 git fetch 的区别？</a></li><li><a href="https://www.zhihu.com/question/36509119">知乎 - 在开发过程中使用 git rebase 还是 git merge，优缺点分别是什么？</a></li><li><a href="https://stackoverflow.com/questions/2850369">Stackoverflow - Why does git perform fast-forward merges by default? </a></li><li><a href="https://stackoverflow.com/questions/14894768/">Stackoverflow - In git how is fetch different than pull and how is merge different than rebase?</a></li><li><a href="https://stackoverflow.com/questions/18930527">Stackoverflow - Difference between git pull and git pull –rebase</a></li></ol><h3>4.1.14选择一个凭证帮助程序</h3><blockquote><p>点击<strong>next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A021.png" alt="image-20220117151108306"></p><blockquote><p><strong>翻译</strong></p><p>Choose a credential helper<br>选择凭据助手</p><p>which credential helper should be configured?<br>应该配置哪个凭据助手？</p><ul><li><input disabled="" type="checkbox"> Git Credential Manager<br>Git 凭证管理</li></ul><p>Use the cross-platform Git Credential Manager.<br>使用跨平台Git凭据管理器。</p><p>See more information about the future of Git Credential Manager here.<br>请参阅有关Git凭证经理未来的更多信息。</p><ul><li><input disabled="" type="checkbox"> None<br>无</li></ul><p>Do not use a credential helper.<br>不要使用凭据助手。</p></blockquote><p>一共两个选项：<br>Git 凭证管理<br>不使用凭证助手</p><p>第一个选项是提供登录凭证帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入用户名和密码才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）。</p><p>Windows 的 Git 凭据管理器（Git Credential Manager）是在 Windows 上运行的基于 .NET Framework 的 Git 凭据帮助器。同样，适用于 Mac 和 Linux 的 Git 凭据管理器（Java GCM）是基于 Java 的 Git 凭据帮助器，仅可在 macOS 和 Linux 上运行。尽管这两个项目都旨在解决相同的问题（使用 Git 提供无缝的多因素 HTTPS 身份验证），但它们基于不同的代码库和语言，因此难以确保特性对等。<br>Git Credential Manager Core（GCM Core）旨在用统一的代码库替换 GCM Windows 和 Java GCM，这在将来应该更容易维护和增强。<br>登录图如下(属于第一个选项的)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A022.png" alt="登录"></p><p>点击<strong>Next</strong>到十五步。</p><h3>4.1.15配置额外的选项</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A023.png" alt="image-20220117151749491"></p><blockquote><p><strong>翻译</strong></p><p>Configuring extra options<br>配置额外选项</p><p>which features would you like to enable?<br>您希望启用哪些功能？</p><ul><li><p><input disabled="" type="checkbox"> Enable file Svstem caching<br>启用文件缓存系统</p><p>File system data will be read in bulk and cached in memory for certainoperations (“core.fscache” is set to “true”).This provides a significantperformance boost.<br>文件系统数据将大容量读取，并缓存在内存中以进行确定操作(“core.fscache”设置为“true”)，这将大大提高性能。</p></li><li><p><input disabled="" type="checkbox"> Enable symbolic links<br>启用符号链接</p><p>Enable symbolic links (requires the SeCreateSymbolicLink permission).Please note that existing repositories are unaffected by this setting.<br>启用符号链接(需要SeCreateSymbolicLink权限)。请注意，现有的存储库不受此设置的影响。</p></li></ul></blockquote><p>有两个选项：<br>启用文件系统缓存<br>启用符号链接</p><p>&#x3D;&#x3D;启用文件系统缓存&#x3D;&#x3D;就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。<br>&#x3D;&#x3D;启用符号链接&#x3D;&#x3D; ，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。</p><p>更多关于 “符号链接” 参考资料：</p><ol><li><p>GitHub - Symbolic-Links [<a href="https://github.com/git-for-windows/git/wiki/Symbolic-Links]">https://github.com/git-for-windows/git/wiki/Symbolic-Links]</a></p></li><li><p>Stackoverflow - How does Git handle symbolic links? [<a href="https://stackoverflow.com/questions/954560/]">https://stackoverflow.com/questions/954560/]</a></p></li><li><p>Stackoverflow - What is the difference between NTFS Junction Points and Symbolic Links? [<a href="https://stackoverflow.com/questions/9042542/]">https://stackoverflow.com/questions/9042542/]</a><br>点击<strong>Next</strong>到第十六步。</p></li></ol><h3>4.1.16配置实验性选项</h3><blockquote><p>点击<strong>Next</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A024.png" alt="image-20220117152313231"></p><blockquote><p><strong>翻译</strong></p><p>Configuring experimental options<br>配置实验选项</p><p>These features are developed actively. Would you like to try them?<br>这些特征得到了积极的发展。你想试试吗？</p><ul><li><p><input disabled="" type="checkbox"> Enable experimental support for pseudo consoles.<br>启用对伪控制台的实验支持。</p><p>(NEW!)This allows running native console programs like Node or Python in aGit Bash window without using winpty, but it still has known bugs.<br>(新的！)这允许在agitBash窗口中运行本地控制台程序，如Node或Python，而无需使用winpty，但它仍然存在已知的bug。</p></li><li><p><input disabled="" type="checkbox"> Enable experimental built-in file system monitor<br>启用试验性内置文件系统监视器。</p><p>(NEW!)Automatically run a built-in file system watcher, to speed up commonoperations such as<code>git status</code>, ‘ git add’, ‘git commit’, etc in worktreescontaining many files.<br>(新！)自动运行内置的文件系统监视程序，以加快包含多个文件的工作树中的公共操作，如“git status”、“git add”、“git COMMIT”等。</p></li></ul></blockquote><p>这是实验性功能，可能会有一些小错误之类的，建议不用开启。</p><p>点击<strong>install</strong>进行安装。</p><p>安装成功！</p><p>开始菜单会多出这三个以及鼠标右击</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A025.png" alt="image-20220117155845141"></p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD：</strong>Windows风格的命令行</p><p><strong>Git GUI：</strong>图形界面的Git，可以通过它快速创建新仓库（项目），克隆存在的仓库（项目），打开存在的仓库（仓库），不建议初学者使用，尽量先熟悉常用命令</p><p>之后来启动测试一下</p><p>在如何一个位置右击选择Git Bash Here。输入<code>ls</code>,输出当前文件夹内所有文件名称</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A026.png" alt="image-20220117160408507"></p><h2 id="4-2卸载"><a href="#4-2卸载" class="headerlink" title="4.2卸载"></a>4.2卸载</h2><h3>4.2.1清除环境变量</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A027.png" alt="image-20220117121756033"></p><h3>4.2.2使用控制面板或自己的软件管家之类卸载</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A028.png" alt="image-20220117121909217"></p><h2 id="4-3风格样式修改"><a href="#4-3风格样式修改" class="headerlink" title="4.3风格样式修改"></a>4.3风格样式修改</h2><h3>4.3.1修改language</h3><blockquote><p>右击选择<code>opinion</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A029.png" alt="image-20220117170352885"></p><p><code>Windows→UI language→zh_CN</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A030.png" alt="image-20220117170426793"></p><blockquote><p>在外观中可以修改Git Bash的窗口样式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A031.png" alt="image-20220117170521315"></p><h1 id="五、Git配置"><a href="#五、Git配置" class="headerlink" title="五、Git配置"></a>五、Git配置</h1><h2 id="5-1设置用户名与邮箱（用户标识，必要）"><a href="#5-1设置用户名与邮箱（用户标识，必要）" class="headerlink" title="5.1设置用户名与邮箱（用户标识，必要）"></a>5.1设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的<strong>用户名称</strong>和<strong>e-mail</strong>地址。因为每次Git提交都会使用该信息。如果不配置，不能正常提交，会警告先配置后提交。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name GC-ZF  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email 1310446718@qq.com   <span class="comment">#邮箱</span></span><br><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><p>这里只需要做一次这个设置，因为传递了–global 选项，Git将总是会使用该信息来处理在系统中所做的一切操作。如果希望在一个特定的项目中使用不同的名称或e-mail地址，可以在该项目中运行<code>git config --local user.name</code>,<code>git config --local user.email</code></p><p>打个比方，如果要区分Github和Gitee的用户提交信息 （[第十二点会实际应用](# 十二、同时配置Gitee、Github 公钥)），可以把常用的一个设置为全局变量。单独为另一个账号的仓库设置用户信息，这样就不用频繁地做这步。git 的配置分为三级别，<code>System</code> —&gt; <code>Global</code> —&gt;<code>Local</code>。<code>System</code> 即系统级别，<code>Global</code> 为配置的全局，<code>Local</code> 为仓库级别，优先级是 <code>Local</code> &gt; <code>Global</code> &gt; <code>System</code></p><p>上面这些有点不好懂，举个例子。设置好以后，在本地仓库完成了一次提交(没有push远程)，使用<code>git log</code> 可以查看历史提交记录。这里会显示这条历史的作者和邮箱，<code>push</code>到远程以后，其他人也可以看到这些修改记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A032.png" alt="image-20220120150847047"></p><h2 id="5-2配置文件"><a href="#5-2配置文件" class="headerlink" title="5.2配置文件"></a>5.2配置文件</h2><p>所有的配置文件都保存在本地</p><ol><li>查看配置 <code>git config -l</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A033.png" alt="image-20220117171312273"></p><ol start="2"><li>查看系统配置<code>git config --system --list</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A034.png" alt="image-20220117171427100"></p><ol start="3"><li>查看当前用户（global）配置<code>git config --global --list</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A035.png" alt="image-20220117171444475"></p><p>2、3命令的本质其实就是输出配置文件内容</p><p><strong>Git相关的配置文件：</strong></p><blockquote><ol><li><p>Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p></li><li><p>C:\Users\用户名8\ .gitconfig  只适用于当前登录用户的配置  –global 全局</p></li></ol></blockquote><h2 id="5-3-Git-Bash中文乱码"><a href="#5-3-Git-Bash中文乱码" class="headerlink" title="5.3 Git Bash中文乱码"></a>5.3 Git Bash中文乱码</h2><blockquote><p><code>git status</code>文件名称使用中文时被转义为\xx\xx\xx</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0144.png" alt="image-20220207210306105"></p><p>这里以vs2017编译器为例子，不同的编译器默认编码不同</p><blockquote><p>Q：为什么会乱码？<br>A：Git开发核心是Linux系统，使用UTF8编码，Windows使用GBK编码导致中文目录乱码，VS2017默认GBK编码导致代码中文注释乱码</p></blockquote><blockquote><p>解决方案：</p><ol><li>把三者的编码设置成UTF8</li><li>把三者的编码设置成GBK</li></ol><p>方案一，把vs设置成UTF8问题不大，但是把Windows设置成UTF8可能一些旧的软件以及他们生成的文件会出现乱码，不支持UTF8编码。所以我没有尝试方案一</p><p>方案二，修改Git的配置为GBK，但是Windows的部分文件格式例如<code>.txt</code>文件使用UTF-8编码，其它文件又看不到了。得不偿失</p><p>方案三，前两个方案的折中，禁止Git在读取文件目录时，对文件名字中的汉字转义成UTF-8格式。修改VS2017的默认编码为UTF-8</p></blockquote><blockquote><p>在Git Bash窗口使用这条命令(如果想取消，把false替换成true)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#core.quotepath设为false的话，就不会对0×80以上的字符进行转义。中文显示正常</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>现在文件名称是中文显示了，但是<code>git diff</code>或者<code>vim</code>、<code>cat</code>在Git Bash窗口查看C++文件内容时，也会乱码(绿色是我修改后的样子)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0143.png" alt="image-20220207210344343"></p><blockquote><p> 单独设置编译器的编码方式</p><ol><li><p>首先<a href="https://blog.csdn.net/willingtolove/article/details/103772406?ops_request_misc=%7B%22request_id%22:%22164432057016780269856022%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164432057016780269856022&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-103772406.pc_search_insert_es_download&utm_term=%E9%AB%98%E7%BA%A7%E4%BF%9D%E5%AD%98%E9%80%89%E9%A1%B9&spm=1018.2226.3001.4187">VS2019 设置显示”高级保存选项_</a></p></li><li><p>先打开一个程序，鼠标点一下文件内容，让光标显示出来，不然<code>高级保存选项</code>是灰色</p></li><li><p>在<code>文件→高级保存选项</code>选择<code>Unicode(UTF-8 带签名)</code>单独设置单个程序的编码方式</p></li></ol><p> 但是这样很不方便，在<code>工具→扩展和更新→联机</code>搜索<code>Force UTF-8(With BOM)</code>，使用这个插件，保存时默认为UTF-8编码</p><p> 扩展插件里还有一个<code>Force UTF-8(No BOM)</code>，<code>No BOM</code>就是不带签名，这个签名的作用就是在运行代码的时候，告诉VS，这段代码用的是UTF-8，如果不告诉VS的话就默认用GBK去转义中文注释，<strong>Git Bash</strong>不会乱码了，但是<strong>VS</strong>运行窗口会乱码</p></blockquote><h1 id="六、常用的命令"><a href="#六、常用的命令" class="headerlink" title="六、常用的命令"></a>六、常用的命令</h1><p>先把命令放在第六大点了，不需要看懂。后面会实践，看不懂回来查看。</p><h3>6.1Linux命令</h3><p>平时一定要多使用！这些可以直接在Git Bush Here中使用。CMD不可以用。</p><blockquote><ol><li>cd                          改变目录</li><li>cd . .                      回退到上一个目录，直接cd进入默认目录</li><li>start&lt;文件名&gt;      打开文件</li><li>cat       &lt;文件名&gt;          在命令窗口显示文件内容</li><li>vim      &lt;文件名&gt;          在命令窗口编辑文件  按“Esc“  输入“：wq”保存文件 ”:e!”放弃更改</li><li>pwd  显示当前所在的目录路径</li><li>ls(ll)   都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细</li><li>touch新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件</li><li>rm     删除一个文件, rm index.js 就会把index.js文件删除。</li><li>mkdir    新建一个目录,就是新建一个文件夹</li><li>rm -r  删除一个文件夹, rm -r src 删除src目录 &#x3D;&#x3D;rm -rf &#x2F; 切勿在Linux中尝试！删除电脑中全部文件！&#x3D;&#x3D;</li><li>mv    移动文件, mv index.html src，index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标 文                                              件夹在同一目录下</li><li>reset重新初始化终端&#x2F;清屏。</li><li>clear 清屏</li><li>history 查看命令历史</li><li>help 帮助</li><li>exit 退出</li><li>‘#’表示注释</li></ol></blockquote><h3>6.2常用的git命令</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A036.png" alt="image-20220117200505318"></p><p>结合图片记忆基本的命令！</p><p>通常提交一个记录只需要依次执行<code>git add .</code>,<code>git commit</code>,<code>git push</code>。操作都是对当前分支有效，加<code>origin</code>就可以指定分支。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .      </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区中的内容到本地仓库</span></span><br><span class="line">git commit -m <span class="comment">#&quot;消息内容&quot;    -m 代表提交信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  将当前分支push到远程(远程存在该分支)</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将xxx分支推到远程上，因为远程上没有这个新的xxx分支，所以要加-u。第一次将新分支提交到远程上时需要加-u</span></span><br><span class="line">git push origin xxx</span><br><span class="line">git push -u origin xxx<span class="comment"># 效果相同</span></span><br><span class="line">git push --set-stream origin xxx <span class="comment"># 效果相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程主机的最新内容拉到本地，不进行合并</span></span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程主机指定分支最新内容拉到本地，不进行合并</span></span><br><span class="line">git fetch &lt;远程主机名 默认是origin&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#  将远程主机的最新内容拉到本地，与当前本地分支直接合并(仅是当前分支) 等于fetch+merge</span></span><br><span class="line">git pull</span><br><span class="line">git pull origin &lt;branchName&gt; <span class="comment"># 指定分支</span></span><br></pre></td></tr></table></figure><p>其它常用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆</span></span><br><span class="line">git <span class="built_in">clone</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到别的分支/记录</span></span><br><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并远程分支到当前分支</span></span><br><span class="line">git merge origin &lt;远程分支&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete &lt;branch-name&gt;</span><br><span class="line">git branch -dr &lt;remote/branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变基 按提交顺序合并指定分支到当前分支</span></span><br><span class="line">git rebase </span><br><span class="line"></span><br><span class="line"><span class="comment"># 变基整合到一条</span></span><br><span class="line">git rebase -i &lt;哈希值&gt;</span><br><span class="line">git rebase HEAD~数字 <span class="comment">#从当前记录到前x个记录合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将添加到暂存区的文件移出</span></span><br><span class="line">git reset &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复已删除的文件</span></span><br><span class="line">git reset &lt;哈希值&gt;--hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有未提交的修改（工作区和暂存区）保存至堆栈中</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;挑拣&quot;提交</span></span><br><span class="line">git cherry pick</span><br></pre></td></tr></table></figure><p><code>git log</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交记录 展开显示每次提交的内容差异</span></span><br><span class="line">git <span class="built_in">log</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程提交记录与本地差异(必须先git fetch 拉取)</span></span><br><span class="line">git <span class="built_in">log</span> -p FETCH_HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形化记录</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化的图形记录</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 dev 有，而 master 中没有的</span></span><br><span class="line">git <span class="built_in">log</span> dev ^master </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 dev 中比 master 中多提交了哪些内容</span></span><br><span class="line">git <span class="built_in">log</span> master..dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不知道谁提交的多谁提交的少，单纯想知道有什么不一样</span></span><br><span class="line">git <span class="built_in">log</span> dev...master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有记录，包括已删除的文件</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><code>git diff</code>用来比较文件之间的不同</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当工作区有改动，暂存区为空，diff的对比是&quot;工作区与最后一次commit提交的仓库的所有文件&quot;；</span></span><br><span class="line"><span class="comment"># 当工作区有改动，暂存区不为空，diff对比的是&quot;工作区与暂存区的所有文件&quot;。</span></span><br><span class="line">git diff</span><br><span class="line">git diff &lt;filename&gt;<span class="comment"># 指定文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区(已add但未commit文件)和最后一次commit(HEAD)之间的所有不相同文件的增删改</span></span><br><span class="line">git diff --cached</span><br><span class="line">git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区和工作区最后一次提交的差别</span></span><br><span class="line">git diff HEAD</span><br><span class="line">git diff HEAD &lt;filename&gt;  <span class="comment"># 指定文件</span></span><br><span class="line">git diff &lt;哈希值&gt; &lt;filename&gt;<span class="comment"># 指定某一次提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最近一次提交的版本与往过去时间线前数X个的版本之间的所有同git diff HEAD中定义文件之间的增删改</span></span><br><span class="line">git diff HEAD~X</span><br><span class="line">git diff HEAD^^^…(后面有X个^符号，X为正整数)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个分支上最后 commit 的内容的差别</span></span><br><span class="line">git diff &lt;branch-Name1&gt; &lt;branch-Name2&gt; </span><br><span class="line">git diff &lt;origin/branch-Name1&gt; &lt;branch-Name2&gt; <span class="comment">#比较远程分支与本地分支</span></span><br><span class="line">git diff &lt;branch-Name1&gt; &lt;branch-Name2&gt; --<span class="built_in">stat</span><span class="comment"># 显示简略内容</span></span><br></pre></td></tr></table></figure><p><code>git tag</code>用来建立标签</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建本地tag</span></span><br><span class="line">git tag &lt;tagName&gt;</span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">&quot;XXX...&quot;</span>  <span class="comment"># 指定标签信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">git push origin &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地有多条tag，一次推送全部</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换标签 切换后，分支置空</span></span><br><span class="line">git checkout &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地某个 tag 的详细信息</span></span><br><span class="line">git show &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地所有 tag</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程所有 tag</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地 tag 的删除</span></span><br><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程 tag 的删除</span></span><br><span class="line">git push origin --delete tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><h1 id="七、Git基本理论-核心"><a href="#七、Git基本理论-核心" class="headerlink" title="七、Git基本理论(核心)"></a>七、Git基本理论(核心)</h1><h2 id="7-1工作区"><a href="#7-1工作区" class="headerlink" title="7.1工作区"></a>7.1工作区</h2><p>Git本地有三个工作区域：<strong>工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)</strong> 。如果在加上远程的 <strong>git仓库(Remote Directory)</strong> 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A037.png" alt="image-20220118175525822"></p><ul><li><strong>Workspace：</strong>工作区，就是你平时存放项目代码的地方</li><li><strong>Index &#x2F; Stage：</strong>暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息(<strong>.git</strong> 隐藏文件)</li><li><strong>Repository：</strong>仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li><strong>Remote：</strong>远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>暂存区、仓库区不需要管理，通过命令操作即可</p><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A038.png" alt="image-20220117193350581"></p><ul><li><strong>Directory：</strong>使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间</li><li><strong>WorkSpace：</strong>需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间</li><li><strong>.git：</strong>存放Git管理信息的目录，初始化仓库的时候自动创建</li><li><strong>Index&#x2F;Stage：</strong>暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区</li><li><strong>Local Repo：</strong>本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）</li><li><strong>Stash：</strong>隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态</li></ul><blockquote><p>Q：为什么中间多一个暂存区而不是直接提交到本地仓库？</p><p>A：使用git时候大多时候是<code>git add .</code>一次性添加所有文件，我们习惯性新做一个功能就提交一次。但是如果做了许多个功能，我们就可以分别添加暂存区，分开提交。这样可以保证提交历史的清晰。否则，想要回滚历史的时候，根本分不清每个版本包含了哪些功能，修复了哪些bug。而暂存区的作用就是为了，可以选择提交，比如你在开发B功能的时候，发现A功能还存在Bug，这时候就需要先修复A中的Bug，然后先提交修复的A中的Bug,然后再提交B功能开发的文件。这样就可以提高提交版本历史记录的清晰，方便回滚。而提交是原子性操作，文件的选择就交于暂存区去做，每一次提交都是一个完整的功能开发，保证commit的干净，降低commit的粒度</p></blockquote><h2 id="7-2工作流程"><a href="#7-2工作流程" class="headerlink" title="7.2工作流程"></a>7.2工作流程</h2><h3>7.2.1git的工作流程：</h3><p>１、在工作目录中添加、修改文件；(eg：新建  小张.java)</p><p>２、将需要进行版本管理的文件放入暂存区域；(<code>git add 小张.java</code>提交JAVA程序或者<code>git add .</code>提交文件目录下所有程序)</p><p>３、将暂存区域的文件提交到本地仓库。(<code>git commit</code>暂存区文件提交到git仓库)</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  新建小张.java--&gt;|git add 小张.java|暂存区;</span><br><span class="line">  暂存区--&gt;|git commit|本地仓库;</span><br><span class="line">  本地仓库--&gt;|git push|远程;</span><br></pre></td></tr></table></figure><h1 id="八、Git项目搭建"><a href="#八、Git项目搭建" class="headerlink" title="八、Git项目搭建"></a>八、Git项目搭建</h1><p><strong>7.2简单了解了工作流程，这里实践一下</strong></p><h2 id="8-1创建工作目录与常用指令"><a href="#8-1创建工作目录与常用指令" class="headerlink" title="8.1创建工作目录与常用指令"></a>8.1创建工作目录与常用指令</h2><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A036.png" alt="image-20220117200505318"></p><h2 id="8-2本地仓库搭建"><a href="#8-2本地仓库搭建" class="headerlink" title="8.2本地仓库搭建"></a>8.2本地仓库搭建</h2><p><strong>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库</strong></p><h3>8.2.1创建全新的仓库</h3><p>1.创建全新的仓库，初始化空文件夹。在当前文件夹Git Bash Here。出现隐藏文件夹<code>.git</code> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A039.png" alt="image-20220117201237231"></p><p>2.执行后可以看到，仅仅在项目目录多出一个.git目录，关于版本等所有信息在这个目录中</p><h3>8.2.2克隆远程仓库</h3><p>1.另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>2.去gitee或者github上克隆一个测试！下面这是是我的仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://gitee.com/gc-zhang/Git-Study.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/GC-ZF/Git-Study.git</span><br></pre></td></tr></table></figure><h2 id="8-3-Git-本地仓库操作"><a href="#8-3-Git-本地仓库操作" class="headerlink" title="8.3 Git 本地仓库操作"></a>8.3 Git 本地仓库操作</h2><p>7.1-8.2学习了git的工作原理，通过工作原理来建立一个本地仓库(远程仓库[十三、git远程命令实践](# 十三、git远程命令实践 )介绍)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  新建hello.txt--&gt;|git add hello.txt|暂存区;</span><br><span class="line">  暂存区--&gt;|git commit|本地仓库;</span><br><span class="line">  本地仓库--&gt;|git push|远程;</span><br></pre></td></tr></table></figure><p>首先在本地新建一个文件夹，右击<code>Git Brash HERE</code>。依次输入<code>git init</code>,<code>git status</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A040.png" alt="image-20220118193537540"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A041.png" alt="image-20220118193543041"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加暂存区 文件由红变绿</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A042.png" alt="image-20220118193547265"></p><p>注意这里的<code>commit</code>只上传暂存区的文件，也就是说如果没有<code>add .</code>而是<code>add xxx文件</code>，提交之后只有xxx被提交。</p><p>commit之后，<code>1 file changed</code>表示一个文件变更，这里的<code>insertions</code>,<code>deletions</code>代表代码的增加减少</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span>  <span class="comment"># xxx即下图中，Github仓库中显示的内容</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A043.png" alt="image-20220118194045076"></p><h3>扩展解释，不需要完全理解，多实践即可</h3><p><strong>文件的4种操作</strong></p><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上</p><ul><li><strong>Untracked:</strong> 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add</code>状态变为Staged.</li><li><strong>Unmodify:</strong> 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用<code>git rm</code>移出版本库, 则成为Untracked文件</li><li><strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add</code>可进入暂存staged状态, 使用<code>git checkout </code>则丢弃修改过, 返回到unmodify状态, 这个<code>git checkout</code>即从库中取出文件, 覆盖当前修改 !</li><li><strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为Modified</li></ul><p><strong>忽略文件</strong></p><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在项目主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><p>IDEA工程项目开发中规则如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.class</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"><span class="comment"># idea</span></span><br><span class="line">.idea/</span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line">*velocity.log*</span><br><span class="line"></span><br><span class="line"><span class="comment">### STS ###</span></span><br><span class="line">.apt_generated</span><br><span class="line">.factorypath</span><br><span class="line">.springBeans</span><br><span class="line"></span><br><span class="line"><span class="comment">### IntelliJ IDEA ###</span></span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">.idea</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings/</span><br><span class="line">bin/</span><br><span class="line"></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">#rebel</span></span><br><span class="line">*rebel.xml*</span><br></pre></td></tr></table></figure><h1 id="九、Git分支"><a href="#九、Git分支" class="headerlink" title="九、Git分支"></a>九、Git分支</h1><h2 id="9-1什么是分支？"><a href="#9-1什么是分支？" class="headerlink" title="9.1什么是分支？"></a>9.1什么是分支？</h2><p>在Gitee仓库界面有一个分支按钮</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A044.png" alt="image-20220120153636803"></p><p>分支就好比把<code>D:\项目A\master</code>复制到了<code>D:\项目A\dev</code>，在“dev”中继续工作</p><p>新的分支会继承master分支的提交记录，但是新分支里的提交记录不会被master所记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;A;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    B--&gt;C;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    1.0--&gt;A;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    B--&gt;C;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    D--&gt;E;</span><br></pre></td></tr></table></figure><p>eg：新建1.0文本提交一次，新建2.0文本提交一次</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A045.png" alt="image-20220120202116414"></p><p>新建一个分支<code>新分支</code>，在<code>新分支</code>新建一个3.0文本提交一次</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A046.png" alt="image-20220120202130656"></p><p>查看日志，有三次提交记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A047.png" alt="image-20220120202208789"></p><p>切换到master分支，只有两条记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A048.png" alt="image-20220120202221909"></p><h2 id="9-2-分支有什么用？"><a href="#9-2-分支有什么用？" class="headerlink" title="9.2 分支有什么用？"></a>9.2 分支有什么用？</h2><p><strong>1.团队开发</strong></p><p><strong>&#x3D;&#x3D;master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。&#x3D;&#x3D;</strong></p><p>开发不同的功能也可以为每一个 功能&#x2F;小组 分一个新分支。合作完成后，将每一个分支合并到master</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A049.png" alt="image-20220120153636803"></p><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！[会在13.6 git merge讲解决冲突，这里理解什么是分支？](# 13.6 git merge 合并分支的变更)</p><p><strong>2.个人开发</strong></p><p>利用分支，可以将稳定的版本保留在<code>master</code>分支中，开发时新建一个分支<code>dev</code>，每一次改动完之后，将新分支<code>dev</code>合并到<code>master</code>中。</p><p>另一种是在开发功能时，<code>dev</code>分支出现了bug，可以从<code>dev</code>分支再切换一个新的分支<code>fixbug</code>，处理完bug将<code>fixbug</code>合并到<code>dev</code></p><p>eg：1.<code>master</code>有一个功能A</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;功能A;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A050.png" alt="image-20220122110533096"></p><p>2.现在开发新的功能，从<code>master</code>切一个<code>dev</code>分支，<code>dev</code>分支会继承<code>master</code>分支，开发完后<code>dev</code>分支如图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    dev--&gt;功能A;</span><br><span class="line">    功能A--&gt;功能B;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A051.png" alt="image-20220122110810208"></p><p>3.假设<code>master</code>中功能A出现<code>bug</code>，从<code>master</code>分支切一个<code>fixbug</code>分支，<code>fixbug</code>继承<code>master</code>，修复完后，<code>fixbug</code>分支如图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    fixbug--&gt;功能A;</span><br><span class="line">    功能A--&gt;修复功能A;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A052.png" alt="image-20220122111615522"></p><p>4.现在切回<code>master</code>，<code>merge</code>合并分支<code>fixbug</code>(合并后<code>git branch -d fixbug</code>删除多余的分支，忘截图了)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;功能A;</span><br><span class="line">    功能A--&gt;修复功能A</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A053.png" alt="image-20220122183105652"></p><p>5.之后<code>merge</code>分支<code>dev</code>到<code>master</code>分支，<code>master</code>分支如图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;功能A;</span><br><span class="line">    功能A--&gt;修复功能A;</span><br><span class="line">    修复功能A--&gt;dev开发功能B;</span><br><span class="line">    dev开发功能B--&gt;修复merge.dev冲突;</span><br><span class="line">    修复功能A--&gt;修复merge.dev冲突;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A054.png" alt="image-20220122183251642"></p><blockquote><p>Q：为什么最后分支图会分叉？</p><p>A：第2、3步骤中，新分支都是继承<code>master</code>分支”功能A”这条记录。<code>dev</code>分支的记录前进到”dev开发新功能”，而<code>fixbug</code>分支只是在”功能A”这条记录的基础上修改，它会覆盖上一条记录。<code>fixbug</code>分支合并时没有冲突但合并<code>dev</code>分支时本应该链接”功能A”之后，但是”功能A”之后现在链接”修复功能A”，所以会有分叉</p></blockquote><p>这种分叉可以暂且叫做<strong>“三方合并”</strong>，将“功能A”，“修复功能A”，“dev开发功能B”，三者合并</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;功能A;</span><br><span class="line">    功能A--&gt;修复功能A;</span><br><span class="line">    功能A--&gt;dev开发功能B;</span><br></pre></td></tr></table></figure><p>日志可以完整到看到这个开发的过程，但是过多使用<code>merge</code>，会产生很多很多的分叉，分叉之间又相互联系。四五个人不明显，但当十多个人共用一个仓库，整个开发流程就会很乱，进阶git可以学习一下后面讲的<code>rebase</code>，可以将整个开发流程整合为一条线</p><p> eg:merge太多</p><p> <img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A055.png" alt="image-20220122114555692"></p><h1 id="十、使用Gitee链接远程仓库-免密登录"><a href="#十、使用Gitee链接远程仓库-免密登录" class="headerlink" title="十、使用Gitee链接远程仓库(免密登录)"></a>十、使用Gitee链接远程仓库(免密登录)</h1><p>如果不设置公钥，每一次<code>push</code>远程都需要账号密码。github是有墙的，比较慢，在国内的话，我们一般使用gitee，公司有时候会搭建自己的gitlab服务器</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A022.png" alt="登录"></p><h2 id="10-1链接仓库"><a href="#10-1链接仓库" class="headerlink" title="10.1链接仓库"></a>10.1链接仓库</h2><p>1.注册登录<a href="https://gitee.com/">码云</a>，完善个人信息</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A056.png" alt="image-20220117213447598"></p><p>2.设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\用户名\.ssh 目录 右击Git Bash Here</span></span><br><span class="line"><span class="comment"># 使用rsa加密生成公钥</span></span><br><span class="line">ssh-keygen -t rsa </span><br></pre></td></tr></table></figure><p>一直按回车确认即可，在该文件夹生成两个文件</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A057.png" alt="image-20220120223857904"></p><p>3.将公钥信息public key添加到码云账户即可</p><p>通过查看<code>cat ~/.ssh/id_rsa.pub</code> 文件内容，获取到你的 public key或者直接用记事本打开<code>id_ed2519.pub</code>,复制内容添加到公钥<br>也可以打开<code>C:\Users\用户名\.ssh\id_rsa.pub</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A058.png" alt="image-20220117215011109"></p><p>这里默认本机用户为ssh key的标识符，可以自己修改。标题任意命名。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A059.png" alt="image-20220117221138255"></p><p>4.使用码云创建一个自己的仓库</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A060.png" alt="image-20220117221644291"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A061.png" alt="image-20220117222111433"></p><p>最后三个对勾根据情况，自己选择</p><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载。</p><h2 id="10-2使用指令上传远程仓库"><a href="#10-2使用指令上传远程仓库" class="headerlink" title="10.2使用指令上传远程仓库"></a>10.2使用指令上传远程仓库</h2><p>建好以后利用<code>git clone [url]</code>命令或者直接下载到本地(下载的文件可以直接复制到本地任意位置，因为.git中保存了当前仓库的信息，可以默认连接远程仓库,eg：克隆在D:\C++，但是我想做JAVA程序，可以把仓库内所有文件复制到D:\JAVA的项目路径下，之后再进行下面步骤)。&#x3D;&#x3D;注意配置好公钥，选择SSH，本地上传远程就不用输入账号密码了&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A062.png" alt="image-20220118212109093"></p><p>第三、四个指令可以键鼠完成。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A063.png" alt="image-20220118204533570"></p><p>可以看到仓库中增了demo.txt</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A064.png" alt="image-20220118204203340"></p><h1 id="十一、利用GitHub连接远程仓库-免密登录"><a href="#十一、利用GitHub连接远程仓库-免密登录" class="headerlink" title="十一、利用GitHub连接远程仓库(免密登录)"></a>十一、利用GitHub连接远程仓库(免密登录)</h1><p>上面学习了gitee，学习github就简单很多了，这里就虽然是英文，但是页面布局基本一致。先删掉上面<code>C:\Users\用户名\.ssh</code>内所有配置</p><p>1.自己新建一个账号 <a href="github.com">GitHUb</a>。Github在国内被ban了，要自己学会魔法</p><p>2.新建一个仓库<code>New repository</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A065.png" alt="image-20220120205649011"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A066.png" alt="image-20220120210734803"></p><p>3.生成公钥和私钥：输入以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\用户名\.ssh 目录 右击Git Bash Here</span></span><br><span class="line"><span class="comment"># 使用rsa加密生成公钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;用户名&quot;</span> -f <span class="string">&quot;w&quot;</span></span><br></pre></td></tr></table></figure><p>输完命令连续按三次回车</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A067.png" alt="image-20220120223747937"></p><p>4.生成的<code>id_rsa_github.pub</code>以文本打开，复制文本内容。</p><p>5.将公钥添加到github中</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A068.png" alt="image-20220120222555893"></p><p>6.克隆仓库时，自己的仓库用SSH链接。克隆别人的仓库用HTTPS。因为自己用HTTPS可能会请求超时。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A069.png" alt="image-20220121151536420"></p><h1 id="十二、同时配置Gitee、Github-公钥"><a href="#十二、同时配置Gitee、Github-公钥" class="headerlink" title="十二、同时配置Gitee、Github 公钥"></a>十二、同时配置Gitee、Github 公钥</h1><p>这种方法使用同时配置多个gitee账号或者同时配置gitee、github、gitlab</p><p><strong>问题</strong><br>本地已配置了gitee公钥，如何配置GitHub支持ssh拉取源码？</p><p><strong>思路</strong><br>ssh 方式链接到 Github／Gitee，需要唯一的公钥，如果想同一台电脑绑定两个Github&#x2F;Gitee 帐号，需要两个条件:<br>1.能够生成两对 私钥&#x2F;公钥<br>2.push 时，可以区分两个账户，推送到相应的仓库</p><p><strong>1.创建 ssh key</strong></p><p>进入 <code>C:\Users\用户名\.ssh</code> 目录 右击<code>Git Bash Here</code>。输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;密钥名称 随便命名&quot;</span> -f <span class="string">&quot;文件名字&quot;</span></span><br></pre></td></tr></table></figure><p>例如(分两次输入)，连按三次回车</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GC_Zhang&quot;</span> -f <span class="string">&quot;id_rsa_gitee&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GC-ZF&quot;</span> -f <span class="string">&quot;id_rsa_github&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A070.png" alt="image-20220121104331257"></p><p>完成后，会在 <code>C:\Users\用户名\.ssh</code> 文件夹下生成github和码云的私钥和公钥文件</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A071.png" alt="image-20220121104605162"></p><p><strong>2.把公钥文件中的 key 复制到 github 和gitee的ssh公钥中</strong><br>打开 <code>id_rsa_gitee.pub</code>，把相关 ssh key复制到 <a href="https://gitee.com/">gitee</a> 的 <code>设置&gt;ssh公钥</code> 中,标题和公钥不用保持一致</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A072.png" alt="image-20220121162155895"></p><p>打开 <code>id_rsa_github.pub</code>,把相关 ssh key复制到 <a href="http://github.com/">github</a> 的 <code>Settings&gt;SSH and GPG keys</code> 中</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A073.png" alt="image-20220121104841022"></p><p><strong>3.创建config 文件解决ssh 冲突</strong></p><p>在 .ssh 的命令窗口下执行 <code>vi config</code> 在 config 文件中添加以下代码,完成后按<code>Esc</code>输入<code> :wq</code> 保存退出<br>也可以直接在文件夹中新建文本，命名config并删掉后缀<code>.txt</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="comment"># xxx(#号是注释，给这段加一个备注，不想加也可以)</span></span><br><span class="line">Host 任意主机别名</span><br><span class="line">    HostName 域名地址</span><br><span class="line">    IdentityFile ~/.ssh/自己的ssh key的文件路径</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User 注册gitee/github/gitlab的用户名</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># Host : 每个Host要取一个别名</span></span><br><span class="line"><span class="comment"># HostName : 要访问的域名地址</span></span><br><span class="line"><span class="comment"># IdentityFile : 指明上面User对应的identityFile路径</span></span><br></pre></td></tr></table></figure><p>eg：这里<code>Host</code>可以命名其它汉字、名字，我只是为了第4步方便</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitee </span></span><br><span class="line">    Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User GC-Zhang</span><br><span class="line"></span><br><span class="line"><span class="comment"># Github      </span></span><br><span class="line">    Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User GC-ZF</span><br></pre></td></tr></table></figure><p><strong>4.测试SSH key是否生效</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@自己配置的Host别名<span class="comment"># 必须区别大写T</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A074.png" alt="image-20220121154349219"></p><p>出现<code>Hi GC_Zhang! You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.</code>就代表配置成功</p><p><strong>5.设置单个仓库的配置</strong></p><p>如果要区分Github和Gitee的用户提交信息 ，可以把常用的一个设置为全局变量。单独为另一个账号的仓库设置用户信息，这样就不用频繁地做这步。git 的配置分为三级别，<code>System</code> —&gt; <code>Global</code> —&gt;<code>Local</code>。<code>System</code> 即系统级别，<code>Global</code> 为配置的全局，<code>Local</code> 为仓库级别，优先级是 <code>Local</code> &gt; <code>Global</code> &gt; <code>System</code></p><p>eg：常用Github，偶尔用Gitee，那么Github的用户信息不用做修改。</p><p>克隆Gitee的仓库（每一次克隆新仓库都要重新设置），进入项目文件夹单独设置。查看一下现在的全局配置是什么？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A075.png" alt="image-20220121102504826"></p><p>单独为仓库配置一个用户名(后来我发现不加local后缀也是默认本地)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单独设置仓库 用户名/邮箱 如果没有空格可以不用引号</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;xxx@x.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A076.png" alt="image-20220121171638549"></p><p>查看本地仓库配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A077.png" alt="image-20220121170526316"></p><p>提交一次记录，现在日志里的信息就是新设置的用户信息，但仅对当前仓库有效</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A078.png" alt="image-20220121170634417"></p><p><strong>多台电脑使用统一的 ssh 文件</strong></p><p>.ssh 文件夹压缩保存，在其他电脑上解压放入对应的目录下<br>这里需要注意id_rsa 和id_rsa.pub的权限，id_rsa的权限是600，id_rsa.pub的权限是644。</p><p>如果上述方法不能通过测试，则需要在目标设备先创建好同名的 ssh ，然后用之前的 私钥和公钥覆盖掉目标设备上的文件</p><h4>参考</h4><p>这部分参考了这两个，但是稍微做了改进，因为他们是删除全局配置，之后重新配置。我认为不需要对原来的配置删除，将常用的作为全局配置，需要使用另一个不常用的账号的时候再单独配置一个本地配置</p><p><a href="https://blog.csdn.net/MACHENIC/article/details/116212321?ops_request_misc=%7B%22request_id%22:%22164273642816780255227080%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164273642816780255227080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-116212321.pc_search_insert_es_download&utm_term=%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AEgittee&spm=1018.2226.3001.4187">从永远到永远-Windows10配置多个git账号（以两个gitee账号为例）_MACHENIC的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq3399013670/article/details/103489867?ops_request_misc=%7B%22request_id%22:%22164273642816780255227080%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164273642816780255227080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-103489867.pc_search_insert_es_download&utm_term=%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AEgittee&spm=1018.2226.3001.4187">亲测本地电脑同时配置gitee和github账号,实现ssh免密拉取和提交代码_初学者乐园的博客-CSDN博客</a></p><p>第四步可能会遇到一些报错，可以参考这篇文章。因为我的电脑没报错但朋友的有报错，所以没演示</p><p><a href="https://blog.csdn.net/qq_32786873/article/details/80947195?ops_request_misc=%7B%22request_id%22:%22164274798116780357219552%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164274798116780357219552&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-80947195.pc_search_insert_es_download&utm_term=git@github.com:+Permission+denied+(publickey).&spm=1018.2226.3001.4187">git@github.com: Permission denied (publickey)_勿忘初心的博客-CSDN博客_git@github.com</a></p><h1 id="十三、Git远程命令实践"><a href="#十三、Git远程命令实践" class="headerlink" title="十三、Git远程命令实践"></a>十三、Git远程命令实践</h1><blockquote><p>实际操作过程中，可以用编译器的集成插件去实现，但插件按钮也是以<strong>指令</strong>命名的，所以先学会指令，插件很容易上手。这里只介绍git指令如何去操作</p></blockquote><h2 id="13-1-git-reset-移除暂存区"><a href="#13-1-git-reset-移除暂存区" class="headerlink" title="13.1 git reset 移除暂存区"></a>13.1 git reset 移除暂存区</h2><p>当我们将文件加入暂存区以后，想要修改一下再提交，可以使用<code>git reset</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A079.png" alt="image-20220120200653705"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A080.png" alt="image-20220120200657979"></p><p>执行<code>git add</code>后执行<code>git status</code>，窗口也会提示移除暂存区的指令<code>git restore --staged &lt;filename&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0142.png" alt="image-20220123184542563"></p><h2 id="13-2-git-log-git-reflog-git-reset-版本回退"><a href="#13-2-git-log-git-reflog-git-reset-版本回退" class="headerlink" title="13.2 git log+git reflog+git reset 版本回退"></a>13.2 git log+git reflog+git reset 版本回退</h2><p>首先提交了两次文件。第一次新建1.0.txt，<code>git commit -m &quot;A&quot;</code>，第二次把1.0删除，提交2.0.txt，<code>git commit -m &quot;B&quot;</code>,作为例子</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A085.png" alt="image-20220119175732527"></p><p>回退完成后，当前最新的记录”2.0.txt”就消失了，如果想再回到2.0,利用<code>relog</code>查看历史提交记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A086.png" alt="image-20220119180006151"></p><p>这里可以理解为HEAD记录了一系列指针，将每一次的变动链在一起(并不是每一次都保存所有内容而是保存变动)。<code>git reset</code>操作就是在移动指针的位置。回退之后，最新的指针就会被删除，需要用<code>git reflog</code>去找所有的记录。</p><h2 id="13-3-git-push上传新的分支"><a href="#13-3-git-push上传新的分支" class="headerlink" title="13.3 git push上传新的分支"></a>13.3 git push上传新的分支</h2><p>正常情况下直接<code>git push</code>就可以提交到远程仓库。但是在本地新建了一个分支<code>4.0</code>,在<code>git push</code>的时候报错，如下</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A081.png" alt="image-20220119110611494"></p><p>这个错误就是 表示本地分支与远程分支之间没有连接起来，所以在<code>git push</code>的时候报错</p><p><strong>解决方法 1</strong><br>只需要在输入 <code>git push -u origin dev分支名)</code>。这样就可以成功push</p><p><strong>解决方法 2</strong></p><p>按照<code>git</code> 的提示，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure><p>将远程 <code>dev</code> 分支和本地 <code>dev</code> 分支相关联。之后再执行 <code>git push</code> 即可。一般新建的分支在<code>push</code>的时候都需要执行这个命令和远端相关联</p><p>另一种情况在[13.5 git pull 拉取远程仓库](# 13.5 git pull 拉取远程仓库)。</p><h2 id="13-4-git-fetch-拉取远程仓库"><a href="#13-4-git-fetch-拉取远程仓库" class="headerlink" title="13.4 git fetch 拉取远程仓库"></a>13.4 git fetch 拉取远程仓库</h2><p>新建两个文件夹，分别<code>clone</code>我的一个仓库。模拟两台机器</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A097.png" alt="image-20220119202333836"></p><p>新建一个分支，当前分支仅存在于本地。而远端没有这个分支，执行<code>git  push</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A098.png" alt="image-20220119203733093"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A099.png" alt="image-20220119203919926"></p><blockquote><p>总结：如果本地分支是新建的，也就是说没有设置上流分支，则需要使用<code>git push --set-upstream origin &lt;name&gt;</code>，先设置上流分支。之后的所有提交直接使用<code>git push</code>即可</p></blockquote><p>现在小王想要使用<code>小张</code>这个分支。使用<code>git fetch</code>查看新分支，仅是查看信息，并没有下载本地</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0100.png" alt="image-20220119205117266"></p><p>利用<code>git branch</code>查看当前本地的分支信息</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0101.png" alt="image-20220119205205479"></p><p>通过<code>checkout</code>切换到新分支，现在本地仓库的文件就切换成了新分支。&#x3D;&#x3D;注意&#x3D;&#x3D;必须先<code>git fetch</code>，否则<code>checkout</code>无效</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0102.png" alt="image-20220119205321480"></p><blockquote><p>这里新分支并不需要重新设置上流分支，直接<code>push</code>即可。因为从远程仓库切的分支，git知道它的来源</p><p>Q：为什么需要fetch机制</p><p>A：每次checkout的时候，Git直接去远程仓库检测是否有该分支。理论上可以，但是实际工作中，使用git是在本地切来切去。只有在团队协作时才需要和远程仓库交互。所以每次checkout都检测远程仓库，浪费网络资源</p></blockquote><h2 id="13-5-git-pull-拉取远程仓库"><a href="#13-5-git-pull-拉取远程仓库" class="headerlink" title="13.5 git pull 拉取远程仓库"></a>13.5 git pull 拉取远程仓库</h2><p>如果此时小张修改了分支内的内容，再次push到了远程仓库。小王如何将新的变更更新到本地？可以<code>fetch+merge</code>，也可以<code>pull</code>。下载代码并快速合并，如果有冲突，手动合并并提交</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取并合并当前分支注意：只是当前分支！</span></span><br><span class="line">git pull </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先拉取指定分支，后合并</span></span><br><span class="line">git fetch origin master <span class="comment"># 从远程主机的master分支拉取最新内容 </span></span><br><span class="line">git merge FETCH_HEAD    <span class="comment"># 将拉取下来的最新内容合并到当前所在的分支中</span></span><br></pre></td></tr></table></figure><p>再或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先拉取，后合并</span></span><br><span class="line">git fetch<span class="comment"># 从远程主机拉取所有分支的最新内容 </span></span><br><span class="line">git merge &lt;分支名&gt;   <span class="comment"># 将拉取下来的最新内容合并到当前所在的分支中</span></span><br></pre></td></tr></table></figure><p>另一种情况是如果小张push到远程仓库后，小王把小张的程序修改了，小王是对旧版本做了更改，也push远程仓库就会报错。正常情况下先<code>git pull</code>到本地查看文件改动，如果有冲突，手动改动后再提交(先输入的命令后查看的文本，这里我上下截图顺序错了)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0103.png" alt="image-20220121181717995"></p><p>以下是后来对文章的改动，因为单独在<code>git merge </code>发过解决冲突，所以没有截图。避免有小伙伴不会解决冲突，单独解释一下</p><blockquote><p>&lt;&lt;&lt;HEAD<br>合并前的内容<br>&#x3D; &#x3D; &#x3D; &#x3D; &#x3D; &#x3D; &#x3D; &#x3D;<br>合并后，远程的内容<br>‘&gt;&gt;&gt;&gt;&gt;&gt;&gt; commitID</p></blockquote><p>打开文本将文本修改为自己想要的样子</p><blockquote><p>自己想要的样子xxxxxxx</p></blockquote><p>然后执行<code>git add .</code>、<code>git commit -m</code>、<code>git push</code></p><p><strong>总结</strong></p><p>所以建议使用<code>fetch+merge</code>，可以先<code>git fetch</code>,查看远程是否有新的更新？如果没有更新，不返回仍何值</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0140.png" alt="image-20220123181152099"></p><p>如果有更新再用<code>git merge origin &lt;branch-name&gt;</code>将本地仓库与远程仓库合并</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0141.png" alt="image-20220123181610501"></p><p>解决冲突后再进行<code>git push</code></p><p><a href="https://blog.csdn.net/weixin_41975655/article/details/82887273?ops_request_misc=%7B%22request_id%22:%22164267091316780265412130%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164267091316780265412130&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-82887273.pc_search_insert_es_download&utm_term=git+fetch%E5%92%8Cgit+pull%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">详解git pull和git fetch的区别：_马恩光的博客-CSDN博客_git pull和fetch的区别</a></p><p><a href="https://blog.csdn.net/qq_36113598/article/details/78906882?ops_request_misc=%7B%22request_id%22:%22164266728216780366544333%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164266728216780366544333&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-78906882.pc_search_insert_es_download&utm_term=git+fetch&spm=1018.2226.3001.4187">Git fetch &amp; pull 详解_MuffinFish的博客-CSDN博客_git pull</a></p><p><a href="https://blog.csdn.net/azureternite/article/details/76154807?ops_request_misc=%7B%22request_id%22:%22164474138816780271952766%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164474138816780271952766&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-76154807.pc_search_insert_ulrmf&utm_term=git+fetch%E5%92%8Cgit+rebase&spm=1018.2226.3001.4187">使用git fetch和git rebase处理多人开发同一分支的问题_azureternite的专栏-CSDN博客</a></p><h2 id="13-6-下载云端分支"><a href="#13-6-下载云端分支" class="headerlink" title="13.6 下载云端分支"></a>13.6 下载云端分支</h2><p>默认下载<code>master</code>主分支</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A082.png" alt="image-20220119114510606"></p><p>通过<code>git branch -a</code>,列出所有分支，之后<code>git checkout branchname</code>，可以将其它分支克隆到本地</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A083.png" alt="image-20220119114900390"></p><p>也可以通过这段，将所有分支一次性下载到本地，没有网络连接时仍可以使用<code>checkout</code>查看其它分支(仓库文件夹只显示一个分支的文件，实际上已经将全部分支下载到本地<code>仓库名字\.git\logs\refs\heads</code>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a | grep origin | grep -v HEAD | <span class="keyword">while</span> <span class="built_in">read</span> rb;<span class="keyword">do</span> lb=$(<span class="built_in">echo</span> <span class="variable">$&#123;rb&#125;</span> | <span class="built_in">cut</span> -d/ -f 3-);git checkout -b <span class="variable">$lb</span> <span class="variable">$rb</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A084.png" alt="image-20220119115043845"></p><h2 id="13-7-git-merge-合并分支的变更"><a href="#13-7-git-merge-合并分支的变更" class="headerlink" title="13.7 git merge 合并分支的变更"></a>13.7 git merge 合并分支的变更</h2><p>这里合并的是分支的变更而不是分支的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>通过实际给大家模拟一下</p><p>eg：主管开发了一个项目,功能有A。员工小张、小王分别新建一个分支。小张开发了新功能B，小王开发了新功能C。之后主管将两条分支合并到master分支中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;A;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">   zhang--&gt;A;</span><br><span class="line">    A--&gt;B;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    wang--&gt;A;</span><br><span class="line">    A--&gt;C;</span><br></pre></td></tr></table></figure><p>合并</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    master--&gt;A;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    B--&gt;C;</span><br></pre></td></tr></table></figure><p>上代码模拟</p><p>每一次<code>add .</code>，本地仓库都要做变化，随便加、改一个文件内容就行。这里我修改A.txt的内容</p><ol><li>在主分支创建A.txt，内容为”主管”。之后提交到本地仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主管</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A087.png" alt="image-20220119194937481"><br>2. 创建分支<code>git branch zhang</code>,<code>git branch wang</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A088.png" alt="image-20220119195110676"></p><ol start="2"><li><code>git checkout zhang</code>切换分支zhang。修改A.txt的内容，并提交本地仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主管</span><br><span class="line"></span><br><span class="line">小张</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A089.png" alt="image-20220119195219199"></p><ol start="3"><li><code>git checkout wang</code>切换分支wang。修改A.txt的内容，并提交本地仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主管</span><br><span class="line"></span><br><span class="line">小王提交</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A090.png" alt="image-20220119195254413"></p><ol start="4"><li><code>git checkout master</code>切换分支master。合并zhang分支到master</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A091.png" alt="image-20220119195407408"></p><p>现在我们的文本变成了这样</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A092.png" alt="image-20220119195442492"></p><ol start="5"><li>合并wang分支到master</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A093.png" alt="image-20220119195547549"></p><p>如图，这里显示<strong>“自动合并失败；修复冲突，然后提交结果”</strong>。因为现在的A.txt是master和zhang两个分支合并的结果</p><p>打开A.txt</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A094.png" alt="image-20220119195848706"></p><p>手动修改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主管</span><br><span class="line"></span><br><span class="line">小张</span><br><span class="line"></span><br><span class="line">小王提交</span><br></pre></td></tr></table></figure><p>然后添加到本地仓库即可</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A095.png" alt="image-20220119195942685"></p><p>查看日志，这里记录了所有的提交记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A096.png" alt="image-20220119200237831"></p><p>使用<code>git log -p</code>可以查看日志，概览如图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">   主管提交--&gt;小张提交;</span><br><span class="line">    小张提交--&gt;小王提交;</span><br><span class="line">    小王提交--&gt;保留双方变更;</span><br><span class="line">    小张提交--&gt;保留双方变更;</span><br></pre></td></tr></table></figure><blockquote><p>Q：为什么最后分支图会分叉？</p><p>A：新分支都是继承<code>master</code>分支”主管提交”这条记录。<code>zhang</code>分支的记录前进到”小张提交”，而<code>wang</code>分支只是在”主管提交”这条记录的基础上修改，所以也是在”主管提交”之后。<code>zhang</code>分支合并时没有冲突但合并<code>wang</code>分支时本应该链接”主管提交”之后，但是”主管提交”之后现在链接”小张提交”，所以会有分叉</p></blockquote><p>这种分叉可以暂且叫做 <strong>“三方合并”</strong> ，将“主管提交”，“小张提交”，“小王提交”，三者合并</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    主管提交--&gt;小张提交;</span><br><span class="line">     主管提交--&gt;小王提交</span><br></pre></td></tr></table></figure><p>日志可以完整到看到这个开发的过程，但是过多使用<code>merge</code>，会产生很多很多的分叉，分叉之间又相互联系。四五个人不明显，但当十多个人共用一个仓库，整个开发流程就会很乱，进阶git可以学习一下后面讲的<code>rebase</code>，可以将整个开发流程整合为一条线</p><p> eg:merge太多</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A055.png" alt="image-20220122114555692"></p><h2 id="13-8-git-rebase-变基"><a href="#13-8-git-rebase-变基" class="headerlink" title="13.8 git rebase 变基"></a>13.8 git rebase 变基</h2><blockquote><p>前面学习了<code>git merge</code>，作用是为了合并分支，了解到<code>git merge</code>会使日志变得混乱。<code>git rebase</code>也是合并分支的作用，但所谓”变基”，就是改变他们的”基”，将日志整理为一条直线</p></blockquote><p><code>git rebase</code>,<code>git cherry-pick</code>,<code>git stash</code>没前面的重要，初学掌握前七点常用的</p><p>假定有一个master分支，在这个分支上有两次commit。之后切出了分支bc，此时bc和master的commit完全一致。之后bc有了第三次、第四次commit，master也有了一次提交。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0104.png" alt="image-20220119211600630"></p><p>为了区分commit按时间顺序编号。现在bc以master的前两次commit为基础发展的。如果想要以最新的master版本为base提交commit。也就是说让bc变成1、2、5、3、4一条线，而不是<code>merge</code>那样有分叉，这里就需要用<code>rebase</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0105.png" alt="image-20220119211613680"></p><p><code>rebase</code>原理是枚举变更的commit，依次变基。先拿出3号commit，然后以125为基础添加3号commit，再拿出4号commit，以1253为基础添加4号commit。直至所有新增commit完成变基。所以<code>rebase</code>就是重新排列base。base就是指commit。</p><p><strong>实战模拟</strong></p><p>先在master完成两次commit。在bc分支完成两次commit。切回master完成一次commit</p><p>1.<code>git log</code>查看master和bc分支的提交记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0106.png" alt="image-20220119212543369"></p><p>2.在<code>bc</code>分支中执行<code>git rebase</code>命令，出现冲突手动解决即可。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0107.png" alt="image-20220119212632284"></p><p>3.处理完后add到暂存区，继续下一个commit结点的rebase。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>重复2、3后如图</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0108.png" alt="image-20220119212802420"></p><h3>第一种使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变基整合多条记录到一条</span></span><br><span class="line">git rebase -i &lt;哈希值&gt;</span><br><span class="line">git rebase -i HEAD~数字 <span class="comment">#从当前记录到前x个记录合并</span></span><br></pre></td></tr></table></figure><p>在开发一个项目时，有四次提交记录，第四次开发完，老板只想看到最初的和最终的日志文件。可以使用<code>git rebase</code>简化记录。</p><p>1.使用<code>git log</code>查看日志</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0109.png" alt="image-20220122115423239"></p><p>2.合并三条记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行任意一个</span></span><br><span class="line">git rebase -i 80fe8d5cea94a687064a740e6e3f3c91a28032d9</span><br><span class="line">git rebase -i HEAD~3 <span class="comment">#从当前记录到前x个记录合并</span></span><br></pre></td></tr></table></figure><p>下面是提示命令的，自己翻译一下很好懂。按<code>i</code>进入<code>vim</code>编辑，这里执行S。然后按<code>Esc</code>输入<code>:wq</code>(表示保存并退出)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0110.png" alt="image-20220122121109028"></p><p>删掉前几次提交的信息输入新的commit。然后按<code>Esc</code>输入<code>:wq</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0111.png" alt="image-20220122121419783"></p><p>合并成功，之后可以<code>git log</code>一下看一下变化。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0112.png" alt="image-20220122121439242"></p><p>&#x3D;&#x3D;注意：&#x3D;&#x3D;不要对已经push过远程的记录进行<code>git rebase -i HEAD</code>有可能会反而更乱</p><h3>第二种使用情况</h3><p>接着第一种情况的命令窗口继续操作</p><p>1.新切一个<code>dev</code>分支，并提交一次记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0113.png" alt="image-20220122122022277"></p><p>2.切回<code>master</code>分支，新建一个文本，提交一次记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0114.png" alt="image-20220122122212033"></p><p>3.用<code>git merge</code>合并<code>dev</code>到<code>master</code>。(如果十多个人的团队开发项目，一直使用<code>merge</code>，开发记录就会很凌乱)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0115.png" alt="image-20220122122628892"></p><p>4.切回<code>dev</code>，合并<code>master </code>到<code>dev</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0116.png" alt="image-20220122123117770"></p><p>5.在<code>dev</code>中提交一次记录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0117.png" alt="image-20220122123616138"></p><p>6.切回<code>master</code>提交一次记录</p><p><img src="https://raw.githubusercontent.com/GC-ZF/Typora-%EF%BC%9Fimg/main/img/Git%E5%AD%A6%E4%B9%A0118.png" alt="image-20220122123723292"></p><p>7.切回到<code>dev</code>分支，<code>git rebase</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0119.png" alt="image-20220122123848771"></p><p>8.因为最终代码要放回<code>master</code>主分支，所以切回<code>master</code>，执行<code>git merge</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0120.png" alt="image-20220122124034372"></p><p>这样提交记录就是一条线而不是分叉，使提交记录显示的非常简洁。如果有点凌乱可以理解为，在dev分支中<code>git rebase master</code>是将master中的记录并过来成&#x3D;&#x3D;一条线而不是分叉&#x3D;&#x3D;，之后再回到master，<code>git merge dev</code>，这样就不会产生分叉不在master中直接<code>git rebase</code>是因为master是稳定的主分支，避免合并产生其它冲突使master中的代码损坏</p><h2 id="13-9-git-cherry-pick-挑选合并"><a href="#13-9-git-cherry-pick-挑选合并" class="headerlink" title="13.9 git cherry-pick 挑选合并"></a>13.9 git cherry-pick 挑选合并</h2><p>这部分在网上找了这篇，感觉解释相当好，我就不写啦。<a href="https://blog.csdn.net/FightFightFight/article/details/81039050?ops_request_misc=%7B%22request_id%22:%22164266584716781683917658%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164266584716781683917658&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-81039050.pc_search_insert_es_download&utm_term=git+cherry+pick&spm=1018.2226.3001.4187">FightFightFight的博客</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;哈希值&gt;</span><br></pre></td></tr></table></figure><h2 id="13-10-git-stash-存储到堆栈"><a href="#13-10-git-stash-存储到堆栈" class="headerlink" title="13.10 git stash 存储到堆栈"></a>13.10 git stash 存储到堆栈</h2><p>这个命令是用来处理bug的，初学可以新建一个分支，在新分支中解决完bug再和主分支合并。但是这一操作可以使用<code>git stash</code>来完成</p><p><a href="https://blog.csdn.net/lamp_yang_3533/article/details/80370380?ops_request_misc=%7B%22request_id%22:%22164266982016780264075673%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164266982016780264075673&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-80370380.pc_search_insert_es_download&utm_term=git%E4%B8%ADstash%E5%91%BD%E4%BB%A4&spm=1018.2226.3001.4187">git stash 命令的用法</a></p><p><a href="https://blog.csdn.net/andyzhaojianhui/article/details/80586695?ops_request_misc=%7B%22request_id%22:%22164266646116780271582748%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164266646116780271582748&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-5-80586695.pc_search_insert_es_download&utm_term=git+stash&spm=1018.2226.3001.4187">git stash的详细讲解_andyzhaojianhui的专栏-CSDN博客_git stash</a></p><h2 id="13-11-Git-tag-标签"><a href="#13-11-Git-tag-标签" class="headerlink" title="13.11 Git tag 标签"></a>13.11 Git tag 标签</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0121.png" alt="image-20220122163422944"></p><p>在Github下载别人做好的软件都有这个界面。<code>tag</code>是git版本库的一个标记，指向某个<a href="https://so.csdn.net/so/search?q=commit&spm=1001.2101.3001.7020">commit</a>的指针。主要用于发布版本的管理，一个版本发布之后，我们可以为git打上v 1.0,v 1.1这样的标签。tag需要&#x3D;&#x3D;单独推送远程&#x3D;&#x3D;，不能使用<code>git push</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tagName&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0122.png" alt="image-20220122161651276"></p><blockquote><p>tag感觉跟branch有点相似，但是本质上和分工上是不同的：</p><p>tag 对应某次commit, 是一个点，是不可移动的<br>branch 对应一系列commit，是很多点连成的一根线，有一个HEAD 指针，是可以依靠 HEAD 指针移动的<br>所以，两者的区别决定了使用方式，改动代码用 branch ,不改动只查看用 tag</p></blockquote><p><code>tag</code> 和 <code>branch</code> 的相互配合使用，有时候起到非常方便的效果，例如：已经发布了 v1.0 v2.0 v3.0 三个版本，这个时候，我突然想不改现有代码的前提下，在 v2.0 的基础上加个新功能，作为 v4.0 发布。就可以检出 v2.0 的代码作为一个 branch ，然后作为开发分支</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0123.png" alt="image-20220122163112998"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标出标签</span></span><br><span class="line">git checkout -b &lt;branchName&gt; &lt;tagName&gt;</span><br><span class="line"><span class="comment"># 或者先切换标签再新建分支</span></span><br><span class="line">git checkout &lt;tagName&gt;</span><br><span class="line">git switch -c &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p><code>git tag</code>常用指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建本地tag</span></span><br><span class="line">git tag &lt;tagName&gt;</span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">&quot;XXX...&quot;</span>  <span class="comment"># 指定标签信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">git push origin &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地有多条tag，一次推送全部</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换标签 切换后，分支置空</span></span><br><span class="line">git checkout &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地某个 tag 的详细信息</span></span><br><span class="line">git show &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地所有 tag</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程所有 tag</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地 tag 的删除</span></span><br><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程 tag 的删除</span></span><br><span class="line">git push origin --delete tag &lt;tagName&gt;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wei78008023/article/details/81866590?ops_request_misc=%7B%22request_id%22:%22164283763316780271520360%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164283763316780271520360&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81866590.pc_search_insert_es_download&utm_term=git+tag&spm=1018.2226.3001.4187">Git中tag标签的使用_等待化茧成蝶的专栏-CSDN博客</a></p><h2 id="13-12-清除git仓库的所有提交记录"><a href="#13-12-清除git仓库的所有提交记录" class="headerlink" title="13.12 清除git仓库的所有提交记录"></a>13.12 清除git仓库的所有提交记录</h2><p>有时候提交记录太多，可以使用<code>git rebase -i </code>合并提交记录，但是需要手动修改每一次提交。可以用以下方法清除Git仓库的所有提交记录，成为一个新的干净仓库</p><p>1.切换到新的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b latest</span><br></pre></td></tr></table></figure><p>2.复制所有文件到<code>lastest</code>（除了.gitignore中声明排除的）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure><p>3.提交跟踪过的文件（Commit the changes）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -am <span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure><p>4.删除master分支（Delete the branch）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D master</span><br></pre></td></tr></table></figure><p>5.重命名当前分支为master（Rename the current branch to master）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m master</span><br></pre></td></tr></table></figure><p>6.提交到远程master分支 （Finally, force update your repository）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure><p>通过以上几步就可以简单地把一个Git仓库的历史提交记录清除掉了，不过最好还是在平时的开发中严格要求一下提交日志的规范，尽量避免在里面输入一些敏感信息进来</p><h1 id="十四、自定义命令"><a href="#十四、自定义命令" class="headerlink" title="十四、自定义命令"></a>十四、自定义命令</h1><p>学完上面的指令，有的命令不好记忆，可以自定义命令</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">..\Git\etc\gitconfig<span class="comment">//Git指git安装目录</span></span><br></pre></td></tr></table></figure><p>在文件最后添加<code>[alias]</code>,格式为<code>自定义 = 系统默认</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[alias]</span><br><span class="line">lg=log</span><br></pre></td></tr></table></figure><h1 id="十五、GitHub-使用技巧"><a href="#十五、GitHub-使用技巧" class="headerlink" title="十五、GitHub 使用技巧"></a>十五、GitHub 使用技巧</h1><h2 id="15-1-README-md"><a href="#15-1-README-md" class="headerlink" title="15.1 README.md"></a>15.1 README.md</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0136.png" alt="image-20220123171128958"></p><p>新建仓库的时候有一个勾选是否新建”REAME.md”，这个其实就是字面意思。<strong>遇事不决先REAME</strong>，意思是说这个REAME文件会展示在我们的仓库首页，起到简介的作用。”.md”是用&#x3D;&#x3D;markdown&#x3D;&#x3D;语言编写的文本，我的所有的博客也是通过&#x3D;&#x3D;markdown&#x3D;&#x3D;写的，可以看一下我第一次使用CSDN的博客！<a href="https://blog.csdn.net/qq_49488584/article/details/121513406?spm=1001.2014.3001.5501">入门markdown使用教程(Typora)_鬼才小张同学的博客</a>。</p><p>可以在仓库里直接编辑，也可以编辑好以后Push远程。</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0137.png" alt="image-20220123171748191"></p><blockquote><p>区别下面的Wike，Wike是公司用的。README是站在个人的角度。比方说，现在做了一个开源的软件放在了Github上，别人会先通过README来了解这个软件是做什么用的？</p></blockquote><h2 id="15-2-Pin-amp-Watch-amp-Star"><a href="#15-2-Pin-amp-Watch-amp-Star" class="headerlink" title="15.2 Pin &amp;  Watch &amp; Star"></a>15.2 Pin &amp;  Watch &amp; Star</h2><p>仓库界面</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0124.png" alt="image-20220122150623214"></p><p>个人主页</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0125.png" alt="image-20220122151427081"></p><p><strong>Pin</strong>：代表这个仓库会显示在你的个人主页，类似置定的作用，别人可以率先看到这个仓库</p><p><strong>Watch：</strong>默认是Unwatch。如果某个仓库感兴趣，将其设置为Watch，表示关注这个仓库的动态，当仓库有新的<code>push</code>,<code>Issues</code>，个人通知中心就会收到消息，如果绑定了邮箱也会发送到邮箱</p><p><strong>Star:</strong> 类似一键三连，点赞收藏，表示对项目的支持。Star的项目会收在个人主页。也可以通过标签对仓库分类</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0126.png" alt="image-20220122151225644"></p><p>所以可以搜一些值得<strong>Watch</strong>的项目，看大佬的开发，如果有任何新动态，可以收到通知，不仅可以查看别人的回答，也可以回答别人提出的问题，这是一个很好的学习成长方式</p><h2 id="15-3-Issues-amp-Wike"><a href="#15-3-Issues-amp-Wike" class="headerlink" title="15.3 Issues &amp; Wike"></a>15.3 Issues &amp; Wike</h2><p>团队开发时，每一个公司不一定在同一个省市，常规的QQ、微信不方便交流，每一个公司有自己的gitlab，以防源码泄露。以github为例子可以使用Issues和Wike</p><p><strong>Issues：</strong>进行文档以及任务管理。有任何的疑问，bug。发起一个Issues。另一方面，如果新成员对项目有问题，可以通过标签筛选查看历史，快速了解项目。或者一个开源项目，其他人发现了bug，也可以通过Issues提交给作者</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0134.png" alt="image-20220121183309717"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0127.png" alt="image-20220121203732692"></p><p>提交后，代码的管理者就会收到，去解决问题</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0128.png" alt="image-20220121203955491"></p><p>管理员可以修改问题的状态，收到消息后可以回复消息并关掉问题</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0129.png" alt="image-20220121204550280"></p><p><strong>Wiki：</strong>对项目的描述，方便新人了解项目</p><h2 id="15-4-fork-amp-clone-的区别-amp-pull-request-给开源仓库贡献代码"><a href="#15-4-fork-amp-clone-的区别-amp-pull-request-给开源仓库贡献代码" class="headerlink" title="15.4 fork &amp; clone 的区别 &amp; pull request 给开源仓库贡献代码"></a>15.4 fork &amp; clone 的区别 &amp; pull request 给开源仓库贡献代码</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0130.png" alt="image-20220122132647096"></p><p><strong>fork：</strong>在Github页面，点击fork按钮。将别人的仓库复制一份到自己的仓库</p><p><strong>clone：</strong>将Github中的仓库克隆到自己本地电脑</p><p><strong>pull request：</strong> 第一种个人向作者贡献代码，第二种用法,团队开发，自己对其它分支没有操作权限，发出合并请求</p><blockquote><p>Q：<code>fork</code>和<code>clone</code>都有复制的作用，有什么区别？</p><p>A1：<code>clone</code>仅是下载了一份代码到本地，不能push远程仓库。</p><p>A2：假设有一个开源的仓库A，自己并不是仓库的成员，可以通过<code>fork</code>复制到自己的仓库，这样在Github中就有一个一模一样的仓库，但URL不同。对代码进行修改后，可以<code>git push</code>到远程仓库，此时作者并看不见你的push，之后通过<code>pull request</code>向作者发出请求贡献自己的代码，作者看到请求并决定要不要接受代码，如果作者认为修改是有用的，就会把这个请求并到自己的仓库</p><p>A3：比方有一个朋友分享了一个百度网盘链接，但是现在不想下载到本地，所以保存到了自己的云盘。通过<code>fork</code>也可以起到这个作用。</p><p>Q：如果<code>fork</code>了别人的仓库，之后<code>clone</code>到本地，仓库更新后，自己的仓库怎么更新？</p><p>A：在本地<code>fetch</code>拉取一下远程，然后将仓库合并</p></blockquote><p>如果在一个特别有名的开源项目贡献过自己的代码，这部分记录会展现在<code>log</code>日志中，面试的时候就可以说自己贡献过什么代码</p><h2 id="15-5-Organization-团队开发"><a href="#15-5-Organization-团队开发" class="headerlink" title="15.5 Organization 团队开发"></a>15.5 Organization 团队开发</h2><p><strong>1.为仓库添加合作成员</strong></p><ul><li>一种是通过新建仓库，在仓库中邀请新成员</li><li>一种是新建一个组织，在组织中新建仓库(类似新建一个QQ群，使用群文件管理项目)，这样就不用每次都重新邀请一遍团队成员，默认新成员的权限是只读，需要在组织界面<code>Setting</code>设置写权限，或者在指定仓库的界面<code>Setting</code>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0131.png" alt="image-20220122164233413"></p><p><strong>2.设置仓库规则</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0132.png" alt="image-20220122165858509"></p><h2 id="15-6-在线编辑文件-amp-githubls-com"><a href="#15-6-在线编辑文件-amp-githubls-com" class="headerlink" title="15.6 在线编辑文件 &amp; githubls.com"></a>15.6 在线编辑文件 &amp; githubls.com</h2><p>我们可以直接在网页对单个文件进行一些简单的操作</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0138.png" alt="image-20220123174408973"></p><p>但是当一个仓库有很多文件，这个时候需要查阅编辑某个文件，可以直接在仓库界面点击<code>Go to file</code>进行查找，也可以克隆到本地，但是有一种更简单的办法，在仓库地址后缀加”ls”变为”githubls.com&#x2F;xxx&#x2F;xxx”，也可以在仓库界面直接按<code>.</code>，文件就会以文件树的方式展示出来，可以像IDEA那样，直接对文件进行编辑，下载</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0139.png" alt="image-20220123173300999"></p><p><img src="https://github.com/GC-ZF/TG-Learn/blob/main/Img/Web%20editor%20Download.jpg?raw=true"></p><p>也可以去网上找一些插件，比如”Octotree”,也可以展示文件树</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>GitHub中有很多很多的功能，只不过是英文，所以大家回避去探索它，这里只说一了些实用的或者可能用到的一些按钮。自己可以多点点，多探索探索。顺便提一嘴自己在csdn搜一下<strong>Github网站镜像、Git克隆镜像、cdn.jsdelivr.net快速访问仓库文件</strong>，解决404的烦恼！</p></blockquote><h1 id="十六、总结"><a href="#十六、总结" class="headerlink" title="十六、总结"></a>十六、总结</h1><blockquote><p>到这里，本专栏就结束啦！初学建议使用<strong>Gitee</strong>练手，因为<strong>Github</strong>一方面被ban了，一方面全英文，先使用<strong>Gitee</strong>网页熟悉页面，<strong>Github</strong>和<strong>Gitee</strong>页面布局大同小异</p></blockquote><p>仓库规则：<a href="https://gitee.com/help/articles/4283#article-header0">Gitee 配额</a>，<a href="https://github.com/account/upgrade?plan=pro&source=account+compare+plans">Github配额</a>。企业版自己看吧，大家都是个人估计也用不到</p><table><thead><tr><th align="center">免费版</th><th>Github</th><th>Gitee</th></tr></thead><tbody><tr><td align="center">访问速度</td><td>偶尔404，解决办法自己搜，博客不让发</td><td>快</td></tr><tr><td align="center">仓库数量</td><td>无限</td><td>1000个</td></tr><tr><td align="center">仓库容量</td><td>单个仓库≤1G,单文件≤100M,仓库总容量不限</td><td>单个仓库≤500M,单文件≤50M,仓库总容量5G</td></tr><tr><td align="center">仓库成员</td><td>公共，私有仓库协作人数不限</td><td>公共有仓库不限，所有私有仓库总的协作人数≤5</td></tr></tbody></table><blockquote><p>熟练后建议使用<strong>Github</strong>,理由通过对比已经很明显了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%A6%E4%B9%A0133.png" alt="image-20220119213715907"></p><p><font size=5 color="Cyan">多敲 多练 多查！指令有很多，多敲可以结合自身情况去记忆其它功能 </font></p><p>前几天发现了一个好玩的log指令，总结的很全</p><p><a href="https://blog.csdn.net/qq_32452623/article/details/79599503">Git-叹为观止的 log 命令 &amp; 其参数_段浅浅的博客-CSDN博客_git log</a></p><blockquote><p>专栏速览：</p><ol><li><a href="https://blog.csdn.net/qq_49488584/article/details/122691262">Git使用 从入门到入土 收藏吃灰系列(一) 专栏前言</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122698580">Git使用 从入门到入土 收藏吃灰系列(二) Git的安装与配置</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122775246">Git使用 从入门到入土 收藏吃灰系列(三) Git常用命令</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122785898">Git使用 从入门到入土 收藏吃灰系列(四) Git工作原理</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122816025">Git使用 从入门到入土 收藏吃灰系列(五) Git本地仓库搭建</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122830353">Git使用 从入门到入土 收藏吃灰系列(六) 链接远程仓库</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122847554">Git使用 从入门到入土 收藏吃灰系列 (七) 同时配置Gitee、Github 公钥</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122857478">Git使用 从入门到入土 收藏吃灰系列 (八) 什么是分支 分支的作用</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122880287">Git使用 从入门到入土 收藏吃灰系列 (九) git reset 移除暂存区与版本回退</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122906704">Git使用 从入门到入土 收藏吃灰系列 (十) 详谈push、fetch、pull</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122932198">Git使用 从入门到入土 收藏吃灰系列 (十一) 下载所有远程仓库分支</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122938572">Git使用 从入门到入土 收藏吃灰系列 (十二) git merge 与 git rebase</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122966614">Git使用 从入门到入土 收藏吃灰系列 (十三) git stash、git check-pick、git tag、git diff</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/122979816">Git使用 从入门到入土 收藏吃灰系列 (十四) 清除git仓库的所有提交记录</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/123000553">Git使用 从入门到入土 收藏吃灰系列 (十五) 自定义Git命令</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/123016332">Git使用 (十六) Github上的小按钮</a></li><li><a href="https://blog.csdn.net/qq_49488584/article/details/123027936">Git使用 (十七) 解决Git Bash中文乱码</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统期末考试试卷</title>
      <link href="/posts/37389/"/>
      <url>/posts/37389/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统期末考试试卷"><a href="#操作系统期末考试试卷" class="headerlink" title="操作系统期末考试试卷"></a>操作系统期末考试试卷</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>小张的期末复习计划：</p><ol><li>前九天，白天看王道，认真整理笔记，晚上复盘(只看视频，不做题，时间允许可以刷王道课后题)。基础很重要！一定要认真看视频，对后期刷题很有帮助。只看了王道的前四章，因为时间紧，I&#x2F;O设备不重要。后期我不会做题或者知识点忘记的时候，通过自己整理的笔记，用目录或者文字检索很快就出来了，笔记放在操作系统专栏了，想要文档的留言就可以了。</li><li>第十天，把老师强调的名词解释总结写在笔记本，每天反复读。</li><li>十二、十三天，因为学校没有题库所以从网上找了类型题，<a href="https://www.doc88.com/p-0087875363512.html">一份操作系统试卷</a>，<a href="https://www.bilibili.com/video/BV1kJ411E7AQ?from=search&seid=14626150744125832554&spm_id_from=333.337.0.0">一个B站视频  操作系统期末考试不挂科 大题详解 </a>，[一份复习PPT 八个大题](<a href="https://pan.baidu.com/s/1iOt_mcn446EHQqCC4kGh3g">https://pan.baidu.com/s/1iOt_mcn446EHQqCC4kGh3g</a> 提取码：2580)</li></ol></li><li><p>结果就是让小张把题给猜中了，保守是过了。如果来不及系统的复习，一定要过一遍上面的三个链接，题型主要就这几个。</p></li><li><p>下面这份试卷是我们学校的试卷</p><p><span style='color:red;background:背景颜色;font-size:50px;font-family:字体;'>祝大家科科过！！！</span></p></li></ul><hr><p>2022.01.13更新<br>小张安全下车！操作系统84分哈哈哈哈</p><h2 id="试卷"><a href="#试卷" class="headerlink" title="试卷"></a>试卷</h2><ol><li>六道简答(30分)</li></ol><ul><li><p>进程通信的方式？</p><blockquote><p>共享存储器系统、管道通信系统、信息传递系统、客户机-服务器系统。</p></blockquote></li><li><p>死锁的必要条件？</p><blockquote><p>互斥条件、循环等待条件、不剥夺条件、请求并保持条件。</p></blockquote></li><li><p>简述SPOOLING技术？</p><blockquote><p>SPOOLING技术是对脱机输入输出的模拟，它是一种以空间(硬件空间)换时间技术；它有三部分组成：输入井输出井、输入输出缓冲区、输入和输出进程；外部输入内容先保存在输入井，进程直接从输入井获得数据，同样需要输出时，也是先发送到输出井，然后再从输出井输出至外部设备。</p></blockquote></li><li><p>什么是文件目录？什么是目录文件？</p><blockquote><p>文件目录：文件目录块的有序集合。一个文件目录也称作目录文件。</p></blockquote></li><li><p>上下文切换的过程？</p><blockquote><ol><li>将当前处理器的寄存器上下文保存到当前进程的系统级上下文的现场信息中；</li><li>将新进程系统级上下文中的现场信息作为新的寄存器上下文恢复到处理器的各个寄存器中；</li><li>将控制转移到新进程执行。</li></ol></blockquote></li></ul><ol start="2"><li><p>进程调度算法(先进先出，非抢占式短作业优先，抢占式短作业优先，优先级，最高相应比优先的<strong>调度顺序并计算周转时间</strong>)(链接里的视频好好看一遍就会了)(15分)</p></li><li><p>试卷<a href="https://www.doc88.com/p-0087875363512.html">一份操作系统试卷</a>中的第三题(类型题)，计算磁盘的文件系统。(15分)</p><p>1).最大文件长度？</p><p>2).给出逻辑地址，画出索引结构图 </p><p>3).给出逻辑地址计算位置？访问次数？</p></li><li><p>已知内存访问时间200，快表访问时间0，命中率85%，计算无快表的平均访问时间，计算有快表的平均访问时间(10分)</p></li></ol><p>​无快表的平均访问时间&#x3D;200+200&#x3D;400</p><p>​有快表的平均访问时间&#x3D;0.85 * (0+200)+0.15 * (0+200+200)&#x3D;230</p><blockquote><p><strong>&#x3D;&#x3D;附公式：&#x3D;&#x3D;</strong></p><p>无快表的平均访问时间&#x3D;内存访问时间(访问慢表)+内存访问时间(访问磁盘)</p><p>有快表的平均访问时间&#x3D;(快表+内存访问时间) * 快表命中率+(快表访问时间+慢表访问时间+内存访问时间) * (1-快表命中率)</p></blockquote><ol start="5"><li><p>为一段管道通信编写指令，汤小丹的书P213页会写右上角的表格(10分)</p></li><li><p>PPT第二页，磁盘文件的计算(原题)(10分)</p></li><li><p>pv操作，PPT第七页(类型题，改为三个进程共用一个缓冲区，其实就是吃水果问题，一个盘子)(10分)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD常用命令大全（值得收藏)</title>
      <link href="/posts/44810/"/>
      <url>/posts/44810/</url>
      
        <content type="html"><![CDATA[<h1>CMD常用命令大全（值得收藏）</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>平常在学校上课忘记带鼠标，触摸板又有点不方便。cmd可以解决一大半问题！通过使用窗口命令，实现无鼠标办公！或者你想在朋友面前装个x，不妨运行一下<code>tree</code></li><li>总而言之，cmd命令记一些常用的，还是很有帮助的！</li></ul><h1 id="一、启动cmd方式"><a href="#一、启动cmd方式" class="headerlink" title="一、启动cmd方式"></a>一、启动cmd方式</h1><ol><li><p>用户启动，<kbd>Win</kbd><strong>+</strong><kbd>r</kbd> 输入<code>cmd</code>，<kbd>Enter</kbd></p></li><li><p>管理员启动，<kbd>Win</kbd><strong>+</strong><kbd>r</kbd> 输入<code>cmd</code>，<kbd>Ctrl</kbd><strong>+</strong><kbd>Shift</kbd><strong>+</strong><kbd>Enter</kbd></p></li></ol><h1 id="二、修改背景"><a href="#二、修改背景" class="headerlink" title="二、修改背景"></a>二、修改背景</h1><p>打开cmd，右击窗口点击属性，可以为cmd命令窗口设置文字与背景样式</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/cmd/cmd01.png" alt="image-20211229012016283" style="zoom:50%;" /><p>改成我这种透明、绿色字体是不是酷起来了！</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/cmd/cmd02.png" alt="image-20220116151940879"></p><h1 id="三、文件夹命令"><a href="#三、文件夹命令" class="headerlink" title="三、文件夹命令"></a>三、文件夹命令</h1><p>进入文件夹</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\typora\file</span><br></pre></td></tr></table></figure><p>返回上一级</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>..</span><br></pre></td></tr></table></figure><p>跳转到根目录</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> \</span><br></pre></td></tr></table></figure><p>跳转指定路径(假设现在在D:\typora跳转到D:\网页下载)</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\网页下载</span><br></pre></td></tr></table></figure><p>打开文件夹或文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> 文件名字</span><br></pre></td></tr></table></figure><p>新建文件夹</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">md</span> d:\typora\flie</span><br><span class="line">mkdir newtest 进入根目录后使用</span><br></pre></td></tr></table></figure><p>新建空文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>.&gt;flie.txt</span><br><span class="line"><span class="built_in">cd</span>.&gt;flie.docx</span><br><span class="line"><span class="built_in">cd</span>.&gt;flie.ppt</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> nul&gt; newtest.txt </span><br><span class="line"><span class="built_in">type</span> nul&gt;.txt</span><br></pre></td></tr></table></figure><p>新建非空文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 文件中的内容&gt;new.txt</span><br></pre></td></tr></table></figure><p>删除文件(如果是<code>del 文件夹A</code>是删除文件夹A内的所有带后缀的文件，若文件夹A中有文件夹B，文件夹B不会被修改)</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">del</span> flie.txt</span><br></pre></td></tr></table></figure><p>删除指定后缀的文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">del</span> *.txt</span><br><span class="line"><span class="built_in">del</span> *.docx</span><br></pre></td></tr></table></figure><p>删除名为flie的空文件夹</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rd</span> flie</span><br></pre></td></tr></table></figure><p>删除名为flie的文件夹</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rd</span> /s D:\flie</span><br></pre></td></tr></table></figure><p>删除flie文件夹下的所有文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rd</span> flie /s</span><br></pre></td></tr></table></figure><p>生成目录树,在文件少一些的路径尝试。要不会运行好久，ctrl+c可以停掉</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure><p>遍历当前路径下所有文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p>显示当前目录及子文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /s</span><br></pre></td></tr></table></figure><p>显示文件以及文件大小、个数</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /d</span><br></pre></td></tr></table></figure><p>显示文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /b</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;对dir的组合使用：&#x3D;&#x3D;</p><p>查找文件。只需要输入路径即可，无需cd返回到某个路径再执行命令(eg：D:\JAVA\eclipse\flie和D:\eclipse效果相同)</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>/s/b d:\flie</span><br></pre></td></tr></table></figure><p>查找文件以及文件大小、个数</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>/s/d d:\flie</span><br></pre></td></tr></table></figure><p>查看隐藏文件夹</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /?</span><br></pre></td></tr></table></figure><p>复制文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> 路径\文件名 路径\文件名</span><br></pre></td></tr></table></figure><p>移动文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">move</span> 路径\文件名 路径\文件名</span><br></pre></td></tr></table></figure><h1 id="四、网络相关"><a href="#四、网络相关" class="headerlink" title="四、网络相关"></a>四、网络相关</h1><p>查看ip地址</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>查询ip地址</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ping www.csdn.net</span><br></pre></td></tr></table></figure><p>netstat 查看网络连接状态</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netstat <span class="literal">-help</span> 获取命令行使用帮助信息</span><br><span class="line"></span><br><span class="line">netstat <span class="literal">-ano</span>  //查看网络连接、状态以及对应的进程id</span><br></pre></td></tr></table></figure><h1 id="五、其它常用命令"><a href="#五、其它常用命令" class="headerlink" title="五、其它常用命令"></a>五、其它常用命令</h1><p>关机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -s</span><br></pre></td></tr></table></figure><p>关闭本地计算机，没有超时或警告</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -p</span><br></pre></td></tr></table></figure><p>强制关闭正在运行的应用程序而不提前警告用户,可搭配<code>-p</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -f</span><br></pre></td></tr></table></figure><p>定时关机，定时60s,时间自定</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shutdown <span class="literal">-s</span> <span class="literal">-t</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p>关机并重启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　shutdown -r</span><br></pre></td></tr></table></figure><p>一段时间后重启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　shutdown -r -t 秒数</span><br></pre></td></tr></table></figure><p>注销当前用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -l　</span><br></pre></td></tr></table></figure><p>休眠，可以搭配-f,<code>shut down -h -f</code>。不可以搭配<code>-t</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h </span><br></pre></td></tr></table></figure><p>解除命令</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shutdown <span class="literal">-a</span></span><br></pre></td></tr></table></figure><p>清除屏幕</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cls</span></span><br></pre></td></tr></table></figure><p>使用help命令查看帮助</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">命令 <span class="literal">-help</span>    //第<span class="number">1</span>种形式的使用帮助</span><br><span class="line">命令  /?       //第<span class="number">2</span>种形式的使用帮助</span><br></pre></td></tr></table></figure><p>终止命令</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ctrl+c</span><br></pre></td></tr></table></figure><p>退出cmd</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>其他比较实用的，但使用频率不高的命令</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">notepad+路径打开记事本</span><br><span class="line">dxdiag检查DirectX信息</span><br><span class="line">winver检查Windows版本</span><br><span class="line">wmimgmt.msc打开windows管理体系结构（WMI）</span><br><span class="line">wupdmgrwindows更新程序</span><br><span class="line">wscriptwindows脚本设置</span><br><span class="line"><span class="built_in">write</span>写字板</span><br><span class="line">winmsd系统信息</span><br><span class="line">wiaacmgr扫描仪和相机</span><br><span class="line">calc计算器</span><br><span class="line">mplayer2打开windows media player</span><br><span class="line">mspaint画图板</span><br><span class="line">mstsc远程桌面连接</span><br><span class="line">mmc打开控制台</span><br><span class="line">dxdiag检查Directx信息</span><br><span class="line">drwtsn32系统医生</span><br><span class="line">devmgmt.msc设备管理器</span><br><span class="line">notepad记事本</span><br><span class="line">ntbackup系统备份和还原</span><br><span class="line">sndrec32录音机</span><br><span class="line">Sndovl32音量控制程序</span><br><span class="line">tsshutdn<span class="number">60</span>秒倒计时关机</span><br><span class="line">taskmgr任务管理器</span><br><span class="line">explorer资源管理器</span><br><span class="line">progman程序管理器</span><br><span class="line">regedit.exe注册表</span><br><span class="line">perfmon.msc计算机性能监测</span><br><span class="line">eventvwr事件查看器</span><br><span class="line">net user  查看用户</span><br><span class="line">whoami查看当前用户</span><br><span class="line">net user %username% <span class="number">123456</span> 将电脑用户密码修改为<span class="number">123456</span>，%%中填写用户名称</span><br></pre></td></tr></table></figure><h1 id="六、cmd快捷键"><a href="#六、cmd快捷键" class="headerlink" title="六、cmd快捷键"></a>六、cmd快捷键</h1><p>快速查看历史记录<kbd>↑</kbd> <kbd>↓</kbd><br>查看完整记录<kbd>F7</kbd></p><p>切换当前路径下文件<kbd>Tab</kbd><br>反向选择文件和文件夹<kbd>Shift</kbd>+<kbd>Tab</kbd></p><p>拖拽文件到窗口可以直接显示路径</p><p><kbd>ESC</kbd>清除当前命令行<br><kbd>F1</kbd>单字符输出上次输入的命令，如果已经是最后的一条的命令，则不进行任何切换操作。 （例：输入“dir”，按F1一次后自动输入d，按两次自动输入i,三次自动输入r）<br><kbd>F2</kbd>可复制字符数量 , 输入上次命令中含有的字符,系统自动删除此字符后的内容. （例：输入 cd test ，按下F2 输入 e 后,系统自动输入 cd t 命令）<br><kbd>F3</kbd>重新输入前一次输入的命令 或者按向上键<br><kbd>F4</kbd>可删除字符数量,同于F2的功能 （例： 输入 cd test 将光标移动到d下面，按下F4 输入e后,系统自动删除t以后(包括d) e(不包括e)以前的字符 命令变为 cest）<br><kbd>F5</kbd>自动切换到已经执行过的命令字符。可按下多次选择命令<br><kbd>F6</kbd>相当按键盘上的Ctrl＋z 键<br><kbd>F7</kbd>显示命令历史记录，按下后可用方向键上下选择之前输入过的命令<br><kbd>F8</kbd>搜索命令的历史记录，循环显示所有曾经输入的命令，直到按下回车键为止<br><kbd>F9</kbd>与F7配合使用。F7中选择的命令是有编号的，按下F9再输入命令的编号，就能快速执行命令<br><kbd>Ctrl+Break</kbd>查看统计信息并按回车继续操作<br><kbd>Ctrl+C</kbd>强行中止命令执行<br><kbd>Ctrl+H</kbd>删除光标左边的一个字符<br><kbd>Ctrl+M</kbd>表示回车确认键<br><kbd>Alt+F7</kbd>清除所有曾经输入的命令历史记录<br><kbd>Alt+PrintScreen</kbd>截取当前命令窗内容<br><kbd>Tab</kbd>自动输入当前文件夹的子文件夹名。可按下多次选择文件夹，与cd命令配合使用可快速进入子文件夹</p><h1 id="七、JAVA相关"><a href="#七、JAVA相关" class="headerlink" title="七、JAVA相关"></a>七、JAVA相关</h1><p><strong>查看环境配置</strong></p><p>java或javac</p><p><strong>查看JDK版本</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><strong>使用cmd运行JAVA程序</strong></p><p>这里以提前写好的java程序为例，文件名”java”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">java</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zhang Shier &#x27;s CSDN&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用cd进入指定路径</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/cmd/cmd03.png" alt="image-20220116144350989"></p><p>这里提供两种方法，第一中，运行结果输出在命令提示符窗口，第二种将运行结果输出到指定文件中</p><p>第一种：输入<code>java java.java</code></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/cmd/cmd04.png" alt="image-20220116145109049"></p><p>第二种：输入java java.java&lt;in.txt&gt;out.txt。表示输入in.txt文件中的数据，将输出结果保存在out.txt中。(提前创建输入文本，输出文本不需要新建)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/cmd/cmd05.png" alt="image-20220116144545483"></p><h1 id="八、电脑快捷键"><a href="#八、电脑快捷键" class="headerlink" title="八、电脑快捷键"></a>八、电脑快捷键</h1><p>既然无鼠标办公，那必然也离不开电脑快捷键</p><p><kbd>win+E</kbd>打开文件管器</p><p><kbd>win+D</kbd>显示桌面</p><p><kbd>win+L</kbd>锁计算机</p><p><kbd>alt+F4</kbd>关闭当前程序\文件</p><p><kbd>ctrl+shift+Esc</kbd>打开任务管理器（或者ctrl+alt+delete）</p><p><kbd>ctrl+F</kbd>在一个文本或者网页里面查找，相当实用（退出一般按ESC）</p><p><kbd>ctrl+A</kbd>选中所有文本,或所有文件</p><p><kbd>crtl+alt+tab</kbd>选中窗口但不打开，使用回车打开。按<kbd>tab</kbd>或<kbd>←</kbd><kbd>→</kbd>切换</p><p><kbd>alt+tab</kbd>选中窗口并打开</p><p><kbd>win+tab</kbd>任务视图</p><p><kbd>ctrl+tab</kbd>切换窗口(仅同一软件内多个窗口有效，如浏览器开了许多个网页)</p><p><span style='color:#00ffff;background:#ccffff;font-size:50px;font-family:字体;'>不会CMD命令的程序猿不是一个好程序猿！</span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理课程设计-疲劳检测系统</title>
      <link href="/posts/48684/"/>
      <url>/posts/48684/</url>
      
        <content type="html"><![CDATA[<h1 id="数字图像处理课程设计-疲劳检测系统"><a href="#数字图像处理课程设计-疲劳检测系统" class="headerlink" title="数字图像处理课程设计-疲劳检测系统"></a>数字图像处理课程设计-疲劳检测系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>此系统基于MATLAB设计,核心思想是PERCLOS算法.</p></li><li><p>参考文章<a href="https://zhuanlan.zhihu.com/p/401105150">MATLAB疲劳检测系统 - 知乎 </a></p></li><li><p>需要源码的,私信或者留下邮箱</p><h2 id="一、课程设计任务"><a href="#一、课程设计任务" class="headerlink" title="一、课程设计任务"></a>一、课程设计任务</h2></li></ul><p>应用数字图像处理相关知识和技术实现某一应用，如人脸识别、动物识别、水果识别等综合性任务，题目自选。</p><p>本文在matlab R2018b开发环境下，实现人脸检测系统。</p><p>疲劳检测可以应用于大巴车司机，货车司机疲劳驾驶监测，现在很多情况下大巴车或者货车等司机都由于休息不好，疲劳上路，这就给安全造成了及其大的隐患。如果有一套系统，可以实时接入车辆摄像头，摄像头对准司机，当检测到司机疲劳状态的时候，则提醒后台并且语音提醒，以做出正确决策，避免车祸等悲剧的发生。该系统也可以应用于上课学生专注度分析，进行疲劳预警。</p><h2 id="二、设计框图"><a href="#二、设计框图" class="headerlink" title="二、设计框图"></a>二、设计框图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE01.png" alt="image-20211224002323644" style="zoom: 80%;" /><h2 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h2><ul><li>开发环境：windows 10,matlab R2018b</li><li>制图软件：visio 2013</li><li>素材示意：人脸图像&#x2F;视频</li></ul><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE02.png" alt="image-20211224002445267" style="zoom: 80%;" /><h2 id="四、任务流程"><a href="#四、任务流程" class="headerlink" title="四、任务流程"></a>四、任务流程</h2><h3 id="４-１视频预处理"><a href="#４-１视频预处理" class="headerlink" title="４.１视频预处理"></a>４.１视频预处理</h3><ol><li>首先将彩色视频video.avi读入，将图像分帧。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">obj = VideoReader(uigetfile(<span class="string">&#x27;*.avi&#x27;</span>,<span class="string">&#x27;选择视频&#x27;</span>));<span class="comment">%输入视频位置</span></span><br><span class="line">setappdata(<span class="number">0</span>,<span class="string">&#x27;obj&#x27;</span>,obj);<span class="comment">%设置全局变量</span></span><br><span class="line">Show_Frames=read(obj,<span class="number">1</span>);<span class="comment">%显示第一帧作为封面</span></span><br><span class="line">axes(handles.axes1);</span><br><span class="line">imshow(Show_Frames);</span><br><span class="line">set(handles.listbox1,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;分帧开始...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">prompt=&#123;<span class="string">&#x27;输入图片名是几位数:&#x27;</span>&#125;;</span><br><span class="line">defans=&#123;<span class="string">&#x27;2&#x27;</span>&#125;;<span class="comment">%默认两位数</span></span><br><span class="line">p=inputdlg(prompt,<span class="string">&#x27;输入位数&#x27;</span>,<span class="number">1</span>,defans);</span><br><span class="line">numzeros=str2num(p&#123;<span class="number">1</span>&#125;);</span><br><span class="line">   nz = strcat(<span class="string">&#x27;%0&#x27;</span>,num2str(numzeros),<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">numFrames = obj.NumberOfFrames;<span class="comment">% 帧的总数</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> :<span class="number">5</span>  <span class="comment">% 读取前5帧  numFrames</span></span><br><span class="line">frame = read(obj,k);<span class="comment">%读取第几帧</span></span><br><span class="line">id=sprintf(nz,k);</span><br><span class="line">imwrite(frame,strcat(<span class="string">&#x27;video_images/&#x27;</span>,id,<span class="string">&#x27;.jpg&#x27;</span>),<span class="string">&#x27;jpg&#x27;</span>);<span class="comment">% 保存帧</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(handles.listbox1,<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;分帧结束&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用MATLAB函数rgb2gray转换成灰度图像。</p></li><li><p>去除视频黑边，定位有效图像区域。</p></li><li><p>将结果输出到指定路径images下。</p></li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[Irect, rect]</span> = <span class="title">GetValideImage</span><span class="params">(Img, flag)</span></span></span><br><span class="line"><span class="comment">% 获取有效图像区域</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 灰度化</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ndims</span>(Img) == <span class="number">3</span></span><br><span class="line">    I = rgb2gray(Img);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    I = Img;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 去除视频黑边，定位有效图像区域</span></span><br><span class="line">tol = <span class="number">1000</span>;</span><br><span class="line">sz = <span class="built_in">size</span>(I);</span><br><span class="line">cs = sum(I, <span class="number">1</span>);</span><br><span class="line">c = <span class="built_in">find</span>(cs &gt; tol);</span><br><span class="line">cmin = <span class="built_in">min</span>(c);</span><br><span class="line">cmax = <span class="built_in">max</span>(c);</span><br><span class="line">rect = [cmin <span class="number">1</span> cmax-cmin sz(<span class="number">1</span>)];</span><br><span class="line"><span class="comment">% 图像切割，获取有效区域图像</span></span><br><span class="line">Irect = imcrop(Img, rect);</span><br><span class="line"><span class="comment">% 显示中间处理过程图像</span></span><br><span class="line"><span class="keyword">if</span> flag</span><br><span class="line">    <span class="built_in">figure</span>;</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>); imshow(Img, []); title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>); imshow(I, []); title(<span class="string">&#x27;灰度图像&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>); imshow(Img, []); title(<span class="string">&#x27;有效区域图像标记&#x27;</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line">    rectangle(<span class="string">&#x27;Position&#x27;</span>, rect, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">hold</span> off;</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>); imshow(Irect, []); title(<span class="string">&#x27;有效区域图像&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="4-2图片分割"><a href="#4-2图片分割" class="headerlink" title="4.2图片分割"></a>4.2图片分割</h3><p><strong>4.2.1 人脸定位</strong></p><ol><li><p>读入images路径下所有jpg图像。</p></li><li><p>利用MATLAB函数rgb2hsv将RGB颜色转换为HSV。</p></li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 颜色空间转换</span></span><br><span class="line">hsv = <span class="built_in">rgb2hsv</span>(Img);</span><br><span class="line">h = hsv(:, :, <span class="number">1</span>);</span><br><span class="line">s = hsv(:, :, <span class="number">2</span>);</span><br><span class="line">v = hsv(:, :, <span class="number">3</span>);</span><br><span class="line"><span class="comment">% 区域数据范围</span></span><br><span class="line">hsp = [<span class="number">0.01</span> <span class="number">0.5</span>];</span><br><span class="line">ssp = [<span class="number">0.1</span> <span class="number">0.85</span>];</span><br><span class="line">vsp = [<span class="number">0.25</span> <span class="number">0.85</span>];</span><br><span class="line">sz = <span class="built_in">size</span>(h);</span><br></pre></td></tr></table></figure><ol start="3"><li>根据HSV对肤色定位，提取人脸区域。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 初始化模板</span></span><br><span class="line">mask = <span class="built_in">zeros</span>(sz);</span><br><span class="line"><span class="comment">% 肤色定位</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : sz(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : sz(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> h(<span class="built_in">i</span>, <span class="built_in">j</span>) &gt; hsp(<span class="number">1</span>) &amp;&amp; h(<span class="built_in">i</span>, <span class="built_in">j</span>) &lt; hsp(<span class="number">2</span>) &amp;&amp; ...</span><br><span class="line">                s(<span class="built_in">i</span>, <span class="built_in">j</span>) &gt; ssp(<span class="number">1</span>) &amp;&amp; s(<span class="built_in">i</span>, <span class="built_in">j</span>) &lt; ssp(<span class="number">2</span>) &amp;&amp; ...</span><br><span class="line">                v(<span class="built_in">i</span>, <span class="built_in">j</span>) &gt; vsp(<span class="number">1</span>) &amp;&amp; v(<span class="built_in">i</span>, <span class="built_in">j</span>) &lt; vsp(<span class="number">2</span>)</span><br><span class="line">            mask(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 形态学处理</span></span><br><span class="line">mask = logical(mask);</span><br><span class="line">mask = imclose(mask, strel(<span class="string">&#x27;disk&#x27;</span>, <span class="number">15</span>));</span><br><span class="line">mask = imopen(mask, strel(<span class="string">&#x27;disk&#x27;</span>, <span class="number">15</span>));</span><br><span class="line">mask = imfill(mask, <span class="string">&#x27;holes&#x27;</span>);</span><br><span class="line"><span class="comment">% 提取人脸区域</span></span><br><span class="line">[L, num] = bwlabel(mask);</span><br><span class="line">stats = regionprops(L);</span><br><span class="line">Ar = <span class="built_in">cat</span>(<span class="number">1</span>, stats.Area);</span><br><span class="line">[Ar, ind] = <span class="built_in">sort</span>(Ar, <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line">bw = mask;</span><br><span class="line">bw(L ~= ind(<span class="number">1</span>)) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>4.2.2人眼定位</strong></p><ol><li>先对图像预处理，利用MATLAB函数rgb2gray转换成灰度图像。利用函数medfilt2对图像中值滤波，利用灰度积分find进行投影。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 灰度化</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ndims</span>(Img) == <span class="number">3</span></span><br><span class="line">    I = rgb2gray(Img);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    I = Img;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 中值滤波</span></span><br><span class="line">I = medfilt2(I, [<span class="number">5</span> <span class="number">5</span>]);</span><br><span class="line"><span class="comment">% 灰度积分投影</span></span><br><span class="line">sz = <span class="built_in">size</span>(I);</span><br><span class="line">[r, c] = <span class="built_in">find</span>(I &gt; <span class="number">0</span>);</span><br><span class="line">rmin = <span class="built_in">min</span>(r);</span><br><span class="line">rmax = <span class="built_in">max</span>(r);</span><br><span class="line">cs = sum(I, <span class="number">1</span>);</span><br><span class="line">rs = sum(I, <span class="number">2</span>);</span><br><span class="line">[maxcs, indmaxcs] = <span class="built_in">max</span>(cs);</span><br><span class="line">[maxrs, indmaxrs] = <span class="built_in">max</span>(rs);</span><br></pre></td></tr></table></figure><ol start="2"><li>对人眼区域定位。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 人眼区域定位</span></span><br><span class="line">cstart = <span class="built_in">max</span>(sz(<span class="number">2</span>)-indmaxcs<span class="number">-35</span>, <span class="number">8</span>);</span><br><span class="line">csend = <span class="built_in">min</span>(indmaxcs + <span class="number">15</span>, sz(<span class="number">2</span>)<span class="number">-20</span>);</span><br><span class="line">rstart = <span class="built_in">max</span>(indmaxrs<span class="number">-40</span>, <span class="number">25</span>);</span><br><span class="line">rsend = indmaxrs;</span><br><span class="line">rect = [cstart rstart csend-cstart rsend-rstart];</span><br></pre></td></tr></table></figure><ol start="3"><li>裁掉多余的区域。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 人眼区域裁剪</span></span><br><span class="line">Im = imcrop(Img, rect);</span><br><span class="line"><span class="keyword">if</span> flag</span><br><span class="line">    <span class="built_in">figure</span>;</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>); imshow(Img, []); title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>); imshow(I, []); <span class="built_in">hold</span> on;</span><br><span class="line">    rectangle(<span class="string">&#x27;Position&#x27;</span>, rect, <span class="string">&#x27;EdgeColor&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    <span class="built_in">hold</span> off;</span><br><span class="line">    title(<span class="string">&#x27;灰度图像&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="built_in">plot</span>(<span class="number">1</span>:sz(<span class="number">2</span>), cs);  title(<span class="string">&#x27;列投影曲线&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>); <span class="built_in">plot</span>(rs, <span class="number">1</span>:sz(<span class="number">1</span>)); title(<span class="string">&#x27;行投影曲线&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>4.2.3人眼精确定位</strong></p><ol><li>图像预处理，利用MATLAB函数rgb2gray对图像进行灰度化。利用函数graythresh进行二值化。提取图像边缘。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 获取精确人眼区域</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 灰度化</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ndims</span>(Img) == <span class="number">3</span></span><br><span class="line">    I = rgb2gray(Img);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    I = Img;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 二值化</span></span><br><span class="line">th = <span class="built_in">max</span>(graythresh(I)*<span class="number">0.4</span>, <span class="number">0.1</span>);</span><br><span class="line">bw = im2bw(I, th);</span><br><span class="line"><span class="comment">% 提取边缘</span></span><br><span class="line">bwe = edge(bw, <span class="string">&#x27;canny&#x27;</span>);</span><br><span class="line"><span class="comment">% 填孔处理</span></span><br><span class="line">bwd = imfill(bwe, <span class="string">&#x27;holes&#x27;</span>);</span><br><span class="line">bwf = bwd;</span><br><span class="line">bwf = imdilate(bwf, strel(<span class="string">&#x27;square&#x27;</span>, <span class="number">3</span>));</span><br><span class="line">bwf = imfill(bwf, <span class="string">&#x27;holes&#x27;</span>);</span><br><span class="line"><span class="comment">% 去掉边缘噪声</span></span><br><span class="line">[L, num] = bwlabel(bwf);</span><br><span class="line">stats = regionprops(L);</span><br><span class="line">Ar = <span class="built_in">cat</span>(<span class="number">1</span>, stats.Area);</span><br><span class="line">[Ar, ind] = <span class="built_in">sort</span>(Ar, <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">3</span> : num</span><br><span class="line">        bwf(L == ind(<span class="built_in">j</span>)) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>提取定位结果。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 提取定位结果</span></span><br><span class="line">rect1 = stats(ind(<span class="number">1</span>)).BoundingBox;</span><br><span class="line">rect2 = stats(ind(<span class="number">2</span>)).BoundingBox;</span><br><span class="line">rect1(<span class="number">2</span>) = rect1(<span class="number">2</span>) - <span class="number">2</span>;</span><br><span class="line">rect2(<span class="number">2</span>) = rect2(<span class="number">2</span>) - <span class="number">2</span>;</span><br><span class="line">rect&#123;<span class="number">1</span>&#125; = rect1;</span><br><span class="line">rect&#123;<span class="number">2</span>&#125; = rect2;</span><br></pre></td></tr></table></figure><p><strong>4.3疲劳检测</strong></p><ol><li>利用PERCLOS算法，计算人眼在单位时间内闭合所占比。</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">cat</span>(<span class="number">1</span>, Nv.nv);</span><br><span class="line">Nmin = <span class="built_in">min</span>(data);</span><br><span class="line">Nmax = <span class="built_in">max</span>(data);</span><br><span class="line">rate = (data-Nmin)./(Nmax-Nmin);</span><br><span class="line">set(handles.listbox3,<span class="string">&#x27;string&#x27;</span>,rate)</span><br><span class="line">pause(<span class="number">5</span>) <span class="comment">%%%%每间隔2s时间处理下一帧图像</span></span><br></pre></td></tr></table></figure><ol start="2"><li>输出结果, 计算的perclos值与tol做比较判断是否疲劳</li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tol = <span class="number">0.4</span>;  <span class="comment">%%%归一化判断标准</span></span><br><span class="line">status = <span class="string">&#x27;正常&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : N</span><br><span class="line">    <span class="keyword">if</span> rate(<span class="built_in">i</span>) &lt; tol &amp;&amp; <span class="built_in">isequal</span>(status, <span class="string">&#x27;正常&#x27;</span>)</span><br><span class="line">        status = <span class="string">&#x27;疲劳&#x27;</span>;</span><br><span class="line">        start = <span class="built_in">i</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> rate(<span class="built_in">i</span>) &lt; tol &amp;&amp; <span class="built_in">isequal</span>(status, <span class="string">&#x27;疲劳&#x27;</span>) &amp;&amp; <span class="built_in">i</span> - start &gt; <span class="number">1</span></span><br><span class="line">        status = <span class="string">&#x27;睡着&#x27;</span>;</span><br><span class="line">        start = <span class="built_in">i</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> rate(<span class="built_in">i</span>) &lt; tol &amp;&amp; <span class="built_in">isequal</span>(status, <span class="string">&#x27;睡着&#x27;</span>) &amp;&amp; <span class="built_in">i</span> - start &gt; <span class="number">2</span></span><br><span class="line">        status = <span class="string">&#x27;疲劳&#x27;</span>;</span><br><span class="line">        start = <span class="built_in">i</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> rate(<span class="built_in">i</span>) &gt; tol</span><br><span class="line">        status = <span class="string">&#x27;正常&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    Nv(<span class="built_in">i</span>).status = status;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="五、结果"><a href="#五、结果" class="headerlink" title="五、结果"></a>五、结果</h2><ol><li>GUI界面</li></ol><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE03.jpg" style="zoom:67%;" /><ol start="2"><li>输入视频，分帧处理，分割图像</li></ol><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE04.jpg" alt="img" style="zoom:67%;" /><ol start="3"><li>输出结果</li></ol><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE05.jpg" alt="img" style="zoom: 67%;" /><h2 id="六、项目总结"><a href="#六、项目总结" class="headerlink" title="六、项目总结"></a>六、项目总结</h2><p> 使用图像预处理技术得到灰度分配较为均匀的图像,然后分别利用水平和垂直灰度积分投影曲线结合人脸的结构特征找到眼睛的位置坐标,实现了准确的眼睛定位,通过perclos技术技术眨眼率，根据先验值得到是否疲劳。完成了疲劳检测系统的设计。</p><p>通过本次项目设计，不仅熟练应用了MATLAB的基本函数，也学到了PERCLOS算法。</p><p>PERCLOS算法(Percentage of Eyelid Closure Over the Pupil Time的缩写，意为单位时间里眼睛闭合时间所占的百分比)</p><p>PERCLOS原理:F&#x3D;$\frac{t<del>3</del>-t<del>2</del>}{t<del>4</del>-t<del>1</del>}$*100% </p><p>F是一的话就是睁眼；连续N帧后便可获取关于01之间的序列，然后分析0在该序列中所占比例来描述疲劳状态。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数字图像/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E8%AF%BE%E8%AE%BE06.jpg" alt="img" style="zoom:67%;" /> ]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机就业方向</title>
      <link href="/posts/1403/"/>
      <url>/posts/1403/</url>
      
        <content type="html"><![CDATA[<h1>计算机就业方向</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>计算机认知实习是小张的一节课堂笔记，老师主要讲了关于计算机的<strong>学习方向，就业方向，以及岗位</strong>。我是在校生，对很多岗位都不了解，挺迷惑的每天，所以整理成了笔记，分享给和我一样迷茫的同学！</li><li>下面那些招聘网站是老师找的主流网站，并不是这些网站就是最适用的。我了解的还有力扣，acwing，牛客也都有招聘</li></ul><h1 id="一、计算机专业学什么？"><a href="#一、计算机专业学什么？" class="headerlink" title="一、计算机专业学什么？"></a>一、计算机专业学什么？</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">计算机领域知识组成--&gt;计算机专业知识;</span><br><span class="line">计算机领域知识组成--&gt;编程技能;</span><br><span class="line">计算机专业知识--&gt;数学;</span><br><span class="line">计算机专业知识--&gt;计算机理论;</span><br><span class="line">计算机专业知识--&gt;计算机组成原理;</span><br><span class="line">计算机专业知识--&gt;数据结构与算法;</span><br><span class="line">计算机专业知识--&gt;计算机网络;</span><br><span class="line">计算机专业知识--&gt;编译原理;</span><br><span class="line">计算机专业知识--&gt;操作系统;</span><br><span class="line"></span><br><span class="line">编程技能--&gt;编程语言;</span><br><span class="line">编程技能--&gt;需求分析;</span><br><span class="line">编程技能--&gt;软件设计;</span><br><span class="line">编程技能--&gt;开发工具;</span><br><span class="line">编程技能--&gt;项目管理;</span><br></pre></td></tr></table></figure><h1 id="二、岗位方向"><a href="#二、岗位方向" class="headerlink" title="二、岗位方向"></a>二、岗位方向</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">岗位方向--&gt;研发方向;</span><br><span class="line">岗位方向--&gt;开发方向;</span><br><span class="line">岗位方向--&gt;交叉方向;</span><br><span class="line"></span><br><span class="line">研发方向--&gt;人工智能;</span><br><span class="line">研发方向--&gt;算法设计;</span><br><span class="line">研发方向--&gt;数据方向;</span><br><span class="line">研发方向--&gt;计算机系统;</span><br><span class="line">研发方向--&gt;人机交互;</span><br><span class="line"></span><br><span class="line">开发方向--&gt;后端开发;</span><br><span class="line">开发方向--&gt;前端开发;</span><br><span class="line">开发方向--&gt;游戏开发;</span><br><span class="line">开发方向--&gt;嵌入式开发;</span><br><span class="line">开发方向--&gt;移动开发;</span><br><span class="line"></span><br><span class="line">交叉方向--&gt;生物信息;</span><br><span class="line">交叉方向--&gt;医学信息;</span><br><span class="line">交叉方向--&gt;计算化学;</span><br><span class="line">交叉方向--&gt;计算物理学;</span><br><span class="line">交叉方向--&gt;教育技术;</span><br></pre></td></tr></table></figure><p>大三上学期末应该思考未来需要做什么！</p><h2 id="1-研发方向"><a href="#1-研发方向" class="headerlink" title="1.研发方向"></a>1.研发方向</h2><p><strong>主要工作：</strong>学习现有的技术，研究新的技术和新的解决方案，重点在&#x3D;&#x3D;研&#x3D;&#x3D;字。主要面向研究生</p><p><strong>核心知识</strong></p><ul><li>数学</li><li>计算机专业知识</li><li>具体研究方向的知识</li></ul><p><strong>适合对象</strong></p><ul><li>数学好</li><li>对技术底层有兴趣</li><li>打算读研读博</li></ul><p><strong>提升</strong></p><ul><li>学历</li><li>数学与计算机专业知识</li><li>具体方向的升入理解</li></ul><p><strong>研发方向前景</strong></p><ol><li>好处</li></ol><ul><li>避免大量中低端岗位竞争</li><li>顶端人才、&#x3D;&#x3D;钱&#x3D;&#x3D;景广阔</li></ul><ol start="2"><li>坏处</li></ol><ul><li>投入成本大、反馈慢、慎重选择</li><li>建议：选择氛围好的学校</li></ul><ol start="3"><li>最终方向</li></ol><ul><li>学历</li><li>论文、职称</li><li>真正落地与版权</li></ul><h2 id="2-开发方向"><a href="#2-开发方向" class="headerlink" title="2.开发方向"></a>2.开发方向</h2><p><strong>主要工作：</strong>学习现有的技术，运用已有的技术实现需求和解决问题，<font size=4 color="red">重点在于实现和解决，非常强调实践能力。</font>在面试时有能拿得出手的作品往往能够事半功倍。</p><p><strong>基础知识一定要扎实！</strong>有基础知识，做过作品优先录用基础知识扎实的人。</p><ol><li>现状</li></ol><ul><li>跨度大，涵盖专科本科到硕士毕业生</li><li>中小型公司更要求编程技术熟练，直接上手做事</li><li>大型公司及一线大厂更看重计算机知识基础</li></ul><ol start="2"><li>根据可选择公司注意学习侧重点</li></ol><ul><li>实践能力、专业知识</li></ul><ol start="3"><li>提升方向</li></ol><ul><li>专业知识</li></ul><ol start="4"><li><p>前景</p><p> <strong>好处</strong></p></li></ol><ul><li><p>兼容性强、门槛低、上演高</p><p>  <strong>坏处</strong></p></li><li><p>内容、竞争大</p><p>  <strong>最终方向</strong></p></li><li><p>架构师，根据需求提供解决方案以及统筹团队完成能力</p></li></ul><h1 id="三、互联网公司有哪些"><a href="#三、互联网公司有哪些" class="headerlink" title="三、互联网公司有哪些"></a>三、互联网公司有哪些</h1><img src="https://inews.gtimg.com/newsapp_bt/0/12705959514/641" alt="123" style="zoom: 67%;" /><img src="https://inews.gtimg.com/newsapp_bt/0/12705959509/641" alt="1" style="zoom:67%;" /><h1 id="四、常见岗位分类"><a href="#四、常见岗位分类" class="headerlink" title="四、常见岗位分类"></a>四、常见岗位分类</h1><ol><li>网络方向(网络工程师)</li><li>运维方向(系统运维、开发运维、DEVOPS、云计算)，门槛低一丢丢</li><li>数据库方向(DBA、数据库开发)</li><li>开发方向(硬件研发、嵌入式开发、系统开发、游戏开发、算法工程师、web开发、前端开发、移动开发、Android、IOD、全栈工程师、图像、声音等),写代码最多的。(RD开发工程师)</li><li>数据方向(大数据开发、数据挖掘和分析、商务智能)</li><li>测试方向(测试工程师、自动化测试、持续集成)</li><li>项目产品方向(PE产品经理、PM项目经理、敏捷教练、DEVOPS)</li><li>安全方向(安全工程师)</li><li>新型产业(物联网、区块链、AR\VR、人工智能、机器学习)</li><li>技术管理和架构(架构师、技术Leader、技术经理、CT0)</li><li>独立开发者，自由职业者</li></ol><p><strong>中大型公司结构</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">角色--&gt;产品经理;</span><br><span class="line">角色--&gt;项目经理;</span><br><span class="line">角色--&gt;开发人员;</span><br><span class="line"></span><br><span class="line">角色--&gt;运维;</span><br><span class="line">角色--&gt;测试;</span><br><span class="line"></span><br><span class="line">产品经理--&gt;提出用户需求;</span><br><span class="line">提出用户需求--&gt;开发人员;</span><br><span class="line">项目经理--&gt;开发过程中,保证产品顺利进行架构师;</span><br><span class="line">开发人员--&gt;测试;</span><br><span class="line"></span><br><span class="line">运维--&gt;上线之后,产品运维;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、招聘网站"><a href="#五、招聘网站" class="headerlink" title="五、招聘网站"></a>五、招聘网站</h1><p><strong>综合类招聘网站</strong></p><ul><li>大街网：侧重于应届毕业生求职的综合类网站，基本都为互联网、金融、IT类</li><li>58同城：侧重于一些基层和兼职岗位</li><li>猎聘网：主要是对有一定工作经验的人提供工作岗位，且网站定位是企业寻找中高端人才</li><li>拉钩网：特的特点是拥有投递简历实时反馈的功能，通过拉勾的微信公众号就可以实时跟踪自己的建立情况</li></ul><p><strong>垂直类招聘网站</strong></p><ul><li>BOSS直聘：它的最大特色就是能够让求职者和HR直接对话，这样大大减少了不必要的中间环节</li></ul><h1 id="六、个人简历"><a href="#六、个人简历" class="headerlink" title="六、个人简历"></a>六、个人简历</h1><ul><li>个人信息不要写身份证号！</li><li>个人技能不要写“了解”字眼</li><li>简历最好一页！不要求多！</li></ul><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机认知实习/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AE%A4%E7%9F%A5%E5%AE%9E%E4%B9%A001.png" alt="image-20211227001649342" style="zoom:67%;" /><p><span style='color:#00ffff;background:#ccffff;font-size:50px;font-family:字体;'>永远不要停止学习！！！</span></p><p><strong>附一个B站视频</strong>，反复观看，给自己找个方向！</p><p><a href="https://www.bilibili.com/video/BV1YF411a75Y?spm_id_from=333.999.0.0">该无脑计算机吗？一个视频讲透计算机类所有专业！</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学 期中课设-坛子的线框模型</title>
      <link href="/posts/13031/"/>
      <url>/posts/13031/</url>
      
        <content type="html"><![CDATA[<h1 id="TIT-计算机图形学-期中课设-坛子的线框模型"><a href="#TIT-计算机图形学-期中课设-坛子的线框模型" class="headerlink" title="TIT 计算机图形学 期中课设-坛子的线框模型"></a>TIT 计算机图形学 期中课设-坛子的线框模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li><li>《计算机图形学—理论与实践项目化教程》P80页双三次贝塞尔曲面案例</li></ul><h2 id="一、课设要求"><a href="#一、课设要求" class="headerlink" title="一、课设要求"></a>一、课设要求</h2><ol><li><p>熟练掌握MFC</p></li><li><p>熟练使用集成开发环境Visual Studio</p></li><li><p>熟练掌握计算机图形学建模相关知识点</p></li><li><p>熟悉计算机图形学建模相关算法</p></li><li><p>学会使用文件流解决问题（扩展）</p></li></ol><h2 id="二、项目描述"><a href="#二、项目描述" class="headerlink" title="二、项目描述"></a>二、项目描述</h2><p>使用透视投影展现了坛子的整体，右侧将坛子的四段回转体分别展示，实现了键鼠的角度交互，可以通过↑↓←→改变坛子整体和四段回转体的角度，使用播放键可以实现坛子整体旋转效果</p><h2 id="三、项目设计"><a href="#三、项目设计" class="headerlink" title="三、项目设计"></a>三、项目设计</h2><p>坛子主要由四段Bezier曲线分别绘制坛底（D0、D1、D2、D3）、坛身1(B0、B1、B2、B3)、坛身2(B3~B4)、坛盖(L1、L2、L3、L4)，通过回转法绘制</p><p>Bezier曲线由CbezierPath绘制，每条Bezier曲线读入16个控制点，递归成100片小面，通过公式P(u,v)&#x3D;UMPM^T^ V^T^绘制出UV两个方向的曲面，每条曲线再通过四个双三次Bezier曲面回转绘制成回转体</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E4%B8%AD%E8%AF%BE%E8%AE%BE01.png" alt="image-20211221003505506"></p><h2 id="四、主要代码"><a href="#四、主要代码" class="headerlink" title="四、主要代码"></a>四、主要代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">小张的期中课设源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?p=9">双三次bezier曲面</a>，以及主页相关算法)</p><h2 id="五、运行截图"><a href="#五、运行截图" class="headerlink" title="五、运行截图"></a>五、运行截图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E4%B8%AD%E8%AF%BE%E8%AE%BE03.png" alt="image-20211221003945365" style="zoom:50%;" /><h2 id="六、项目总结"><a href="#六、项目总结" class="headerlink" title="六、项目总结"></a>六、项目总结</h2><p>在调试过程中多次出现内存不足，检查发现三维变换需要分别设置四次transform对象。分别对四个回转体设置交互时的回转角度，这样就不会出现内存不足的问题</p><p>先进行缩小再平移。如果先平移再缩小，会对之后的旋转参数有影响</p><p>关于坐标点，不容易找到合适的坐标点，先绘制出XY坐标系下大概轮廓，之后进行微调。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学 期末课设-青花瓷坛的实体模型</title>
      <link href="/posts/31515/"/>
      <url>/posts/31515/</url>
      
        <content type="html"><![CDATA[<h1 id="TIT-计算机图形学-期末课设-青花瓷坛的实体模型"><a href="#TIT-计算机图形学-期末课设-青花瓷坛的实体模型" class="headerlink" title="TIT 计算机图形学 期末课设-青花瓷坛的实体模型"></a>TIT 计算机图形学 期末课设-青花瓷坛的实体模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>实验中用到了很多知识点,这里只讲解其中的一部分,仅供参考.详细讲解可以看孔老师的视频课,具体学习程序中的类</li><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li><li>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">期末课设青花瓷坛源程序</a>，不方便访问Github的可以评论邮箱。孔老师的视频课讲的很清楚，大家去B站就可以看啦！</li></ul><ul><li>第四章贝塞尔曲线和回转体画出线框图 P106（两个人）丁兆国 刘元华</li><li>第五章使用projection类投影 P94,第三章图形的几何变换 transform类 P37（两个人）周立波</li><li>第五章消隐(ZBuffer) P94 刘元华</li><li>第七章材质(Material)、光照(Lighting、LightSource) P139（材质少，光照内容多，两个人合作一下）俞文巧 雷康哲</li><li>第八章球体映射纹理 P171（一个人）张帆</li></ul><h2 id="一、项目描述"><a href="#一、项目描述" class="headerlink" title="一、项目描述"></a>一、项目描述</h2><p>使用双三次贝塞尔曲线绘制青花瓷坛的线框模型，通过增加光照、材质、纹理，实现线框模型变为实体模型，达到模拟三维青花瓷坛的效果</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE01.png" alt="image-20211222004717597" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE02.png" alt="image-20211222004728058"></p><h2 id="二、项目设计"><a href="#二、项目设计" class="headerlink" title="二、项目设计"></a>二、项目设计</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p><strong>映射原理：</strong>双三次Bezier曲面的各处都具有了(u,v)值。将纹理uv与曲面uv同时规范化到[0,1]区间内，当查找到曲面纹理时，先将曲面uv放大到和纹理位图一样大小的尺寸，然后获取对应纹理图像上的颜色作为曲面上该点的漫反射率系数</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE03.png" alt="image-20211222004836832"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE04.png" alt="image-20211222004913153"></p><p><strong>2.背面剔除算法原理:</strong></p><p>视矢量与小平面法矢量的点积大于等于零(<strong>n·v</strong>&gt;&#x3D;0)，cosα&gt;0，表面可见</p><p>1.使用四边形网格的顶点计算面矢量并归一化</p><p>2.使用四边形网格的第一顶点与视点，计算矢量并归一化</p><p>3.计算法矢量与视矢量的点积，如果其值大于等于零，则绘制该网格，否则剔除该网格</p><p><strong>3.球体图像纹理映射原理</strong></p><p><strong>3.1读入位图</strong></p><p>纹理来自于位图，将位图作为资源导入，位图由DIB格式自动转换为DDB格式，每行存储4个字节的颜色数据，将位图转储到一维颜色数组中，就可以根据曲面网格点与位图去查询位图像素点的颜色，并将其作为材质的漫反射率和环境反射率，从而实现了将位图绑定到物体表面上</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE05.png" alt="image-20211215193043390"></p><p><strong>4.算法步骤</strong></p><p>1.将图像纹理加载到资源标签页中，将位图数据保存到一维数组中</p><p>2.定义revolution回转类，读入顶点表和表面表，圆环面全部细分为四边形网格</p><p>3.将位图绑定到回转体的顶点上</p><p>4.根据光源的位置，数量，视点的位置，材质属性，构造三维光照场景</p><p>5.使用画家算法，剔除回转体的不可见网格</p><p>6.使用三维透视投影算法，将回转体三维多边形投影为屏幕三维四边形</p><p>7.根据网格点的法矢量，插值计算小面内每一点的法矢量，将纹理作为该点的材质，调用光照模型计算小面内该点的光强</p><p>8.使用定时器改变圆环的转角生成旋转动画</p><h3 id="2-相关算法"><a href="#2-相关算法" class="headerlink" title="2.相关算法"></a>2.相关算法</h3><p><strong>PhongShader算法：</strong>对顶点的法矢量进行插值，得到小面内每一点的法矢量。对小面内的每一点都调用光照模型计算光强。计算光强需要四个参数，视点位置、当前点三维坐标、当前点法矢量、当前点的材质属性。如果当前点的材质的漫反射率取自一幅图像的相应点，这就为该物体添加了纹理。</p><p>向量线性插值计算：</p><p>v(t)&#x3D;(tEnd-t)&#x2F;(tEnd-tStart)*vStart+(t-tStart)&#x2F;(tEnd-tStart)*vEnd;</p><p>t表示第一个向量的x(y)方向单位向量，tStart表示第一个点的x(y)方向单位向量，tEnd表示第二个点的x(y)方向单位向量，vStart起点的法向量，vEnd表示第二个点的法向量。</p><p>计算光强公式：</p><p><strong>I&#x3D;I<del>e</del> +I<del>d</del>+I<del>s</del> &#x3D;k<del>a</del>I<del>a</del>+f(d)[K<del>d</del>I<del>p</del>max(N·L,0)+k<del>s</del>I<del>p</del>max(N·H)^n^]</strong></p><p>计算物体表面上任意一点P的光强I时，必须确定物体表面的单位矢量L、单位中分矢量H、单位法矢量N以及材质的漫反射率kd。当光源位置和视点位置不变时，光矢量L和中分矢量H是一个定值。影响光强的只有漫反射率kd和单位法矢量N。</p><p><strong>Zbuffer算法：</strong>通过使用处理深度缓冲器，若当前点的深度值小于缓冲器中的深度值，则说明当前点离视点近，使用SetPixelV函数绘制当前点，否则放弃当前点。</p><p>当前像素点的深度值：<strong>z(x,y)&#x3D;-$\frac{Ax+By+D}{C}$,C≠0;</strong></p><p>A,B,C代表法向量的坐标</p><h3 id="3-模型"><a href="#3-模型" class="headerlink" title="3.模型"></a>3.模型</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%9C%9F%E6%9C%AB%E8%AF%BE%E8%AE%BE08.png" alt="image-20220103234134907"></p><h2 id="三、部分代码"><a href="#三、部分代码" class="headerlink" title="三、部分代码"></a>三、部分代码</h2><h3 id="1-导入位图-格式为bmp"><a href="#1-导入位图-格式为bmp" class="headerlink" title="1.导入位图,格式为bmp"></a>1.导入位图,格式为bmp</h3><h3 id="2-Texture类"><a href="#2-Texture类" class="headerlink" title="2.Texture类"></a>2.Texture类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CTexture</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CTexture</span>(<span class="type">void</span>);</span><br><span class="line"><span class="keyword">virtual</span>~<span class="built_in">CTexture</span>(<span class="type">void</span>);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrepareBitmap</span><span class="params">(UINT nIDResource)</span></span>;<span class="comment">//准备位图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteObject</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//释放位图</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BYTE* image;<span class="comment">//存储位图一维数组</span></span><br><span class="line">BITMAP bmp;<span class="comment">//BITMAP结构体变量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CTexture::<span class="built_in">CTexture</span>(<span class="type">void</span>)<span class="comment">//数组初始化为空</span></span><br><span class="line">&#123;</span><br><span class="line">image = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CTexture::~<span class="built_in">CTexture</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTexture::PrepareBitmap</span><span class="params">(UINT nIDResource)</span><span class="comment">//准备位图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CBitmap NewBitmap;<span class="comment">//DDB</span></span><br><span class="line">NewBitmap.<span class="built_in">LoadBitmap</span>(nIDResource);<span class="comment">//从资源视图中读入位图存储到Newbitmap中</span></span><br><span class="line">NewBitmap.<span class="built_in">GetBitmap</span>(&amp;bmp);<span class="comment">//将CBitmap的信息保存到Bitmap结构体中，目的是为了得到图像的高度和宽度</span></span><br><span class="line"><span class="type">int</span> nbytesize = bmp.bmWidthBytes * bmp.bmHeight;<span class="comment">//计算位图字节数</span></span><br><span class="line">image = <span class="keyword">new</span> BYTE[nbytesize];</span><br><span class="line">NewBitmap.<span class="built_in">GetBitmapBits</span>(nbytesize, (LPVOID)image);<span class="comment">//将位图数据赋值到一维数组image中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTexture::DeleteObject</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//释放位图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != image)</span><br><span class="line"><span class="keyword">delete</span> []image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在贝塞尔曲线类中绑定纹理对象"><a href="#3-在贝塞尔曲线类中绑定纹理对象" class="headerlink" title="3.在贝塞尔曲线类中绑定纹理对象"></a>3.在贝塞尔曲线类中绑定纹理对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CBezierPatch::Tessellation</span><span class="params">(CMesh Mesh)</span><span class="comment">//细分曲面函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> M[<span class="number">4</span>][<span class="number">4</span>];<span class="comment">//系数矩阵M</span></span><br><span class="line">M[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">-1</span>, M[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">3</span>,  M[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">-3</span>, M[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">M[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span>,  M[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">-6</span>, M[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">3</span>,  M[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">M[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">-3</span>, M[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">3</span>,  M[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>,  M[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">M[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">1</span>,  M[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>,  M[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">0</span>,  M[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">CP3 P3[<span class="number">4</span>][<span class="number">4</span>];<span class="comment">//曲线计算用控制点数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">P3[i][j] = CtrPt[i][j];</span><br><span class="line"><span class="built_in">LeftMultiplyMatrix</span>(M, P3);<span class="comment">//系数矩阵左乘三维点矩阵</span></span><br><span class="line"><span class="built_in">TransposeMatrix</span>(M);<span class="comment">//计算转置矩阵</span></span><br><span class="line"><span class="built_in">RightMultiplyMatrix</span>(P3, M);<span class="comment">//系数矩阵右乘三维点矩阵</span></span><br><span class="line"><span class="type">double</span> u0, u1, u2, u3, v0, v1, v2, v3;<span class="comment">//u，v参数的幂</span></span><br><span class="line"><span class="type">double</span> u[<span class="number">4</span>] = &#123; Mesh.BL.u,Mesh.BR.u ,Mesh.TR.u ,Mesh.TL.u &#125;;</span><br><span class="line"><span class="type">double</span> v[<span class="number">4</span>] = &#123; Mesh.BL.v,Mesh.BR.v ,Mesh.TR.v ,Mesh.TL.v &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">u3 = <span class="built_in">pow</span>(u[i], <span class="number">3.0</span>), u2 = <span class="built_in">pow</span>(u[i], <span class="number">2.0</span>), u1 = u[i], u0 = <span class="number">1</span>;</span><br><span class="line">v3 = <span class="built_in">pow</span>(v[i], <span class="number">3.0</span>), v2 = <span class="built_in">pow</span>(v[i], <span class="number">2.0</span>), v1 = v[i], v0 = <span class="number">1</span>;</span><br><span class="line">quadrP[i] = (u3 * P3[<span class="number">0</span>][<span class="number">0</span>] + u2 * P3[<span class="number">1</span>][<span class="number">0</span>] + u1 * P3[<span class="number">2</span>][<span class="number">0</span>] + u0 * P3[<span class="number">3</span>][<span class="number">0</span>]) * v3</span><br><span class="line">+ (u3 * P3[<span class="number">0</span>][<span class="number">1</span>] + u2 * P3[<span class="number">1</span>][<span class="number">1</span>] + u1 * P3[<span class="number">2</span>][<span class="number">1</span>] + u0 * P3[<span class="number">3</span>][<span class="number">1</span>]) * v2</span><br><span class="line">+ (u3 * P3[<span class="number">0</span>][<span class="number">2</span>] + u2 * P3[<span class="number">1</span>][<span class="number">2</span>] + u1 * P3[<span class="number">2</span>][<span class="number">2</span>] + u0 * P3[<span class="number">3</span>][<span class="number">2</span>]) * v1</span><br><span class="line">+ (u3 * P3[<span class="number">0</span>][<span class="number">3</span>] + u2 * P3[<span class="number">1</span>][<span class="number">3</span>] + u1 * P3[<span class="number">2</span>][<span class="number">3</span>] + u0 * P3[<span class="number">3</span>][<span class="number">3</span>]) * v0;</span><br><span class="line">quadrT[i].u = (pTexture-&gt;bmp.bmWidth - <span class="number">1</span>) * u[i]; </span><br><span class="line">quadrT[i].v = (pTexture-&gt;bmp.bmHeight - <span class="number">1</span>) * v[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>22~27绑定纹理到四边形网格上，u、v数组是曲面四边形网格的顶点，quadrTu、quadrTv数组是相应纹理的顶点(没有计算四边形网格细分点的法向量，后续将使用球体的位置向量代替法向量)</p><h3 id="4-ZBuffer"><a href="#4-ZBuffer" class="headerlink" title="4.ZBuffer"></a>4.ZBuffer</h3><p>ZBuffer类中的PhongShader函数中，读取纹理位图的颜色数据，并将其设置为材质的漫反射率和环境反射率</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读入三角形每个顶点的坐标、点法向量和纹理坐标</span></span><br><span class="line"><span class="type">void</span> SetPoint</span><br><span class="line"><span class="comment">//纹理坐标插值函数</span></span><br><span class="line"><span class="type">void</span> LinearInterp</span><br><span class="line"><span class="comment">//顶点排序</span></span><br><span class="line"><span class="type">void</span> SortVertex</span><br><span class="line"><span class="comment">//定义纹理读取函数，该函数使用纹理坐标读出纹素的颜色值</span></span><br><span class="line"><span class="comment">/*从位图左下角开始读取，从而保证位图正向绘制*/</span></span><br><span class="line"><span class="type">void</span> GetTexture</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CZBuffer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CZBuffer</span>(<span class="type">void</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CZBuffer</span>(<span class="type">void</span>);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InitialDepthBuffer</span><span class="params">(<span class="type">int</span> nWidth, <span class="type">int</span> nHeight, <span class="type">double</span> zDepth)</span></span>;<span class="comment">//初始化深度缓冲区</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetPoint</span><span class="params">(CP3 P0, CP3 P1, CP3 P2, CVector3 N0, CVector3 N1, CVector3 N2, CT2 T0, CT2 T1, CT2 T2)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PhongShader</span><span class="params">(CDC* pDC, CP3 ViewPoint, CLighting* pLight, CMaterial* pMaterial, CTexture* pTexture)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SortVertex</span><span class="params">(<span class="type">void</span>)</span></span>;<span class="comment">//顶点排序</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">EdgeFlag</span><span class="params">(CPoint2 PStart, CPoint2 PEnd, BOOL bFeature)</span></span>;<span class="comment">//边标记</span></span><br><span class="line">    <span class="function">CVector3 <span class="title">LinearInterp</span><span class="params">(<span class="type">double</span> t, <span class="type">double</span> tStart, <span class="type">double</span> tEnd, CVector3 vStart, CVector3 vEnd)</span></span>;<span class="comment">//向量线性插值</span></span><br><span class="line">    <span class="function">CT2 <span class="title">LinearInterp</span><span class="params">(<span class="type">double</span> t, <span class="type">double</span> tStart, <span class="type">double</span> tEnd, CT2 texStart, CT2 texEnd)</span></span>;<span class="comment">//纹理坐标线性插值</span></span><br><span class="line">    <span class="function">CRGB <span class="title">GetTexture</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, CTexture* pTexture)</span></span>;<span class="comment">//读取纹理</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    CP3 P0, P1, P2;<span class="comment">//三角形的浮点数顶点</span></span><br><span class="line">    CPoint3 point0, point1, point2;<span class="comment">//三角形的整数顶点坐标</span></span><br><span class="line">    CPoint2* SpanLeft; <span class="comment">//跨度的起点数组标志</span></span><br><span class="line">    CPoint2* SpanRight;<span class="comment">//跨度的终点数组标志</span></span><br><span class="line">    <span class="type">int</span> nIndex;<span class="comment">//记录扫描线条数</span></span><br><span class="line">    <span class="type">double</span>** zBuffer;<span class="comment">//深度缓冲区</span></span><br><span class="line">    <span class="type">int</span> nWidth, nHeight;<span class="comment">//缓冲区宽度与高度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CZBuffer::<span class="built_in">CZBuffer</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    zBuffer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CZBuffer::~<span class="built_in">CZBuffer</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nWidth; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] zBuffer[i];</span><br><span class="line">        zBuffer[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (zBuffer != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> zBuffer;</span><br><span class="line">        zBuffer = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读入三角形每个顶点的坐标、点法向量和纹理坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CZBuffer::SetPoint</span><span class="params">(CP3 P0, CP3 P1, CP3 P2, CVector3 N0, CVector3 N1, CVector3 N2, CT2 T0, CT2 T1, CT2 T2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;P0 = P0, <span class="keyword">this</span>-&gt;P1 = P1, <span class="keyword">this</span>-&gt;P2 = P2;</span><br><span class="line">    <span class="comment">//P0点对应的纹理坐标</span></span><br><span class="line">    point0.x = <span class="built_in">ROUND</span>(P0.x);</span><br><span class="line">    point0.y = <span class="built_in">ROUND</span>(P0.y);</span><br><span class="line">    point0.z = P0.z;</span><br><span class="line">    point0.c = P0.c;</span><br><span class="line">    point0.n = N0;</span><br><span class="line">    point0.t = T0;</span><br><span class="line">    <span class="comment">//P1点对应的纹理坐标</span></span><br><span class="line">    point1.x = <span class="built_in">ROUND</span>(P1.x);</span><br><span class="line">    point1.y = <span class="built_in">ROUND</span>(P1.y);</span><br><span class="line">    point1.z = P1.z;</span><br><span class="line">    point1.c = P1.c;</span><br><span class="line">    point1.n = N1;</span><br><span class="line">    point1.t = T1;</span><br><span class="line">    <span class="comment">//P2点对应的纹理坐标</span></span><br><span class="line">    point2.x = <span class="built_in">ROUND</span>(P2.x);</span><br><span class="line">    point2.y = <span class="built_in">ROUND</span>(P2.y);</span><br><span class="line">    point2.z = P2.z;</span><br><span class="line">    point2.c = P2.c;</span><br><span class="line">    point2.n = N2;</span><br><span class="line">    point2.t = T2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CZBuffer::PhongShader</span><span class="params">(CDC* pDC, CP3 ViewPoint, CLighting* pLight, CMaterial* pMaterial, CTexture* pTexture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span>CurrentDepth = <span class="number">0.0</span>;<span class="comment">//当前扫描线的深度</span></span><br><span class="line">    <span class="function">CVector3 <span class="title">Vector01</span><span class="params">(P0, P1)</span>, <span class="title">Vector02</span><span class="params">(P0, P2)</span></span>;</span><br><span class="line">    CVector3 fNormal = <span class="built_in">CrossProduct</span>(Vector01, Vector02);</span><br><span class="line">    <span class="type">double</span> A = fNormal.x, B = fNormal.y, C = fNormal.z;<span class="comment">//平面方程Ax+By+Cz＋D=0的系数</span></span><br><span class="line">    <span class="type">double</span> D = -A * P0.x - B * P0.y - C * P0.z;<span class="comment">//当前扫描线随着x增长的深度步长</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(C) &lt; <span class="number">1e-4</span>)</span><br><span class="line">        C = <span class="number">1.0</span>;</span><br><span class="line">    <span class="type">double</span> DepthStep = -A / C;<span class="comment">//计算扫描线深度步长增量</span></span><br><span class="line">    <span class="built_in">SortVertex</span>();</span><br><span class="line">    <span class="comment">//定义三角形覆盖的扫描线条数</span></span><br><span class="line">    <span class="type">int</span> nTotalLine = point1.y - point0.y + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//定义span的起点与终点数组</span></span><br><span class="line">    SpanLeft = <span class="keyword">new</span> CPoint2[nTotalLine];</span><br><span class="line">    SpanRight = <span class="keyword">new</span> CPoint2[nTotalLine];</span><br><span class="line">    <span class="comment">//判断三角形与P0P1边的位置关系，0-1-2为右手系</span></span><br><span class="line">    <span class="type">int</span> nDeltz = (point1.x - point0.x) * (point2.y - point1.y) - (point1.y - point0.y) * (point2.x - point1.x);<span class="comment">//点向量叉积的z坐标</span></span><br><span class="line">    <span class="keyword">if</span> (nDeltz &gt; <span class="number">0</span>)<span class="comment">//三角形位于P0P1边的左侧</span></span><br><span class="line">    &#123;</span><br><span class="line">        nIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point0, point2, TRUE);</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point2, point1, TRUE);</span><br><span class="line">        nIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point0, point1, FALSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//三角形位于P0P1边的右侧</span></span><br><span class="line">    &#123;</span><br><span class="line">        nIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point0, point1, TRUE);</span><br><span class="line">        nIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point0, point2, FALSE);</span><br><span class="line">        <span class="built_in">EdgeFlag</span>(point2, point1, FALSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = point0.y; y &lt; point1.y; y++)<span class="comment">//下闭上开</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = y - point0.y;</span><br><span class="line">        BOOL bInFlag = FALSE;<span class="comment">//跨度内外测试标志，初始值为假表示三角形外部</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = SpanLeft[n].x; x &lt; SpanRight[n].x; x++)<span class="comment">//左闭右开</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bInFlag == FALSE)</span><br><span class="line">            &#123;</span><br><span class="line">                CurrentDepth = -(A * x + B * y + D) / C;<span class="comment">//z=-(Ax+By+D)/C</span></span><br><span class="line">                bInFlag = TRUE;</span><br><span class="line">                x -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">            通过对三角形跨度端点的法向量进行线性插值，得到的当前点的归一化法向量(ptNormal)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">                CVector3 ptNormal = <span class="built_in">LinearInterp</span>(x, SpanLeft[n].x, SpanRight[n].x, SpanLeft[n].n, SpanRight[n].n);</span><br><span class="line">                ptNormal = ptNormal.<span class="built_in">Normalize</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                通过对三角形跨度两端点的纹理坐标进行线性插值，得到当前点的纹理坐标</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                CT2 Texture = <span class="built_in">LinearInterp</span>(x, SpanLeft[n].x, SpanRight[n].x, SpanLeft[n].t, SpanRight[n].t);<span class="comment">//纹理坐标线性插值</span></span><br><span class="line">                Texture.c = <span class="built_in">GetTexture</span>(<span class="built_in">ROUND</span>(Texture.u), <span class="built_in">ROUND</span>(Texture.v), pTexture);<span class="comment">//读取纹理颜色</span></span><br><span class="line">                pMaterial-&gt;<span class="built_in">SetDiffuse</span>(Texture.c);<span class="comment">//纹理作为材质漫反射率</span></span><br><span class="line">                pMaterial-&gt;<span class="built_in">SetAmbient</span>(Texture.c);<span class="comment">//纹理作为材质环境反射率</span></span><br><span class="line">                CRGB Intensity = pLight-&gt;<span class="built_in">Illuminate</span>(ViewPoint, <span class="built_in">CP3</span>(x, y, CurrentDepth), ptNormal, pMaterial);<span class="comment">//Intensity计算当前点的光强</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                处理深度缓冲器，若当前点的深度值小于缓冲器中的深度值，则说明当前点离视点近，使用SetPixelV函数绘制当前点，否则放弃当前点</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (CurrentDepth &lt;= zBuffer[x + nWidth / <span class="number">2</span>][y + nHeight / <span class="number">2</span>])<span class="comment">//ZBuffer算法</span></span><br><span class="line">                &#123;</span><br><span class="line">                    zBuffer[x + nWidth / <span class="number">2</span>][y + nHeight / <span class="number">2</span>] = CurrentDepth;</span><br><span class="line">                    pDC-&gt;<span class="built_in">SetPixelV</span>(x, y, <span class="built_in">COLOR</span>(Intensity));</span><br><span class="line">                &#125;</span><br><span class="line">                CurrentDepth += DepthStep;<span class="comment">//更新当前点的深度值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (SpanLeft)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]SpanLeft;</span><br><span class="line">        SpanLeft = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (SpanRight)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]SpanRight;</span><br><span class="line">        SpanRight = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CZBuffer::EdgeFlag</span><span class="params">(CPoint2 PStart, CPoint2 PEnd, BOOL bFeature)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx = PEnd.x - PStart.x;</span><br><span class="line">    <span class="type">int</span> dy = PEnd.y - PStart.y;</span><br><span class="line">    <span class="type">double</span> m = <span class="built_in">double</span>(dx) / dy;</span><br><span class="line">    <span class="type">double</span> x = PStart.x;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对跨度两边的纹理坐标进行线性插值，并将纹理值加入跨度左右数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = PStart.y; y &lt; PEnd.y; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        CVector3 ptNormal = <span class="built_in">LinearInterp</span>(y, PStart.y, PEnd.y, PStart.n, PEnd.n);</span><br><span class="line">        CT2 Texture = <span class="built_in">LinearInterp</span>(y, PStart.y, PEnd.y, PStart.t, PEnd.t);</span><br><span class="line">        <span class="keyword">if</span> (bFeature)</span><br><span class="line">            SpanLeft[nIndex++] = <span class="built_in">CPoint2</span>(<span class="built_in">ROUND</span>(x), y, ptNormal, Texture);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            SpanRight[nIndex++] = <span class="built_in">CPoint2</span>(<span class="built_in">ROUND</span>(x), y, ptNormal, Texture);</span><br><span class="line">        x += m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CZBuffer::SortVertex</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CPoint3 pt[<span class="number">3</span>];</span><br><span class="line">    pt[<span class="number">0</span>] = point0;</span><br><span class="line">    pt[<span class="number">1</span>] = point1;</span><br><span class="line">    pt[<span class="number">2</span>] = point2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (pt[j].y &lt; pt[min].y)</span><br><span class="line">                min = j;</span><br><span class="line">        CPoint3 pTemp = pt[i];</span><br><span class="line">        pt[i] = pt[min];</span><br><span class="line">        pt[min] = pTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    point0 = pt[<span class="number">0</span>];</span><br><span class="line">    point1 = pt[<span class="number">2</span>];</span><br><span class="line">    point2 = pt[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">纹理坐标插值函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CVector3 <span class="title">CZBuffer::LinearInterp</span><span class="params">(<span class="type">double</span> t, <span class="type">double</span> tStart, <span class="type">double</span> tEnd, CVector3 vStart, CVector3 vEnd)</span><span class="comment">//向量线性插值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CVector3 vector;</span><br><span class="line">    vector = (tEnd - t) / (tEnd - tStart) * vStart + (t - tStart) / (tEnd - tStart) * vEnd;</span><br><span class="line">    <span class="keyword">return</span> vector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CT2 <span class="title">CZBuffer::LinearInterp</span><span class="params">(<span class="type">double</span> t, <span class="type">double</span> tStart, <span class="type">double</span> tEnd, CT2 texStart, CT2 texEnd)</span><span class="comment">//纹理坐标线性插值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CT2 texture;</span><br><span class="line">    texture = (t - tEnd) / (tStart - tEnd) * texStart + (t - tStart) / (tEnd - tStart) * texEnd;</span><br><span class="line">    <span class="keyword">return</span> texture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CZBuffer::InitialDepthBuffer</span><span class="params">(<span class="type">int</span> nWidth, <span class="type">int</span> nHeight, <span class="type">double</span> zDepth)</span><span class="comment">//初始化深度缓冲</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;nWidth = nWidth, <span class="keyword">this</span>-&gt;nHeight = nHeight;</span><br><span class="line">    zBuffer = <span class="keyword">new</span> <span class="type">double</span> *[nWidth];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nWidth; i++)</span><br><span class="line">        zBuffer[i] = <span class="keyword">new</span> <span class="type">double</span>[nHeight];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nWidth; i++)<span class="comment">//初始化深度缓冲</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nHeight; j++)</span><br><span class="line">            zBuffer[i][j] = zDepth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义纹理读取函数，该函数使用纹理坐标读出纹素的颜色值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">CRGB <span class="title">CZBuffer::GetTexture</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, CTexture* pTexture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v = pTexture-&gt;bmp.bmHeight - <span class="number">1</span> - v;<span class="comment">/*从位图左下角开始读取，从而保证位图正向绘制*/</span></span><br><span class="line">    <span class="comment">/*检测图片的边界，防止越界*/</span></span><br><span class="line">    <span class="keyword">if</span> (u &lt; <span class="number">0</span>) u = <span class="number">0</span>;<span class="comment">/*左*/</span> <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v = <span class="number">0</span>;<span class="comment">/*下*/</span></span><br><span class="line">    <span class="keyword">if</span> (u &gt; pTexture-&gt;bmp.bmWidth - <span class="number">1</span>) u = pTexture-&gt;bmp.bmWidth - <span class="number">1</span>;<span class="comment">/*右*/</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt; pTexture-&gt;bmp.bmHeight - <span class="number">1</span>)v = pTexture-&gt;bmp.bmHeight - <span class="number">1</span>;<span class="comment">/*上*/</span></span><br><span class="line">    <span class="comment">/*查找对应纹理空间的颜色值*/</span></span><br><span class="line">    <span class="type">int</span> position = v * pTexture-&gt;bmp.bmWidthBytes + <span class="number">4</span> * u;<span class="comment">//循环每一列，每行读四个字节，计算纹理坐标的位置</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    颜色在内存中排列方式是BGR，所以image数组的索引position代表B，+1代表G，+2代表R</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">CRGB</span>(pTexture-&gt;image[position + <span class="number">2</span>] / <span class="number">255.0</span>, pTexture-&gt;image[position + <span class="number">1</span>] / <span class="number">255.0</span>, pTexture-&gt;image[position] / <span class="number">255.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、整体设计步骤"><a href="#四、整体设计步骤" class="headerlink" title="四、整体设计步骤"></a>四、整体设计步骤</h2><p>回转体模型主要分为四个回转体对象，十二个控制点，分别是revoBody1坛身主体1, revoBody2坛身主体2, revoBottom坛底,和revoLid坛盖</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A621.png" alt="image-20211215213034410" style="zoom:50%;" /><p>十二个控制点模拟四段三次贝塞尔曲线，每个回转体读入控制点(ReadCubicBezierControlPoint)分别调用回转类(CRevolution::DrawRevolutionSurface),DrawRevolutionSurface完成曲面绘制</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A622.png" alt="image-20211215215301486" style="zoom:50%;" /><p>在线框模型的基础上，添加了光照与材质以及纹理来实现将线框模型变为实体模型，这里是光照与材质</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A623.png" alt="image-20211215215323176"></p><p>这里初始化光照，使用了一个光源</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A624.png" alt="image-20211215215337177" style="zoom:67%;" /><p>这里读入位图，为每个回转体设置纹理</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A625.png" alt="image-20211216001646721"></p><p>这里使用的是球体图像纹理映射实现回转体的实体模型，将两张位图映射到四个对象上</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A626.png" alt="image-20211215215651936"></p><p>CBezierPatch::Tessellation,这里是顶点的纹理绑定，一个回转体上贴四张图片</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A627.png" alt="image-20211215234711188"></p><p>(往下滑看下PhongShader)调用ZBuffer算法进行填充</p><p>SetPoint读入三角形每个顶点的坐标、点法向量和纹理坐标</p><p>SortVertex对顶点排序</p><p>这里应用了PhongShader算法(ZBuffer类)，法向量线性插值和纹理坐标线性插值算法，将纹理颜色作为材质的漫反射率和材质的环境反射率</p><p>LinearInterp纹理坐标线性插值计算，(LinearInterp)得到的当前点的归一化法向量(ptNormal)，(LinearInterp) 通过对三角形跨度两端点的纹理坐标进行线性插值，得到当前点的纹理坐标</p><p>根据纹理地址使用使用GetTexture,定义纹理读取函数，使用纹理坐标读出纹素的颜色值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pMaterial-&gt;<span class="built_in">SetDiffuse</span>(Texture.c);<span class="comment">//纹理作为材质漫反射率</span></span><br><span class="line">pMaterial-&gt;<span class="built_in">SetAmbient</span>(Texture.c);<span class="comment">//纹理作为材质环境反射率</span></span><br><span class="line">CRGB Intensity = pLight-&gt;<span class="built_in">Illuminate</span>(ViewPoint, <span class="built_in">CP3</span>(x, y, CurrentDepth), ptNormal, pMaterial);</span><br><span class="line"><span class="comment">//用设置为纹理颜色的材质作为这一点的参数计算他的光强</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A628.png" alt="image-20211216211153505" style="zoom: 67%;" /><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>通过本次课程设计，了解了微软是以从左上读入位图数据。而Ctexture类中从位图左下角开始读取，目的是为了保证位图正向绘制。</p><p>PhongShader算法中，利用了向量线性插值计算，通过对纹理坐标线性插值计算得到归一化法向量。通过对三角形跨度两端点的纹理坐标进行线性插值，得到当前点的纹理坐标。</p><p>Zbuffer算法中，利用了深度缓冲器，通过计算该点的深度值来判断是否绘制该像素点</p>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB前端开发实践 仿Apple官网首页 HTML+CSS+JS</title>
      <link href="/posts/59225/"/>
      <url>/posts/59225/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB前端开发实践-仿Apple官网首页-HTML-CSS-JS"><a href="#WEB前端开发实践-仿Apple官网首页-HTML-CSS-JS" class="headerlink" title="WEB前端开发实践 仿Apple官网首页 HTML+CSS+JS"></a>WEB前端开发实践 仿Apple官网首页 HTML+CSS+JS</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>凌晨兴起写的，修改了好多，有一丢丢乱，但是界面效果在</li><li>静态页面，没有后端数据，只是单一的HTML</li><li><a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/HTML5">自写的APPLE、小米源码</a>，严禁盗用</li></ul><h2 id="二、图片资源"><a href="#二、图片资源" class="headerlink" title="二、图片资源"></a>二、图片资源</h2><p>这里用了一些<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a>，使用了如下几个矢量图。使用教程参考我的另一篇<a href="https://blog.csdn.net/qq_49488584/article/details/122162922?spm=1001.2014.3001.5501">iconfont-阿里巴巴矢量图标库使用教程_鬼才小张同学的博客-CSDN博客</a>。(矢量图使用CSS样式导入图标，比直接导入img效果更好)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/web%E5%BC%80%E5%8F%9101.png" alt="image-20211226193337669"></p><p><strong>1.即使好礼苹果.jpg</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/web%E5%BC%80%E5%8F%9102.jpg" alt="即使好礼苹果"></p><p><strong>2.iPone 13 Pro.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9103.jpg" alt="iPhone 13 Pro" style="zoom:25%;" /><p><strong>3.iPhone 13.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9104.jpg" alt="iPhone13" style="zoom:25%;" /><p><strong>4.好礼1.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9105.jpg" alt="好礼1" style="zoom: 67%;" /><p><strong>5.好礼2.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9106.jpg" alt="好礼2" style="zoom: 67%;" /><p><strong>6.好礼3.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9107.jpg" alt="好礼3" style="zoom: 67%;" /><p><strong>7.Last1.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9108.jpg" alt="Last6" style="zoom:50%;" /><p><strong>8.Last2.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9109.jpg" alt="Last1" style="zoom:50%;" /><p><strong>9.Last3.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9110.jpg" alt="Last2" style="zoom: 50%;" /><p><strong>10.Last4.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9111.jpg" alt="Last3" style="zoom:50%;" /><p><strong>11.Last5.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9112.jpg" alt="Last4" style="zoom:50%;" /><p><strong>12.Last6.jpg</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9113.jpg" alt="Last5" style="zoom:50%;" /><h2 id="三、主要代码"><a href="#三、主要代码" class="headerlink" title="三、主要代码"></a>三、主要代码</h2><p><strong>3.1Apple.html</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Apple(中国大陆)-官方网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/APPLE.css&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/iconfont.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/鼠标.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--整个页面大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 顶部框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-text&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                        &lt;广告&gt;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--撑高度--&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--导航栏框--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe71c;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商店<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Mac<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iPad<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Watch<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>AirPorts<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Apple独家<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配件<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>技术支持<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe606;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe609;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 主体内容栏--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 在线选购部分 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-x&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>在线选购<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,享受免费送货、Specialist 专家支持、免息分期等服务<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--好礼部分--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-head&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/即使好礼苹果.jpg&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>及时好礼，人见人爱<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>选购好礼 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 300px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: -10px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/好礼1.jpg&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 200px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/好礼2.jpg&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 15px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/好礼3.jpg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--iphone 13Pro--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-13Pro&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:-150px ;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/iPhone%2013%20Pro.jpg&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: -700px;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>iPhone 13 Pro <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: -10px;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>强的很 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: -20px;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>进一步了解 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购买 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- iphone 13--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-13&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 100px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/iPhone13.jpg&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: -700px;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one1&quot;</span>&gt;</span>iPhone 13 Pro <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;three1&quot;</span>&gt;</span>解锁超能力<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;three1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>进一步了解 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购买 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;seven&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/05.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- ipad air--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-Last&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-Lastn&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last1.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last2.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last3.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last4.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last5.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last6.jpg&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/Last6.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--底部信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot-top&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span> *所示的 iPhone 13 128GB 机型价格是使用 iPhone 12 128GB 机型进行折抵换购的价格。上述所示机型的分期付款金额是在使用 iPhone 12 128GB</span><br><span class="line">                    机型进行折抵后，</span><br><span class="line">                    再以招商银行、中国工商银行或花呗 24 期免息分期付款方式估算得出的整数金额 (未显示小数点以后的金额)，实际支付金额以银行或花呗账单为准。</span><br><span class="line">                    本优惠活动暂定截止日期为 2021 年 12 月 30 日，可能视情况延长。折抵金额仅可在限定时间内使用，并且要求用于购买新 iPhone，以限制条款为准。</span><br><span class="line">                    实际折抵金额取决于设备的状况、配置、制造年份，以及发售国家或地区。银行或花呗可能要求你的可用信用额度大于所购买产品的总金额，才能使用分期付款服务。</span><br><span class="line">                    有关信用卡或花呗分期服务的申请及使用问题，请与银行或花呗联系，Apple 对此不做任何承诺和保证。</span><br><span class="line">                    Apple 的折抵换购活动为 Apple 与 Apple 折抵服务合作伙伴共同推出，年满 18 周岁及以上者才能享受此项折抵换购服务。</span><br><span class="line">                    店内折抵换购需出示政府颁发并附有照片的有效身份证件 (当地法律可能会要求存储该信息)。</span><br><span class="line">                    可能需要遵守 Apple 或 Apple 折抵服务合作伙伴的其他条款。本优惠不能与 Apple 的其他优惠或折扣活动同时使用。</span><br><span class="line">                    如需了解更多免息分期付款信息，请点击此处。</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>** 仅限新订阅用户。当试用期结束后，会员方案将按月自动续订。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--hr 划横线--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot-list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-first&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;foot-title&quot;</span>&gt;</span>选购及了解<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mac<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPad<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPhone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Watch<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Music<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>iTunes<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>HomePod<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>iPod touch<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>配件<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>App Store 充值卡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-first&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;foot-title&quot;</span>&gt;</span>Apple Store 商店<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>查找零售店<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Senius Bar 天才吧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Today at Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple 夏令营<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Field Trip 课外活动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple Store APP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>翻新和优惠<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>分期付款<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple GiveBack 回馈计划<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>订单状态<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>选购帮助<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">cLass</span>=<span class="string">&quot;list-first&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;foot-title&quot;</span>&gt;</span>教育应用<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple 与教育<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>高校师生选购<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>商务应用<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple 与商务<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>商务选购<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-first&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;foot-title&quot;</span>&gt;</span>账户<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>管理你的Apple ID<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple Store 账户<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>iCloud.com<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple 价值观<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>辅助功能<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>环境责任<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>隐私<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>供应商责任<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-first&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;foot-title&quot;</span>&gt;</span>关于 Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Newsroom<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple 管理层<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作机会<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>创造就业<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>活动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>联系Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot_top&quot;</span>&gt;</span></span><br><span class="line">                更多选购方式：前往 <span class="tag">&lt;<span class="name">span</span>&gt;</span>Apple Store 零售店<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，致电 400-666-8800 或查找在你附近的<span class="tag">&lt;<span class="name">span</span>&gt;</span>授权经销商<span class="tag">&lt;/<span class="name">span</span>&gt;</span>。</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">                Copyright © 2019 Apple Inc. 保留所有权利。</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>隐私政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>| 使用条款<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>| 销售政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>| 法律信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>| 网站地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                京公安网安备11010502008968 京ICP备10214630 营业执照 无线电发射设备销售备案编号11201910351200</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.2Apple.css</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*清除默认样式*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置整个页面大小*/</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4000px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F2F2F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置顶部广告div*/</span></span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">68</span>, <span class="number">68</span>, <span class="number">68</span>);</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*撑高度*/</span></span><br><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置头部文字内容，广告*/</span></span><br><span class="line"><span class="selector-class">.head-text</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/*生成相对定位*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">83%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#A8A8AA</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置导航栏*/</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">48</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="comment">/*将导航栏固定*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*隐藏无序列表的&quot;·&quot;*/</span></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置li*/</span></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">56px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/*去除项目下划线*/</span></span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">214</span>, <span class="number">214</span>, <span class="number">214</span>);</span><br><span class="line">    <span class="comment">/*去除下划线*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*内容部分*/</span></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在线选购广告*/</span></span><br><span class="line"><span class="selector-class">.content-x</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">245</span>, <span class="number">245</span>, <span class="number">247</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置a标签样式无下划线*/</span></span><br><span class="line"><span class="selector-class">.content-x</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">107</span>, <span class="number">165</span>, <span class="number">223</span>);</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置P标签内文字大小*/</span></span><br><span class="line"><span class="selector-id">#x</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">6.4px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-head</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">750px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eaf2fc</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-head</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#one</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">6.4px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#two</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.38</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070c9</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">11.05px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070C9</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070C9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*图片旋转效果*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">/* transform: scale(2); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13Pro</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">680px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13Pro</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13Pro</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13Pro</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13Pro</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070C9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">650px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉下划线*/</span></span><br><span class="line"><span class="selector-class">.content-13</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-13</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070C9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#one1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">6.4px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">11.05px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#three1</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070c9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#seven</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-Last</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">924px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">646px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-Lastn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6468px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">646px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: run <span class="number">6s</span> infinite <span class="built_in">steps</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-Lastn</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> run &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">5544px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*末尾部分*/</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">980px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot-top</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888888</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">9.6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot-list</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555555</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-first</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-first</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">9.6px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot-title</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">9.6px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-first</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/*cursor 移入 手形-*/</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot_top</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">980px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888888</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">34px</span> <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot_top</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0070C9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">980px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;HanHei SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;Myriad Set Pro&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888888</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.3iconfont.css</strong>,这部分是前言里介绍的阿里矢量图标下载的代码.需要自己下载,复制代码没有运行效果</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span>; <span class="comment">/* Project id 3063102 */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;iconfont.woff2?t=1640446088733&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;iconfont.woff?t=1640446088733&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">        <span class="built_in">url</span>(<span class="string">&#x27;iconfont.ttf?t=1640446088733&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*APPLE logo*/</span></span><br><span class="line"><span class="selector-class">.icon-changyonglogo35</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\e71c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*搜索*/</span></span><br><span class="line"><span class="selector-class">.icon-sousuo</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\e606&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-sousuo1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\e645&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*购物袋*/</span></span><br><span class="line"><span class="selector-class">.icon-gouwudai</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\e609&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.4鼠标.js</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span>, <span class="variable language_">document</span>, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hearts = [];</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">css</span>(</span><br><span class="line">            <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="title function_">attachEvent</span>();</span><br><span class="line">        <span class="title function_">gameloop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">gameloop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hearts.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hearts[i].<span class="property">alpha</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(hearts[i].<span class="property">el</span>);</span><br><span class="line">                hearts.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].<span class="property">y</span>--;</span><br><span class="line">            hearts[i].<span class="property">scale</span> += <span class="number">0.004</span>;</span><br><span class="line">            hearts[i].<span class="property">alpha</span> -= <span class="number">0.013</span>;</span><br><span class="line">            hearts[i].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + hearts[i].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + hearts[i].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> +</span><br><span class="line">                hearts[i].<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + hearts[i].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + hearts[i].<span class="property">scale</span> +</span><br><span class="line">                <span class="string">&quot;) rotate(45deg);background:&quot;</span> + hearts[i].<span class="property">color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">attachEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onclick</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">onclick</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">            old &amp;&amp; <span class="title function_">old</span>();</span><br><span class="line">            <span class="title function_">createHeart</span>(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createHeart</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        d.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>;</span><br><span class="line">        hearts.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>: d,</span><br><span class="line">            <span class="attr">x</span>: event.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">y</span>: event.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title function_">randomColor</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">css</span>(<span class="params">css</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        style.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            style.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(css));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            style.<span class="property">styleSheet</span>.<span class="property">cssText</span> = css;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() *</span><br><span class="line">                                                                                                <span class="number">255</span>)) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure><h2 id="四、网页效果"><a href="#四、网页效果" class="headerlink" title="四、网页效果"></a>四、网页效果</h2><p>这里添加了一个鼠标焦点在图片时的旋转效果</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9114.png" alt="image-20211226223214575" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9115.png" alt="image-20211226223221360" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9116.png" alt="image-20211226223232698" style="zoom:67%;" /><p>轮播图</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9117.png" alt="image-20211226223239794" style="zoom:67%;" /><p>末尾表单</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9118.png" alt="image-20211226223247224" style="zoom:67%;" /><p>鼠标点击效果</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9120.png" style="zoom:67%;" /><h2 id="五、说明"><a href="#五、说明" class="headerlink" title="五、说明"></a>五、说明</h2><p>使用HTML开发技术，仿写苹果官网网页，利用课堂知识对网页增加了轮播与动画，并非完全还原</p>]]></content>
      
      
      <categories>
          
          <category> Web前端技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iconfont-阿里巴巴矢量图标库使用教程</title>
      <link href="/posts/27705/"/>
      <url>/posts/27705/</url>
      
        <content type="html"><![CDATA[<h1 id="iconfont-阿里巴巴矢量图标库使用教程"><a href="#iconfont-阿里巴巴矢量图标库使用教程" class="headerlink" title="iconfont-阿里巴巴矢量图标库使用教程"></a>iconfont-阿里巴巴矢量图标库使用教程</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li><p><a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a></p></li><li><p>矢量化图标可以协助我们制作HTML，比直接插入img更快捷，页面效果也更好。它有很多优点：</p></li></ul><ol><li><p><strong>图标矢量化</strong>我们在最初推行 iconfont 的时候就是为了在Retina设备上也能「丝般柔滑」，这一点图片需要另外制作两倍图，而且缩放后立马就「有码了」。在制作上，不单单是图标设计为两倍就完事了，需要在整个页面设计的时候就要是两倍尺寸的，这对于设计师来说，成本太大（虽然这是趋势）。</p></li><li><p><strong>让样式回归CSS</strong>具体而言，就是指使用iconfont后，因为图标就是字体。我们可以用CSS来灵活控制图标的大小、颜色、阴影等。传统的 CSS Sprites 我们只能重新设计后再「切图」，虽然现在有很多自动拼合工具，但是依然繁琐。进一步的，如果不用兼容IE6-7后，我们完全可以用CSS伪元素来生成图标。也就是说假如图标编码改变了，不用再改动HTML中的编码，只用修改 content 中的编码，达到真正目的上的CSS来控制图标。</p></li><li><p><strong>图标规范化</strong>通过iconfont平台，我们可以高效快速的生产出规范的图标。现在可以直接通过平台上传SVG或ESP文件，就可以转换成字体图标了。</p></li><li><p><strong>自动上传到阿里云CDN</strong>通过平台生成的字体，自动存储到阿里云CDN，免费加速。</p></li><li><p><strong>流量最小化</strong>在移动设备，节约流量是我们前端把控用户体验关键而又容易忽视的一个环节。通常一个项目中，我们并不需要一套大而全图标库，也许我只是需要其中的一个关闭按钮(^o^)&#x2F;~。通过平台可以点选自己需要的图标，重新生成一份字体，减少字体体积，节约流量的同时带来更快的加载速度。</p></li></ol><h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><p>1.打开<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a>，搜索图标，选择合适的图标批量加入购物车(如果是单个矢量图直接下载也可以)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9119.png" alt="image-20211226204726000" style="zoom:50%;" /><p>2.在右侧点击购物车</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/web%E5%BC%80%E5%8F%9121.png" alt="image-20211226204901441"></p><p>3.在购物车中，推荐是使用添加项目，在账户内新建一个项目下次使用的时候，方便下载。这里我们用作HTML开发所以点击下载代码。(下载素材是用于SVG、AI、PNG的）</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9122.png" alt="image-20211226205114547" style="zoom:50%;" /><p>4.这里我是添加到项目，第三步点击下载代码可以跳过这步。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9123.png" alt="image-20211226205538433" style="zoom:50%;" /><p>5.将下载好的压缩包解压，以下文件全部导入HTML项目下css文件中</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/web%E5%BC%80%E5%8F%9124.png" alt="image-20211226205658807"></p><p>7.在iconfont.css中可以设置图标的样式，这里我默认，一般不作修改。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想单独修改某个图标的大小样式，可以为span标签单独设置一个class</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont2</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">160px</span>;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#BD2C00</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#B3D4FC</span>;</span><br><span class="line">-webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">-moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.在HTML文件中，第六行导入刚刚下载的<code>iconfont.css</code>,第九行挑选相应图标并获取字体编码，应用于页面</p><p>·<img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9125.png" alt="image-20211226220721515" style="zoom:67%;" />             <img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML开发实践/web%E5%BC%80%E5%8F%9126.png" alt="image-20211226220946436" style="zoom:50%;" />       </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/iconfont.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe71c;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont2&quot;</span>&gt;</span><span class="symbol">&amp;#xe606;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe645;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe609;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、运行效果"><a href="#三、运行效果" class="headerlink" title="三、运行效果"></a>三、运行效果</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/HTML%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/web%E5%BC%80%E5%8F%9127.png" alt="image-20211226222451718"></p>]]></content>
      
      
      <categories>
          
          <category> Web前端技术基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库前后端交互 从后端到前端入门教程二 (Tomcat、MySQL、Bootstrap、JAVA Servlet)</title>
      <link href="/posts/15144/"/>
      <url>/posts/15144/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库前后端交互-入门教程二"><a href="#数据库前后端交互-入门教程二" class="headerlink" title="数据库前后端交互 入门教程二"></a>数据库前后端交互 入门教程二</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>分两篇博客，以学生管理系统为例子，实现前后端交互(这里并没有设计完成，重在操作过程！).以下涉及得到一些软件会从安装开始介绍</li><li>仅供参考入门学习基本操作，代码部分还是得自己学</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[数据库设计] --&gt;B(PowerDesign)</span><br><span class="line">A[数据库设计] --&gt;K(Navicat for MySQL)</span><br><span class="line">B[PowerDesign] --&gt;C(概念模型)</span><br><span class="line">B[PowerDesign] --&gt;D(物理模型)</span><br><span class="line">E[前后端交互] --&gt;F(eclipse)</span><br><span class="line">E[前后端交互] --&gt;G(Tomcat)</span><br><span class="line">E[前后端交互] --&gt;H(MySQL驱动)</span><br><span class="line">E[前后端交互] --&gt;I(Bootstrap)</span><br><span class="line">E[前后端交互] --&gt;J(Servlet)</span><br></pre></td></tr></table></figure><ul><li><p>上一节使用PowerDesign设计了学生管理数据库，这节使用上一节的数据库建立前后端的交互</p></li><li><p>工具：eclipse(IDEA)、Tomcat、MySQL驱动、Bootstrap。</p></li><li><p>在”前期准备”有放网址，下载慢可以使用我的链接下载相关软件<a href="https://pan.baidu.com/s/18sX10MDsPonPX0YMGNaXmQ">链接</a>提取码：2580</p></li></ul><ol><li><p>eclipse：不用解释了，JAVA开发软件</p></li><li><p>Tomcat：web应用服务器，我们写好的网页等代码要放在Tomcat，他是个工具，java开发必须的</p></li><li><p>MySQL驱动：大家都知道，如果我们要访问数据库，必须得跟数据库建立一个网络连接，那么这个连接由谁来建立呢？MySQL驱动，他会在底层跟数据库建立网络连接，有网络连接，接着才能去发送请求给数据库服务器！</p></li></ol><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B547.png" alt="image-20211224211205761" style="zoom:50%;" /><ol start="4"><li><p>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。同时，Bootstrap 还是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。作为一个框架，它和jQuery EasyUI、WeUI一样，助力于前端开发。简而言之，使用Bootstrap让前端开发变得简洁高效。</p></li><li><p>Java Servlet ，是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>在此说明一下，servlet所有的生命周期是在服务器中进行的，我们在后台的一系列操作其实都是在tomcat中wrap包装类中进行，而直接控制servlet的是context，而控制servlet的则是web容器。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B548.png" alt="image-20211225151810059" style="zoom: 67%;" /></li></ol><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>1.eclipse要求必须是企业版，在菜单栏点击help-about,显示Enterprise Java and Web Developers。因为标准版不能用作web开发</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B549.png" alt="image-20211223215546108" style="zoom:67%;" /><p>2.配置Tomcat。<a href="http://tomcat.apache.org/">下载地址</a>，选择自己需要的版本，下载64位zip并解压。这里我以前装的是apache-tomcat-8.5.16为例子。打开路径下的bin文件(D:\Tomcat\apache-tomcat-8.5.16\bin)，运行startup.bat，不要关闭命令窗口。打开浏览器输入<code>http://localhost:8080</code>,如果出现下图则配置成功。(网上有为Tomcat配置环境的，这个没有必要，只要用本地端口能显示下面的网页即可)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B550.png" alt="image-20211224202735586" style="zoom: 25%;" /><p>3.为eclipse设置tomcat配置。菜单栏：Window-Preferences-Server-Runtime Enviroment-Add-Apache-Apache Tomcat v8.5(选择自己的版本)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B551.png" alt="image-20211224203315571"><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B552.png" alt="image-20211224203444468" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B553.png" alt="image-20211224203848474" style="zoom:50%;" /></p><p>4.<a href="https://dev.mysql.com/">mysql驱动下载</a>,滑到下面找MySQL DownLoads，因为我们用JAVA开发，所以选择Connerctor&#x2F;J</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B554.png" alt="image-20211224210500833" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B558.png" alt="image-20211224210522476" style="zoom:50%;" /></p><p>选择合适的操作系统，下载免安装版</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B555.png" alt="image-20211224210621623" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B556.png" alt="image-20211224210838643" style="zoom: 33%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B557.png" alt="image-20211224210909512" style="zoom:33%;" /></p><p>下载完成后,MySQL Installer并不需要安装.记住它的路径</p><h2 id="设计Web"><a href="#设计Web" class="headerlink" title="设计Web"></a>设计Web</h2><ol><li><strong>新建一个动态网页项目</strong>，File-New-Dynamic Web Project。如果没有这个选项就点下面的Project-Web-Dynamic Web Project。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B559.png" alt="image-20211224204344781" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B560.png" alt="image-20211224204517327" style="zoom:67%;" /></p><p>命名项目名称，选择对应的Tomcat版本。勾选Generate web.xml deployment descriptor，完成创建</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B561.png" alt="image-20211225014730041" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B582.png" alt="image-20211225014836532" style="zoom: 50%;" /></p><p>2.<strong>导入Severy library(服务器运行环境)：</strong>右击新建的项目-Build Path-configure Build Path-Targeted Runtimes，勾选Tomcat v8.5</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B583.png" alt="image-20211225021811158" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B562.png" alt="image-20211225022039771" style="zoom:50%;" /></p><p>3.<strong>导入数据库驱动MySQL Installer</strong>。将下好的mysql-connector-java-5.0.4-bin.jar移入lib路径中。这里可以在文件夹中ctrl+c，mysql文件，在eclipse中选中lib再按ctrl+v就可以导入。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B563.png" alt="image-20211225022515595" style="zoom:67%;" /><p>右击myql-Build Path-Add to Build Path，之后会出现Referenced Libraries(这里我已经导入所以没有显示Add)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B564.png" alt="image-20211225022950872" style="zoom: 50%;" /><p>4.<strong>新建网页：</strong>webapp-New-JSP File-JSP Flie</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B565.png" alt="image-20211225023452289" style="zoom: 50%;" /><p>注意编码格式</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B566.png" alt="image-20211225024430814"></p><p>这里不安装Bootstrap，使用<a href="https://www.runoob.com/bootstrap/bootstrap-environment-setup.html">菜鸟教程</a>导入在线Bootstrap库</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B567.png" alt="image-20211225024713712" style="zoom:50%;" /><p>body标签内为上一篇博客中公司实体的相关属性创建一个web界面，完整代码：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;ISO-8859-1&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;AddCom&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;添加公司&lt;/h3&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">&lt;label&gt;公司名称&lt;/label&gt; &lt;input class=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;请输入公司名称&quot;</span></span><br><span class="line">type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;cname&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">&lt;label&gt;公司性质&lt;/label&gt; &lt;input class=<span class="string">&quot;form-control&quot;</span> placeholder=<span class="string">&quot;请输入公司性质&quot;</span></span><br><span class="line">type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;ctype&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5.<strong>新建Servlet：</strong>main-New-other-Web-Servlet</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B568.png" alt="image-20211225025229187" style="zoom: 60%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B569.png" alt="image-20211225025314855" style="zoom: 67%;" /></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B570.png" alt="image-20211225025540737" style="zoom: 80%;" /><p>在AddCom.java28行doget中填写代码，实现将网页中的表单加入到数据库中</p><p><strong>注意：</strong></p><ol><li>第1、14行代表转码，如果注释掉，加入数据库中的数据会乱码。如图：只能识别数字和字母，不能识别汉字。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B571.png" alt="image-20211225143057676"></p><ol start="2"><li><p>第14行，正确填写数据库名称，这里我的数据库名称是<code>tit2021</code></p></li><li><p>第15行，正确填写自己的MySQL账户和密码。(我的账户密码都为root)</p></li><li><p>第16-20行，将网页表单中的值传递给数据库</p></li><li><p>22行，方法executeUpdate，executeUpdate的返回值是一个整数，指示受影响的行数（即更新计数）。对于CREATETABLE或DROPTABLE等不操作行的语句，executeUpdate的返回值总为零。</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//1.接受网页数据:cname,ctype</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cname&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ctype</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;ctype&quot;</span>);</span><br><span class="line"><span class="comment">//2. 连接数据库，把数据写入company表</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//添加是否成功的标志</span></span><br><span class="line"><span class="comment">//注册mysql驱动</span></span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//jdbc技术</span></span><br><span class="line"><span class="comment">//String url = &quot;jdbc:mysql://localhost:3306/tit2021&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/tit2021?useUnicode=true&amp;charaterEncoding=utf-8&quot;</span>;</span><br><span class="line">conn = DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO company VALUES(?,?,?)&quot;</span>;<span class="comment">//三个问好代表三个技术</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, (<span class="type">int</span>)(Math.random()*<span class="number">1000</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, cname);</span><br><span class="line">pstmt.setString(<span class="number">3</span>, ctype);</span><br><span class="line">flag = pstmt.executeUpdate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B572.png" alt="image-20211225030313999" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B573.png" alt="image-20211225030559054" style="zoom:67%;" /><p>填写完成后有很多报错，这里需要抛出异常：首先选中爆红部分，shift+alt+z，选择Try&#x2F;catch Block</p><p>完整代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.tit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class AddCom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/AddCom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddCom</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddCom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//1.接受网页数据:cname,ctype</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cname</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cname&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ctype</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;ctype&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 连接数据库，把数据写入company表</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//添加是否成功的标志</span></span><br><span class="line">        <span class="comment">//注册mysql驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//jdbc技术</span></span><br><span class="line">            <span class="comment">//String url = &quot;jdbc:mysql://localhost:3306/tit2021?useUnicode=true&amp;charaterEncoding=utf-8&quot;;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/tit2021?useUnicode=true&amp;charaterEncoding=utf-8&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO company VALUES(?,?,?)&quot;</span>;<span class="comment">//三个问好代表三个技术</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, (<span class="type">int</span>)(Math.random()*<span class="number">1000</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, cname);</span><br><span class="line">            pstmt.setString(<span class="number">3</span>, ctype);</span><br><span class="line">            flag = pstmt.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">response.getWriter().print(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().print(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行的几种方法：</p><p><strong>1.1第一种</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B574.png" alt="image-20211225143500930" style="zoom:67%;" /><p><strong>1.2第二种</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B575.png" alt="image-20211225143533272" style="zoom: 50%;" /><p><strong>1.3第三种</strong>点击Start在浏览器界面输入<a href="http://localhost:8080/TIT_SMS/addcom.jsp(%E8%B0%83%E5%BC%8F%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8Cstop%E6%8E%89%E8%B0%83%E8%AF%95)">http://localhost:8080/TIT_SMS/addcom.jsp(调式完成后，stop掉调试)</a></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B576.png" alt="image-20211225143756989" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B577.png" alt="image-20211225143730186"></p><p><strong>2.输入数据测试</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B580.png" alt="image-20211225143902131" style="zoom: 50%;" /><p>显示OK后，打开Navicat for MySQL，连接tit2021数据库，刷新后打开公司表单</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B581.png" alt="image-20211225143949737" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库前后端交互 入门教程一 PowerDesigner的使用</title>
      <link href="/posts/2188/"/>
      <url>/posts/2188/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库前后端交互-入门教程一"><a href="#数据库前后端交互-入门教程一" class="headerlink" title="数据库前后端交互 入门教程一"></a>数据库前后端交互 入门教程一</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>分两篇博客，以学生管理系统为例子，实现前后端交互(这里并没有设计完成，重在操作过程！).以下涉及得到一些软件会从安装开始介绍。（下载慢可以使用我的链接下载相关软件<a href="https://pan.baidu.com/s/18sX10MDsPonPX0YMGNaXmQ">链接</a>提取码：2580 ）</li><li>仅供参考入门学习基本操作，代码部分还是得自己学</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[数据库设计] --&gt;B(PowerDesign)</span><br><span class="line">A[数据库设计] --&gt;K(Navicat for MySQL)</span><br><span class="line">B[PowerDesign] --&gt;C(概念模型)</span><br><span class="line">B[PowerDesign] --&gt;D(物理模型)</span><br><span class="line">E[前后端交互] --&gt;F(eclipse)</span><br><span class="line">E[前后端交互] --&gt;G(Tomcat)</span><br><span class="line">E[前后端交互] --&gt;H(MySQL驱动)</span><br><span class="line">E[前后端交互] --&gt;I(Bootstrap)</span><br><span class="line">E[前后端交互] --&gt;J(Servlet)</span><br></pre></td></tr></table></figure><h2 id="数据库设计步骤"><a href="#数据库设计步骤" class="headerlink" title="数据库设计步骤"></a>数据库设计步骤</h2><p>一、数据需求分析</p><pre><code>1.哪些数据要入库</code></pre><p>二、设计逻辑模型-CDM(ER图)</p><ol><li><p>确定系统中的实体</p></li><li><p>确定实体关系(1-1,1-N,N-N,强制关系和非强制关系)</p></li><li><p>规范化</p></li></ol><p>面试题: <strong>工程项目中能达到的最高级是3NF</strong></p><p>三、设计物理模型-PDM</p><ol><li>视图</li><li>索引</li><li>反规范化</li></ol><p>四、生成数据库</p><p>五、生成测试数据</p><p>六、生成数据库设计报告</p><p><strong>下面以数据库设计步骤为例,使用PowwerDesign设计一个学生管理数据库</strong></p><h2 id="使用PowerDesign设计数据库"><a href="#使用PowerDesign设计数据库" class="headerlink" title="使用PowerDesign设计数据库"></a>使用PowerDesign设计数据库</h2><p>PowerDesigner软件是创建数据库快捷便利的可视化工具，可以帮助我们快速生成数据库</p><h3 id="一、新建CDM模型"><a href="#一、新建CDM模型" class="headerlink" title="一、新建CDM模型"></a>一、新建CDM模型</h3><p><strong>1.启动PowerDesign</strong></p><p><strong>2.新建一个概念图</strong></p><p>flie-New Model-Model types-Conceptual Diagram-OK</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD01.png" alt="image-20211221090916575" style="zoom:50%;" /><p><strong>3.Toolbox这里只使用实体与关系按钮</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B502.png" alt="image-20211221095540678" style="zoom:67%;" /><h3 id="二、设计逻辑模型-概念模型-CDM"><a href="#二、设计逻辑模型-概念模型-CDM" class="headerlink" title="二、设计逻辑模型(概念模型)-CDM"></a>二、设计逻辑模型(概念模型)-CDM</h3><h4 id="2-1设计系统中的实体"><a href="#2-1设计系统中的实体" class="headerlink" title="2.1设计系统中的实体"></a>2.1设计系统中的实体</h4><p>在Toolbox中点击建立实体,先建立六个实体.然后双击实体,分别填写实体信息.这里以学生为例子</p><p>先设置General中的Name(一般以汉字命名)、Code(必须以英文命名)、Comment(备注)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B503.png" alt="image-20211221091746791" style="zoom:50%;" /><p>之后设置“学生”实体的属性</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B504.png" alt="image-20211223105711810" style="zoom:50%;" /><p><strong>code</strong> 在数据库中的字段名</p><p><strong>Length</strong> 数据类型长度</p><p><strong>Data Type</strong> 数据类型</p><p><strong>M:</strong> Mandatory强制属性，表示该属性必填，不能为空</p><p><strong>P：</strong>Primary Identifer 是否是主标识符，表示实体唯一表示符</p><p><strong>D：</strong>Displayed 显示出来，默认勾选</p><p>其余五个操作同上</p><p><strong>班级实体</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B505.png" alt="image-20211222210139345" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B506.png" alt="image-20211222210149845" style="zoom:67%;" /><p><strong>院系</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B507.png" alt="image-20211222210046125" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B508.png" alt="image-20211222210219881" style="zoom:67%;" /><p><strong>专业</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B509.png" alt="image-20211222210233253" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B510.png" alt="image-20211222210243481" style="zoom:67%;" /><p><strong>跟踪记录</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B511.png" alt="image-20211222210358129" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B512.png" alt="image-20211222210056246" style="zoom:67%;" /><p><strong>就业单位</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B513.png" alt="image-20211222210110426" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B514.png" alt="image-20211222210123993" style="zoom:67%;" /><p>六个实体创建完成后是这个样子(“#”和“_”代表主标识，”*“代表强制不可为空，”⚪“代表显示改属性)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B515.png" alt="image-20211222211103011"></p><h4 id="2-2确定实体关系"><a href="#2-2确定实体关系" class="headerlink" title="2.2确定实体关系"></a>2.2确定实体关系</h4><p>单击工具栏选择”<img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B546.png" alt="image-20211223111502618">“按钮，这里以学生班级为例，其他同理</p><p>首先将学生与班级实体连接，双击关系线条</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%B9%E8%AE%AD/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B516.png" alt="image-20211222211614994"></p><p>与新建实体同理，在关系中Name以中文命名，Code以英文命名</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B517.png" alt="image-20211222211655188" style="zoom:67%;" /><p>强制关系表示：表示一个班级肯定有学生，学生一定在班级中。</p><p>Cardinalities下面的英文即属性设置的解释：每一个学生有且仅有一个班级，每一个班级一定有多个学生。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B518.png" alt="image-20211222211916630" style="zoom:67%;" /><p><strong>班级_专业</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B519.png" alt="image-20211222212127808" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B520.png" alt="image-20211222212139033" style="zoom:67%;" /><p><strong>院系_专业</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B521.png" alt="image-20211222212155100" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B522.png" alt="image-20211222212207133" style="zoom:67%;" /><p><strong>学生_跟踪记录</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B523.png" alt="image-20211222212102124" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B524.png" alt="image-20211222212111325" style="zoom:67%;" /><p><strong>就业单位_学生</strong></p><p>学生不一定就业，所以这里没有强制关系。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B525.png" alt="image-20211222212218700" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B526.png" alt="image-20211222212227270" style="zoom:67%;" /><p>五个关系建立完成后如图</p><p> <strong>要找&#x3D;&#x3D;直接关系&#x3D;&#x3D;，学生和班级有关系，但是学生和院系没有关系</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B527.png" alt="image-20211222212605007" style="zoom: 67%;" /><p>建立好实体后，发现有不同的线条。“1.小三角”表示关系中的N，即“1-N”，“2.”虚线表示非强制关系，“3.”实线表示强制关系</p><p>完成第二部分设计逻辑模型CDM后，可以直观的看出各个实体内及实体间属性的关系，PowDesign太友好了。接下来第三、四步可以帮助我们直接生成数据库SQL文件</p><h3 id="三、设计物理模型-PDM"><a href="#三、设计物理模型-PDM" class="headerlink" title="三、设计物理模型-PDM"></a>三、设计物理模型-PDM</h3><p>Tool-Generate Physical Data Model(Generate Conceptual Data Model可以将物理模型转为概念模型)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B528.png" alt="image-20211223115240866" style="zoom:50%;" /><p>选择对应版本的MySQL(5.5版本也选5.0)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B529.png" alt="image-20211223113350703" style="zoom:50%;" /><p>在Detail中将“Check model”勾选掉，之后点击确定</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B530.png" alt="image-20211221101928605" style="zoom: 50%;" /><p>下图就是生成的物理模型，检查是否有丢失的实体。<pk>代表主键，<fk>代表外键。箭头表示关系中“1→N”</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B531.png" alt="image-20211223113542015" style="zoom:67%;" /><p>双击实体，在Columns中可以修改属性，一般默认生成的就是对的，如果有需要修改的在这里修改。</p><p>P:primary主键,F:foreign key外键 , M:mandatory强制性的，代表不可为空</p><p><strong>扩展：</strong>双击图中位置，<strong>Identify</strong>打√表示按学号自增排序</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B532.png" alt="image-20211223114628927" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B533.png" alt="image-20211223114608340" style="zoom:50%;" /></p><h3 id="四、生成数据库"><a href="#四、生成数据库" class="headerlink" title="四、生成数据库"></a>四、生成数据库</h3><p>在物理模型界面，点击菜单栏Database-Generate Database(物理模型与概念模型菜单栏不一样，一定要先打开物理模型)</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B584.png" alt="image-20211223115629853" style="zoom:50%;" /><p>自定义文件路径，去掉”Check model”，点击确定。路径下”.sql”即生成的数据库</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B535.png" alt="image-20211221111015635" style="zoom: 67%;" /><h3 id="五、生成测试数据"><a href="#五、生成测试数据" class="headerlink" title="五、生成测试数据"></a>五、生成测试数据</h3><p>与生成数据库同理，在物理模型界面，点击菜单栏Database-Generate Test Data</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B536.png" alt="image-20211223115629853" style="zoom:50%;" /><p>自定义文件路径，去掉”Check model”，点击确定。路径下”.sql”即生成的数据库测试数据</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B537.png" alt="image-20211223115925798" style="zoom:50%;" /><h3 id="六、生成数据库设计报告"><a href="#六、生成数据库设计报告" class="headerlink" title="六、生成数据库设计报告"></a>六、生成数据库设计报告</h3><p>点击菜单栏Report-Generate Report，可以快速生成一份中文版word报告，帮我们减少项目报告的工作量</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B538.png" alt="image-20211221110342787" style="zoom:80%;" />                <img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B539.png" alt="image-20211223120306053" style="zoom: 50%;" /> </p><h3 id="七、导入数据库"><a href="#七、导入数据库" class="headerlink" title="七、导入数据库"></a>七、导入数据库</h3><p>这里我以MySQL 5.0和Navicat for MySQL为例子导入上面生成的.sql和.sws文件</p><p>首先新建一个连接，右击左侧空白处，新建连接。这里用户名和密码一定要和MySQL配置相同。如果忘记密码可以参考我这篇<a href="https://blog.csdn.net/qq_49488584/article/details/122104090?spm=1001.2014.3001.5501">Mysql5.0 修改密码_鬼才小张同学的博客-CSDN博客</a></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B541.png" alt="image-20211223121228070" style="zoom:50%;" /><p>之后打开该连接，右击新建数据库</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B542.png" alt="image-20211223122026470" style="zoom:50%;" /><p>右击新建的数据库，分别运行第四五步保存的.sql文件，<strong>不要重复运行</strong>，比如运行了一遍测试数据，再次运行就会报错，因为当前数据库已经存在相同的数据。</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B543.png" alt="image-20211223122100907" style="zoom:67%;" /><p>如果是第一遍运行有运行错误，在文件夹中右击报错的.sql以记事本打开，复制全部，在Navicat for MySQL中点击查询-新建查询，粘贴sql内容，点击运行，查看下方报错，根据报错去修改</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B544.png" alt="image-20211223122510317" style="zoom:67%;" /><p>之后在空白处右击，刷新。就可以看到新建的数据库了。随便点一个实体，可以看到数据库的测试数据，说明该数据库工作正常</p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/数据库培训/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E8%B7%B545.png" alt="image-20211223123053022" style="zoom:67%;" /><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PowerDesigner软件是创建数据库快捷便利的可视化工具，可以帮助我们快速生成数据库。通过设计CDM模型和PDM模型，辅助生成SQL文件，在Navicat中建立需要的数据库。下一篇介绍前后端交互。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql修改密码</title>
      <link href="/posts/24519/"/>
      <url>/posts/24519/</url>
      
        <content type="html"><![CDATA[<h1>Mysql修改密码<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>Mysql使用频率不是很高，密码经常忘记，看了很多博客，方法很多，这里提供一个我认为最方便的</li><li><a href="https://blog.csdn.net/weixin_42819857/article/details/112647973?ops_request_misc=%7B%22request_id%22:%22164009920116780265450275%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164009920116780265450275&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-112647973.pc_search_insert_es_download_v2&utm_term=mysql5.5%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E&spm=1018.2226.3001.4187">(1条消息) MySQL安装过程的一些问题，MySQL5.5版本忘记密码问题等_QzzBL-CSDN博客</a></li></ul><h1 id="重置方法"><a href="#重置方法" class="headerlink" title="重置方法"></a>重置方法</h1><p>1.在进程中关闭mysql，或者以管理员运行cmd，输入<code>net stop mysql </code></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql修改密码/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8101.png" alt="image-20211221230830781" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql修改密码/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8102.png" alt="image-20211221233241324" style="zoom: 67%;" /><p>2.以管理员运行cmd,切换到Mysql安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8103.png" alt="image-20211221233519154"></p><p>输入<code>mysqld --skip-grant-tables</code>，这句话表示跳过验证</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8104.png" alt="image-20211221233615698"></p><p>3.重新开一个cmd，不用以管理员运行。同理先进入到Mysql目录下</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8105.png" alt="image-20211221233738738"></p><p>输入<code> mysql -u root</code> 表示进入mysql中</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8107.png" alt="image-20211221235235381"></p><p>4.接着先刷新权限<code>flush privileges;</code>,再设置密码，引号里是你要设置的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR root@localhost = PASSWORD(&#x27;root&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8108.png" alt="image-20211221235304892"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>显示welcome to说明修改成功！</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/Mysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%8100.png" alt="image-20211221235418182"></p><p><strong>好记性不如勤修改哈哈哈哈哈哈哈哈哈，我已经不知道改了多少遍了</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量配置(多个JDK)</title>
      <link href="/posts/26759/"/>
      <url>/posts/26759/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量配置-多个JDK"><a href="#环境变量配置-多个JDK" class="headerlink" title="环境变量配置(多个JDK)"></a>环境变量配置(多个JDK)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>今天配置JDK时，因为先前已经有一个JDK，卸载旧的确实可以。但是旧版本更稳定，怎么让两个JDK随意切换？</p></li><li><p><a href="https://www.oracle.com/java/technologies/downloads/">JDK下载地址</a></p></li></ul><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>这里跳过安装步骤，直接讲配置过程</p><ol><li>电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</li><li>弹出系统变量和环境变量，这里我们配置系统环境变量，点击新建</li></ol><table><thead><tr><th>变量名</th><th align="center">变量值</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td align="center">%JAVA17_HOME%</td></tr><tr><td>JAVA1.8_HOME</td><td align="center">D:\JAVA\jdk1.8.0_281</td></tr><tr><td>JAVA17_HOME</td><td align="center">D:\JAVA\jdk17.0.1</td></tr></tbody></table><blockquote><p>这里相当于设置了一个变量<code>JAVA_HOME</code>，后面<code>JAVA1.8_HOME</code>，<code>JAVA17_HOME</code>代表为两个版本取了两个变量名(根据需要自己命名，也可以JAVA_HOME1.8)，之后跟的分别是他们的路径。在切换版本时，只需要把第一个<code>JAVA_HOME</code>的变量值改为需要的变量</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK11.png" alt="a"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK02.png" alt="b"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK03.png" alt="c"></p><ol start="3"><li>在系统变量中，新建系统变量，变量名<code>CLASSPATH</code>，变量值<code> .;%java_home%\lib;%java_home%\lib\tools.jar</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK04.png"></p><p><strong>前两步创建结果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK05.png"></p><ol start="4"><li>在系统环境变量中找到Path，点击<code>编辑-&gt;新建</code>，加上变量值<code>%JAVA_HOME%\bin和%JAVA_HOME%\jre\bin</code>,点击上移移到最上面(这里也可以点击编辑文本，写在最前面)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK06.png"></p><p>这里网上有人说删掉第二行“C:\Program Files (x86)\Common Files\Oracle\Java\javapath”，亲测无效</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>测试时运行cmd 输入<code>java -version</code> 每次配置好新的环境要在新打开一个cmd，不能在同一个cmd中检查两次</p><p><strong>测试17版本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK07.png"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK08.png"></p><p><strong>测试1.8版本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK09.png"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(%E5%A4%9A%E4%B8%AAJDK)/%E9%85%8D%E7%BD%AEJDK10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验五 模拟时间片调度(进程调度算法)(先到先服务、短作业优先、时间片轮转、最高优先权优先调度 )</title>
      <link href="/posts/11313/"/>
      <url>/posts/11313/</url>
      
        <content type="html"><![CDATA[<h1 id="实验五-模拟调度时间片"><a href="#实验五-模拟调度时间片" class="headerlink" title="实验五 模拟调度时间片"></a>实验五 模拟调度时间片</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>参考教材《操作系统 第四版》汤小丹</li><li><a href="https://blog.csdn.net/zzsaixuexi/article/details/121545968">操作系统之 调度算法 （java）_zzsaixuexi的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45432665/article/details/105141907?ops_request_misc=%7B%22request_id%22:%22163963942116780269892956%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163963942116780269892956&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105141907.pc_search_insert_es_download_v2&utm_term=%E5%B8%A6%E6%9D%83%E5%91%A8%E8%BD%AC%E6%97%B6%E9%97%B4%E6%80%8E%E4%B9%88%E7%AE%97&spm=1018.2226.3001.4187">操作系统进程完成时间，周转时间，带权周转时间， 平均周转时间， 带权平均周转时间计算</a></li></ul><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><p><strong>先到先服务(FCFS)：</strong>按照进程提交给系统的先后次序来进行调度</p><p><strong>短作业优先(SJF&#x2F;SPF)：</strong>按照进程所要求的运行时间来衡量</p><p><strong>时间片轮转：</strong>根据先来先服务排序，以一个时间片为单位，依次执行不同的进程</p><p><strong>最高优先权优先调度算法(HRRN)：</strong>为每个作业设置一个优先权(响应比)，调度之前先计算各作业的优先权，优先数高者优先调度RP(响应比)＝作业周转时间&#x2F;作业运行时间&#x3D;1+作业等待时间&#x2F;作业运行时间</p><p><strong>计算</strong></p><p>周转时间&#x3D;作业完成时刻-作业到达时刻</p><p>带权周转时间&#x3D;周转时间&#x2F;服务时间</p><p>平均周转时间&#x3D;作业周转总时间&#x2F;作业个数</p><p>平均带权周转时间&#x3D;带权周转总时间&#x2F;作业个数</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>用高级语言编写和调试进程调度的模拟程序，以加深对进程调度算法的理解</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1、 自定义进程相关的数据结构</p><p>2、 实现先来先服务算法、时间片轮转算法、最高优先权优先调度算法、最短进程优先调度算法</p><p>3、 测试以上进程调度策略的周转时间、带权周转时间、平均周转时间和平均带权周转时间，并定性评价它们的性能</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runattribute</span><span class="params">(attribute[] ab)</span> &#123;<span class="comment">// 运行调用</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请选择排序方式&quot;</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.先到先服务  2.最短进程优先 3.时间片转轮 4.抢占式高优先权 0退出&quot;</span>);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                ab = InputTimesort(ab);</span><br><span class="line">                OutputAttribute(ab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                ab = Short_jobs_take_precedence(ab, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                OutputAttribute(ab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入时间片时间&quot;</span>);</span><br><span class="line">                n = in.nextInt();</span><br><span class="line">                Time_slice_rotation(ab, n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                ab = priorityTimesort(ab, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                OutputAttribute(ab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为进程定义一个对象"><a href="#为进程定义一个对象" class="headerlink" title="为进程定义一个对象"></a>为进程定义一个对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">attribute</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">runname</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 给当前进度起名字</span></span><br><span class="line"><span class="type">int</span> Run_time;<span class="comment">// 需要服务时间</span></span><br><span class="line"><span class="type">int</span> input_time;<span class="comment">// 输入时间</span></span><br><span class="line"><span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 进程序号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="type">int</span> name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">attribute</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">attribute</span><span class="params">(<span class="type">int</span> input_time, <span class="type">int</span> run_time)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.Run_time = run_time;</span><br><span class="line"><span class="built_in">this</span>.input_time = input_time;</span><br><span class="line">runname++;</span><br><span class="line"><span class="built_in">this</span>.name = runname + <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRun_time</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Run_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRun_time</span><span class="params">(<span class="type">int</span> run_time)</span> &#123;</span><br><span class="line">Run_time = run_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInput_time</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> input_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInput_time</span><span class="params">(<span class="type">int</span> input_time)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.input_time = input_time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先来先服务"><a href="#先来先服务" class="headerlink" title="先来先服务"></a>先来先服务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先到先服务，对输入时间排序(冒泡排序)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> attribute[] InputTimesort(attribute[] ab) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">J</span> <span class="operator">=</span> i; J &lt; ab.length; J++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ab[J].getInput_time() &lt; ab[i].getInput_time()) &#123;</span><br><span class="line">min = J;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swat(ab, i, min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短进程优先"><a href="#最短进程优先" class="headerlink" title="最短进程优先"></a>最短进程优先</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最短进程优先</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> attribute[] Short_jobs_take_precedence(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> Begin) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min_Run_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 获取运行时间之前的运行时间最短的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ab[j].input_time &lt;= i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min_Run_time == -<span class="number">1</span>) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">                min_Run_time = ab[j].Run_time;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (min_Run_time &gt; ab[j].Run_time) &#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">        min_Run_time = ab[Begin].Run_time;</span><br><span class="line">        min_input_time = ab[Begin].input_time;</span><br><span class="line">        index = Begin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[j].input_time &lt; min_input_time) &#123;</span><br><span class="line">                min_input_time = ab[j].input_time;</span><br><span class="line">                index = j;</span><br><span class="line">                min_Run_time = ab[j].Run_time;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[j].input_time == min_input_time) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min_Run_time &lt; ab[j].Run_time) &#123;</span><br><span class="line">                        min_input_time = ab[j].input_time;</span><br><span class="line">                        index = j;</span><br><span class="line">                        min_Run_time = ab[j].Run_time;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swat(ab, Begin, index);</span><br><span class="line">    <span class="keyword">if</span> (Begin + <span class="number">1</span> == ab.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ab;</span><br><span class="line">    &#125;</span><br><span class="line">    Short_jobs_take_precedence(ab, (min_input_time &gt; i ? min_input_time : i) + min_Run_time, Begin + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间片轮转"><a href="#时间片轮转" class="headerlink" title="时间片轮转"></a>时间片轮转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间片转轮</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> attribute[] Time_slice_rotation(attribute[] ab, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span>[] Alltime = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 完成需要时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ab.length; j++) &#123;</span><br><span class="line">        Alltime[j] = ab[j].Run_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] complete_Alltime = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 已完成时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="type">int</span> <span class="variable">complete</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 完成个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (complete &lt; ab.length) &#123;</span><br><span class="line">        index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[i].input_time &gt;= N * n) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Alltime[i] &lt;= complete_Alltime[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                min_input_time = ab[i].input_time;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ab[i].input_time &lt; min_input_time) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[index].input_time &gt; N * n - n) &#123;</span><br><span class="line">                complete_Alltime[index] = N * n - ab[index].input_time;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                complete_Alltime[index] += n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Alltime[index] &lt;= complete_Alltime[index]) &#123;</span><br><span class="line">                complete++;</span><br><span class="line">                complete_Alltime[index] = Alltime[index];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + N + <span class="string">&quot;个时间片 运行进程&quot;</span> + ab[index].name + <span class="string">&quot;进度为 &quot;</span> + complete_Alltime[index] + <span class="string">&quot;/&quot;</span></span><br><span class="line">                               + Alltime[index]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + N + <span class="string">&quot;个时间片 暂无进程进入&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抢占式高优先权"><a href="#抢占式高优先权" class="headerlink" title="抢占式高优先权"></a>抢占式高优先权</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抢占式高优先权</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> attribute[] priorityTimesort(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> Begin) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min_Run_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min_priority</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 获取运行时间之前的优先级最高的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ab[j].input_time &lt;= min_input_time) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min_Run_time == -<span class="number">1</span>) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">                min_Run_time = ab[j].Run_time;</span><br><span class="line">                min_priority = (ab[j].input_time - i) / ab[j].Run_time;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (min_priority &gt; (ab[j].input_time - i) / ab[j].Run_time) &#123;<span class="comment">// 优先级比我大</span></span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                    min_priority = (ab[j].input_time - i) / ab[j].Run_time;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">        min_Run_time = ab[Begin].Run_time;</span><br><span class="line">        min_input_time = ab[Begin].input_time;</span><br><span class="line">        index = Begin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[j].input_time &lt; min_input_time) &#123;<span class="comment">// 运行时间在我之前直接换</span></span><br><span class="line">                min_input_time = ab[j].input_time;</span><br><span class="line">                index = j;</span><br><span class="line">                min_Run_time = ab[j].Run_time;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[j].input_time == min_input_time) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min_input_time &lt; ab[j].Run_time) &#123;<span class="comment">// 运行时间小直接换</span></span><br><span class="line">                        min_input_time = ab[j].input_time;</span><br><span class="line">                        index = j;</span><br><span class="line">                        min_Run_time = ab[j].Run_time;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swat(ab, Begin, index);</span><br><span class="line">    <span class="keyword">if</span> (Begin + <span class="number">1</span> == ab.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ab;</span><br><span class="line">    &#125;</span><br><span class="line">    priorityTimesort(ab, (min_input_time &gt; i ? min_input_time : i) + min_Run_time, Begin + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="置换数组位置"><a href="#置换数组位置" class="headerlink" title="置换数组位置"></a>置换数组位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swat</span><span class="params">(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">attribute</span> <span class="variable">a</span> <span class="operator">=</span> ab[i];</span><br><span class="line">    ab[i] = ab[index];</span><br><span class="line">    ab[index] = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">OutputAttribute</span><span class="params">(attribute[] ab)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> ab[<span class="number">0</span>].input_time;</span><br><span class="line">    <span class="type">int</span> TimeSum[] = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 作业总周转时间</span></span><br><span class="line">    <span class="type">double</span> DTimeSum[] = <span class="keyword">new</span> <span class="title class_">double</span>[ab.length];<span class="comment">// 带权周转总时间</span></span><br><span class="line">    System.out.print(<span class="string">&quot;进程ID &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;到达时间 &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;服务时间 &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;完成时间 &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;周转时间  &quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;带权周转时间 \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ab[i].input_time &gt; time) &#123;</span><br><span class="line">            time = ab[i].input_time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(ab[i].name + <span class="string">&quot;\t  &quot;</span>);<span class="comment">// 进程ID</span></span><br><span class="line">        System.out.print(ab[i].input_time + <span class="string">&quot;\t    &quot;</span>);<span class="comment">// 到达时间</span></span><br><span class="line">        time += ab[i].Run_time;</span><br><span class="line">        System.out.print(ab[i].Run_time + <span class="string">&quot;\t    &quot;</span>);<span class="comment">// 服务时间</span></span><br><span class="line">        System.out.print(time + <span class="string">&quot;\t   &quot;</span>);<span class="comment">// 完成时间</span></span><br><span class="line">        TimeSum[i] = (time - ab[i].input_time);</span><br><span class="line">        System.out.print(TimeSum[i] + <span class="string">&quot;\t   &quot;</span>);<span class="comment">// 周转时间</span></span><br><span class="line">        DTimeSum[i] = (<span class="type">double</span>)(TimeSum[i] / ab[i].Run_time);</span><br><span class="line"></span><br><span class="line">        System.out.print(DTimeSum[i]);<span class="comment">// 带权周转时间</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;周转总时间:&quot;</span> + Arrays.stream(TimeSum).sum());</span><br><span class="line">    System.out.println(<span class="string">&quot;平均周转时间:&quot;</span> + (<span class="type">double</span>)Arrays.stream(TimeSum).sum()/ab.length);</span><br><span class="line">    System.out.println(<span class="string">&quot;带权周转总时间:&quot;</span> + Arrays.stream(DTimeSum).sum());</span><br><span class="line">    System.out.println(<span class="string">&quot;平均带权周转时间:&quot;</span> + Arrays.stream(DTimeSum).sum()/ab.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 模拟调度时间片 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义五个进程，attribure表示到达时间，服务时间</span></span><br><span class="line">        attribute[] ab = &#123; </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">8</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">16</span>, <span class="number">15</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">14</span>, <span class="number">25</span>) &#125;;</span><br><span class="line">        utils.runattribute(ab);<span class="comment">// 选择排序方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 操作系统实验;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟调度时间片</span></span><br><span class="line"><span class="comment"> * @author 张时贰</span></span><br><span class="line"><span class="comment"> * @data 2021年12月16日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 模拟调度时间片 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义五个进程，attribure表示到达时间，服务时间</span></span><br><span class="line">        attribute[] ab = &#123; </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">8</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">16</span>, <span class="number">15</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">attribute</span>(<span class="number">14</span>, <span class="number">25</span>) &#125;;</span><br><span class="line">        utils.runattribute(ab);<span class="comment">// 选择排序方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为进程定义一个对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">attribute</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">runname</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 给当前进度起名字</span></span><br><span class="line">    <span class="type">int</span> Run_time;<span class="comment">// 需要服务时间</span></span><br><span class="line">    <span class="type">int</span> input_time;<span class="comment">// 输入时间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 进程序号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="type">int</span> name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">attribute</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">attribute</span><span class="params">(<span class="type">int</span> input_time, <span class="type">int</span> run_time)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.Run_time = run_time;</span><br><span class="line">        <span class="built_in">this</span>.input_time = input_time;</span><br><span class="line">        runname++;</span><br><span class="line">        <span class="built_in">this</span>.name = runname + <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRun_time</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Run_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRun_time</span><span class="params">(<span class="type">int</span> run_time)</span> &#123;</span><br><span class="line">        Run_time = run_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInput_time</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInput_time</span><span class="params">(<span class="type">int</span> input_time)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.input_time = input_time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">utils</span> &#123;</span><br><span class="line">    <span class="comment">// 输出结果OutputAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">OutputAttribute</span><span class="params">(attribute[] ab)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> ab[<span class="number">0</span>].input_time;</span><br><span class="line">        <span class="type">int</span> TimeSum[] = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 作业总周转时间</span></span><br><span class="line">        <span class="type">double</span> DTimeSum[] = <span class="keyword">new</span> <span class="title class_">double</span>[ab.length];<span class="comment">// 带权周转总时间</span></span><br><span class="line">        System.out.print(<span class="string">&quot;进程ID &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;到达时间 &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;服务时间 &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;完成时间 &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;周转时间  &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;带权周转时间 \n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[i].input_time &gt; time) &#123;</span><br><span class="line">                time = ab[i].input_time;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(ab[i].name + <span class="string">&quot;\t  &quot;</span>);<span class="comment">// 进程ID</span></span><br><span class="line">            System.out.print(ab[i].input_time + <span class="string">&quot;\t    &quot;</span>);<span class="comment">// 到达时间</span></span><br><span class="line">            time += ab[i].Run_time;</span><br><span class="line">            System.out.print(ab[i].Run_time + <span class="string">&quot;\t    &quot;</span>);<span class="comment">// 服务时间</span></span><br><span class="line">            System.out.print(time + <span class="string">&quot;\t   &quot;</span>);<span class="comment">// 完成时间</span></span><br><span class="line">            TimeSum[i] = (time - ab[i].input_time);</span><br><span class="line">            System.out.print(TimeSum[i] + <span class="string">&quot;\t   &quot;</span>);<span class="comment">// 周转时间</span></span><br><span class="line">            DTimeSum[i] = (<span class="type">double</span>)(TimeSum[i] / ab[i].Run_time);</span><br><span class="line"></span><br><span class="line">            System.out.print(DTimeSum[i]);<span class="comment">// 带权周转时间</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;周转总时间:&quot;</span> + Arrays.stream(TimeSum).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;平均周转时间:&quot;</span> + (<span class="type">double</span>)Arrays.stream(TimeSum).sum()/ab.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;带权周转总时间:&quot;</span> + Arrays.stream(DTimeSum).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;平均带权周转时间:&quot;</span> + Arrays.stream(DTimeSum).sum()/ab.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runattribute</span><span class="params">(attribute[] ab)</span> &#123;<span class="comment">// 运行调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请选择排序方式&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1.先到先服务  2.最短进程优先 3.时间片转轮 4.抢占式高优先权 0退出&quot;</span>);</span><br><span class="line">            n = in.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    ab = InputTimesort(ab);</span><br><span class="line">                    OutputAttribute(ab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    ab = Short_jobs_take_precedence(ab, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    OutputAttribute(ab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入时间片时间&quot;</span>);</span><br><span class="line">                    n = in.nextInt();</span><br><span class="line">                    Time_slice_rotation(ab, n);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    ab = priorityTimesort(ab, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    OutputAttribute(ab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先到先服务，对输入时间排序(冒泡排序)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> attribute[] InputTimesort(attribute[] ab) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">J</span> <span class="operator">=</span> i; J &lt; ab.length; J++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[J].getInput_time() &lt; ab[i].getInput_time()) &#123;</span><br><span class="line">                    min = J;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swat(ab, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最短进程优先</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> attribute[] Short_jobs_take_precedence(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> Begin) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min_Run_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取运行时间之前的运行时间最短的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[j].input_time &lt;= i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (min_Run_time == -<span class="number">1</span>) &#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min_Run_time &gt; ab[j].Run_time) &#123;</span><br><span class="line">                        index = j;</span><br><span class="line">                        min_Run_time = ab[j].Run_time;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            min_Run_time = ab[Begin].Run_time;</span><br><span class="line">            min_input_time = ab[Begin].input_time;</span><br><span class="line">            index = Begin;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[j].input_time &lt; min_input_time) &#123;</span><br><span class="line">                    min_input_time = ab[j].input_time;</span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ab[j].input_time == min_input_time) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (min_Run_time &lt; ab[j].Run_time) &#123;</span><br><span class="line">                            min_input_time = ab[j].input_time;</span><br><span class="line">                            index = j;</span><br><span class="line">                            min_Run_time = ab[j].Run_time;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swat(ab, Begin, index);</span><br><span class="line">        <span class="keyword">if</span> (Begin + <span class="number">1</span> == ab.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> ab;</span><br><span class="line">        &#125;</span><br><span class="line">        Short_jobs_take_precedence(ab, (min_input_time &gt; i ? min_input_time : i) + min_Run_time, Begin + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swat</span><span class="params">(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">attribute</span> <span class="variable">a</span> <span class="operator">=</span> ab[i];</span><br><span class="line">        ab[i] = ab[index];</span><br><span class="line">        ab[index] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间片转轮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> attribute[] Time_slice_rotation(attribute[] ab, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] Alltime = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 完成需要时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ab.length; j++) &#123;</span><br><span class="line">            Alltime[j] = ab[j].Run_time;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] complete_Alltime = <span class="keyword">new</span> <span class="title class_">int</span>[ab.length];<span class="comment">// 已完成时间</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="type">int</span> <span class="variable">complete</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 完成个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (complete &lt; ab.length) &#123;</span><br><span class="line">            index = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ab.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[i].input_time &gt;= N * n) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Alltime[i] &lt;= complete_Alltime[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    min_input_time = ab[i].input_time;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ab[i].input_time &lt; min_input_time) &#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[index].input_time &gt; N * n - n) &#123;</span><br><span class="line">                    complete_Alltime[index] = N * n - ab[index].input_time;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    complete_Alltime[index] += n;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Alltime[index] &lt;= complete_Alltime[index]) &#123;</span><br><span class="line">                    complete++;</span><br><span class="line">                    complete_Alltime[index] = Alltime[index];</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + N + <span class="string">&quot;个时间片 运行进程&quot;</span> + ab[index].name + <span class="string">&quot;进度为 &quot;</span> + complete_Alltime[index] + <span class="string">&quot;/&quot;</span></span><br><span class="line">                                   + Alltime[index]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + N + <span class="string">&quot;个时间片 暂无进程进入&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            N++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抢占式高优先权</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> attribute[] priorityTimesort(attribute[] ab, <span class="type">int</span> i, <span class="type">int</span> Begin) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min_Run_time</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min_input_time</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min_priority</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 获取运行时间之前的优先级最高的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ab[j].input_time &lt;= min_input_time) &#123;</span><br><span class="line">                <span class="keyword">if</span> (min_Run_time == -<span class="number">1</span>) &#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                    min_priority = (ab[j].input_time - i) / ab[j].Run_time;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min_priority &gt; (ab[j].input_time - i) / ab[j].Run_time) &#123;<span class="comment">// 优先级比我大</span></span><br><span class="line">                        index = j;</span><br><span class="line">                        min_Run_time = ab[j].Run_time;</span><br><span class="line">                        min_priority = (ab[j].input_time - i) / ab[j].Run_time;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            min_Run_time = ab[Begin].Run_time;</span><br><span class="line">            min_input_time = ab[Begin].input_time;</span><br><span class="line">            index = Begin;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Begin; j &lt; ab.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab[j].input_time &lt; min_input_time) &#123;<span class="comment">// 运行时间在我之前直接换</span></span><br><span class="line">                    min_input_time = ab[j].input_time;</span><br><span class="line">                    index = j;</span><br><span class="line">                    min_Run_time = ab[j].Run_time;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ab[j].input_time == min_input_time) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (min_input_time &lt; ab[j].Run_time) &#123;<span class="comment">// 运行时间小直接换</span></span><br><span class="line">                            min_input_time = ab[j].input_time;</span><br><span class="line">                            index = j;</span><br><span class="line">                            min_Run_time = ab[j].Run_time;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swat(ab, Begin, index);</span><br><span class="line">        <span class="keyword">if</span> (Begin + <span class="number">1</span> == ab.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> ab;</span><br><span class="line">        &#125;</span><br><span class="line">        priorityTimesort(ab, (min_input_time &gt; i ? min_input_time : i) + min_Run_time, Begin + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ab;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><strong>先来先服务</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9401.png" alt="image-20211216173712589"></p><p><strong>最短进程优先</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9402.png" alt="image-20211216173725983"></p><p><strong>时间片轮转</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9403.png" alt="image-20211216173758581"></p><p><strong>抢占式高优先权</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9404.png" alt="image-20211216173737421"></p><h2 id="学习到的新东西"><a href="#学习到的新东西" class="headerlink" title="学习到的新东西"></a>学习到的新东西</h2><p>实验三学习了如何输出数组，数组的值传递，今天查到了如何调用API进行数组的一些计算</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(arr1).sum(); <span class="comment">// 求和</span></span><br><span class="line"><span class="type">OptionalDouble</span> <span class="variable">avg</span> <span class="operator">=</span> Arrays.stream(arr1).average(); <span class="comment">// 求平均值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">average</span> <span class="operator">=</span> avg.getAsDouble();</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Arrays.stream(arr1).min().getAsInt(); <span class="comment">// 最小值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(arr1).max().getAsInt(); <span class="comment">// 最大值</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr1 和 = &quot;</span> + sum + <span class="string">&quot;, 平均值 = &quot;</span> + average</span><br><span class="line">        + <span class="string">&quot;, 最小值 = &quot;</span> + min + <span class="string">&quot;, 最大值 = &quot;</span> + max);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9405.png" alt="image-20211216165046003"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>先来先服务算法：</strong>该算法思想是按照进入就绪队列的先后次序来分配处理机。采用非剥夺调度方式，即一旦某个进程占有处理机，就一直运行下去，直到该进程完成其工作或因等待某一事件而不能继续执行时才释放处理机</p><p>① 该算法原理简单，易于实现</p><p>② 各进程平等竞争</p><p>③ 由于各进程执行的时间不一样，从而导致相对不公平现象的产生</p><p>④ 该算法有利于长进程，不利于短进程</p><p>⑤ 该算法很少用来作为主调度策略，常常用作辅助调度算法使用</p><p><strong>短作业优先：</strong>按照进程所要求的运行时间来衡量。但对长作业不利，可能导致饥饿，难以做到真正的短作业优先</p><p><strong>最高优先权优先调度算法：</strong>为每个作业设置一个优先权(响应比)，调度之前先计算各作业的优先权。上述两种算法的权衡折中，综合考虑等待时间和运行时间。</p><p><strong>时间片轮转：</strong>根据先来先服务排序，以一个时间片为单位，依次执行不同的进程。公平，适用于分时系统，但频繁切换有开销，不区分优先级</p><p><strong>附王道考研知识点总结</strong></p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/操作系统实验/操作系统实验五07.png" alt="image-20211216174525839" style="zoom:80%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/操作系统实验/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%9406.png" alt="image-20211216174542619" style="zoom: 80%;" />]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吐槽</title>
      <link href="/posts/40608/"/>
      <url>/posts/40608/</url>
      
        <content type="html"><![CDATA[<p>关于小张的吐槽—痛恨当代大学生躺平行为<br>在CSDN已经写了20天博客啦！首先介绍一下自己，小张是某小二本的学生，大一学的安全工程，同时学了很多机械方面的设计、软件、车床加工零件，工作室带给了小张很多很多启发！所以大二跨专业转到了计算机，大二可以说是很吃力，代码哈哈，一多半都是抄的，第二个学期才开始手撕每一份代码！</p><p>关于博客，一共十八篇，收获了12个粉丝，9211次浏览，排名从158734到113785再到86497.想想也挺开心的，本来是想分享一些知识型的内容，学校课程有点小多，索性把作业整理成了知识点发了出来！没想到有这么多人看哈哈哈，同学说我手撕代码哈哈哈哈,操作系统实验一二大概是写的最认真的两篇了，也有一些网友私信问问题。这段时间经常白天写代码，晚上整理博客到一两点，第二天继续上课(瑞幸加JAVA，法力无边！)。每天写代码、整理知识点、发博客，真的让我好喜欢代码啊！浏览量和排名也给了小张很大的动力!!!但是最近发生点事情！</p><p>在最近一篇提到”最近发生了些不愉快“，很早就想写这篇文章了，不知道会不会有没有人看到哇！事情是这样，我们这学期学web前端(四个实验+课设+实践)，数字图像(四个实验+课设)，计算机图形学(六个实验+课设)，软件工程概论(六个实验+课设)，操作系统(六个实验)，数据库(四个实验+课设)，以上加粗是我已经完成的，也就是我的博客内容，这其中就难免有组队，有划水！首先，是课设，每门都有组队，但真正干活的就两三个，甚至小张自己一个人，班里很多人的心态都是抱哪个哪个大佬的大腿，但是小张真的很气，为什么要抱大腿？为什么选了计算机不好好学一学？(小二本教的东西也不算深)，昨天晚上真的要崩溃了，小张每天和好朋友一起完成实验完成课设，甚至熬夜，但是为什么其他人共享我们的成果？甚至答辩的时候小张都不知道我们组还有这个人？他什么时候进来的？还有人在答辩的时候问我咱组课设是什么主题？？？其中有一门课设，周日画了六点，内容不多所以一个人两点让他们好好学一下，好让他们答辩有个好的分数（六个人一组，我已经把课设做出来了），俩个男生就选一条，我重复了一遍要求，还是无动于衷。周二叫他们来开会，直接不来。小张都把课程设计写好了，硬带他们都带不动！其次，我昨天发现学校有两个完全不认识的两个人，copy了我的实验报告，部分内容我从未在博客展示过。我的实验报告被copy了很多，周围的同学，只要问我，我都会教他们怎么做，怎么改bug，他们会拿着我的模板认认真真的做一遍，包括私信也有认真回！但是那种把我数据，分析，截图，bug解决全带上copy成自己的实验报告，更何况小张都不认识他，真的很气很气。所以在外面寄宿安静了一晚上，我在想，曾经那个时代的青年，那么的朝气，活力，向上，现在的大学生到底怎么了？！曾经那个时代的大学生敢于游行敢于反抗，有思想有理想，现在呢？躺平？抱大腿？晚饭闲谈，发现这不就是人民公社运动么？集体抱团，劳动力剩余？明明是一个大组的课设，却交给了一个或两个人去做，为什么老师一定要分组呢，老师也已经说的很明白，老师希望每个组有人带他们，却变成了组长自己一个人的任务！</p><p>大概是最近压力太大了，乱吐槽一堆，因为带着小情绪最近博客质量小张感觉也没那么高了。上面这种现象我不认为只是我身边，我认为是普遍现象！但是小张真心觉得那些躺平的友友们，动一动吧！以后要就业的，要为自己生活的！计算机薪资多高！内卷多严重，不紧张的嘛。</p><p>最后祝大家键盘敲烂，月薪过万！</p><p><span style='color:black;background:yellow;font-size:50px;font-family:黑体;'>青年整个社会力量中最积极、最有生气的力量，国家的希望在青年，民族的未来在青年。青年兴则国家兴，青年强则国家强。青年一代有理想、有本领、有担当，国家就有前途，民族就有希望！谨以共勉</span></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验四 银行家算法(Banker’s Algorithm)</title>
      <link href="/posts/49728/"/>
      <url>/posts/49728/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四-模拟银行家算法"><a href="#实验四-模拟银行家算法" class="headerlink" title="实验四 模拟银行家算法"></a>实验四 模拟银行家算法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>参考教材《操作系统 第四版》汤小丹</li><li>最近发生了些不愉快，计划寒假系统更新一些知识(还没想好，计划是就业方向类的，可以推荐推荐哇)！感觉内容质量不高，仅供参考，只放全部代码，这次就不分开讲了</li></ul><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>了解掌握银行家算法，学会模拟实现资源分配，同时有要求编写和调试一个系统分配资源的简单模拟程序，观察死锁产生的条件，并使用</p><p>适当的算法，有效的防止和避免死锁的发生</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p><strong>1.实验背景</strong></p><p>在多道程序系统中，虽可借助与多个进程的并发执行，来改善系统的资源利用率，提高系统的吞吐量，但可能发生一种危险—死琐。</p><p>产生死锁的原因可归结为两点：</p><p>1)竞争资源。当系统中供多个进程共享的资源如打印机、公用队列等，其数目不足以满足诸进程的需要时，会引起诸进程对资源的竞争而产生死锁。</p><p>2)进程间推进顺序非法。进程在运行过程中，请求和释放资源的顺序不当，也同样会导致产生进程死锁。</p><p>最有代表性的避免死锁的算法，是Dijkstra的银行家算法。这是由于该算法能用与银行系统现金贷款的发放而得名的</p><p><strong>什么是银行家算法?</strong><br>　　银行家算法（Banker’s Algorithm）是一个避免死锁（Deadlock）的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。<br>　　在银行中，客户申请贷款的数量是有限的，每个客户在第一次申请贷款时要声明完成该项目所需的最大资金量，在满足所有贷款要求时，客户应及时归还。银行家在客户申请的贷款数量不超过自己拥有的最大值时，都应尽量满足客户的需要。在这样的描述中，银行家就好比操作系统，资金就是资源，客户就相当于要申请资源的进程。<br>　　银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。为实现银行家算法，系统必须设置若干数据结构</p><p><strong>2.算法描述</strong></p><p>  设Request[i] 是进程Pi的请求向量，如果Requesti[j]&#x3D;K,表示进程Pi需要K个Rj类型的资源，当Pi发出资源请求后，系统按下面步骤进行检查：</p><p>（1）如果Requesti[j]&lt;&#x3D;Need[i,j]，便转向步骤2；否则认为出错，因为它所需要的资源数已超过它所宣布的最大值。</p><p>（2）如果Requesti[j]&lt;&#x3D;Available[j],便转向步骤3；否则，表示尚无足够资源，Pi须等待。</p><p>（3）系统试探着把资源分配给进程Pi，并修改下面数据结构中的数值：</p><p>Available[j]:&#x3D;Available[j]-Requesti[j];</p><p>Allocation[i,j]:&#x3D;Allocation[i,j]+Requesti[j];</p><p>Need[i,j]:&#x3D;Need[i,j]-Requesti[j];</p><p>（4）系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则，将本次的试探分配作废，恢复原来的资源分配状态，让进程Pi等待</p><p>3.数据结构</p><p>银行家算法中的数据结构：</p><p>（1） 可利用资源向量Available。这是一个含有n个元素的数组，其中的每一个元素代表一类可利用的资源数目，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态地改变。如果Available[j]&#x3D;K,则表示系统中现有Rj类资源K个</p><p>（2）最大需求矩阵Max。这是一个m*n的矩阵，它定义了系统中n个进程中每一个进程对m类资源的最大需求。如果Max[i,j]&#x3D;K,则表示进程i需要Rj类资源的最大数目为K</p><p>（3）分配矩阵Allocation。这也是一个m*n的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[i,j]&#x3D;K,则表示进程i当前已分得Rj类资源的数目为K</p><p>（4）需求矩阵Need1。这也是一个n*m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[i,j]&#x3D;K,则表示进程i还需要Rj类资源K个，方能完成其任务</p><p>(5) 工作数组Work。这是一个含有n个元素的数组，它代表可以提供分配的资源数，初始值是Available中的数值，随着资源的回收，它的值也会改变，公式是Work[i]&#x3D;Work[i]+Allocation[i]</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B01.png" alt="image-20211214205632904"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 操作系统实验;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 银行家算法</span></span><br><span class="line"><span class="comment"> * @author 张时贰</span></span><br><span class="line"><span class="comment"> * @data 2021年12月14日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 银行家算法 &#123;</span><br><span class="line">    <span class="comment">// 首先定义全局变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">resourceNum</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 初始资源种类数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">processNum</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 初始进程数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] available = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span> &#125;; <span class="comment">// 可用（剩余）资源j的数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] maxRequest = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123; &#123; <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span> &#125;, &#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span> &#125;, &#123; <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span> &#125;, &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span> &#125;, &#123; <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span> &#125; &#125;; <span class="comment">// 进程i对资源j的最大需求量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] allocation = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span> &#125;, &#123; <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span> &#125; &#125;; <span class="comment">// 进程i已分配资源j的数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] need = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123; &#123; <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span> &#125;, &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span> &#125;, &#123; <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span> &#125; &#125;; <span class="comment">// 进程i还需资源j的数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] finish = <span class="keyword">new</span> <span class="title class_">boolean</span>[] &#123; <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span> &#125;; <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] safeSeries = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;; <span class="comment">// 安全序列号</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] request = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;; <span class="comment">// 进程请求资源j的数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num; <span class="comment">// 资源数量计数</span></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印：初始资源、进程信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**************************************************************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前系统各类资源剩余:&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(available));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;\n当前系统资源情况：\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot; PID\t\t maxRequest\tAllocation\t Need\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot; P%d\t\t&quot;</span>, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%2d&quot;</span>, maxRequest[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%2d&quot;</span>, allocation[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%2d&quot;</span>, need[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印安全检查信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> work 工作向量，表示系统可提供给进程继续运行所需的各类资源数目</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i    第i个进程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">safeInfo</span><span class="params">(<span class="type">int</span>[] work, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        System.out.printf(<span class="string">&quot; P%d\t\t&quot;</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, work[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, allocation[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, need[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, allocation[i][j] + work[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个进程的资源数是否全为0，全为0，则说明已执行完毕，可释放其持有的资源</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 第i个进程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAllZero</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (need[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 进程i已完成</span></span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num == resourceNum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 安全性检查</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">Safe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">safeIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">allFinishNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 工作向量，表示系统可提供给进程继续运行所需的各类资源数目</span></span><br><span class="line">        <span class="type">int</span>[] work = <span class="keyword">new</span> <span class="title class_">int</span>[resourceNum];</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 第r个进程</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">            work[j] = available[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标识进程完成（true）或未完成（false）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAllZero(i)) &#123;</span><br><span class="line">                finish[i] = <span class="literal">true</span>;</span><br><span class="line">                allFinishNum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预分配开始</span></span><br><span class="line">        <span class="keyword">while</span> (allFinishNum != processNum) &#123; <span class="comment">// 进程并未全部完成</span></span><br><span class="line">            num = <span class="number">0</span>; <span class="comment">// 进程r，所需资源种类数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                <span class="comment">// 当某进程未完成，且其资源需求量小于当前系统中该资源的剩余量时</span></span><br><span class="line">                <span class="keyword">if</span> (need[r][j] &lt;= work[j] &amp;&amp; finish[r] == <span class="literal">false</span>) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == resourceNum) &#123; <span class="comment">// 当num等于resourceNum时，说明 进程r 的三种资源情况都满足上述if条件，即都可以分配成功</span></span><br><span class="line">                allFinishNum++;</span><br><span class="line">                safeInfo(work, r);</span><br><span class="line">                safeSeries[safeIndex] = r;</span><br><span class="line">                safeIndex++;</span><br><span class="line">                finish[r] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123; <span class="comment">// 进程执行完毕，释放 进程r 所持有的资源</span></span><br><span class="line">                    work[j] = work[j] + allocation[r][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span> (r &gt;= processNum) &#123;</span><br><span class="line">                r = r % processNum;</span><br><span class="line">                <span class="keyword">if</span> (temp == allFinishNum) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = allFinishNum;</span><br><span class="line">            &#125;</span><br><span class="line">            pNum = allFinishNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断系统是否安全</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (finish[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;\n当前系统不安全！\n\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印安全序列</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;\n当前系统安全~\n\n安全序列为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAllZero(i)) &#123;</span><br><span class="line">                pNum--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pNum; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d &quot;</span>, safeSeries[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curProcess</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        showInfo();</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n\n系统安全情况分析：\n&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot; PID\t\t Work\t\t Allocation\t Need\t\t Work+Allocation\n&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">safe</span> <span class="operator">=</span> Safe();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (safe) &#123;</span><br><span class="line">            <span class="comment">// 用户输入或预设系统资源分配合理才继续进行进程分配工作</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (curProcess &gt;= processNum || curProcess &lt; <span class="number">0</span>) &#123; <span class="comment">// 注：进程标识序列从0开始</span></span><br><span class="line">                    System.out.printf(<span class="string">&quot;\n请不要输入超出进程数量的值或其他字符：\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.printf(<span class="string">&quot;\n**************************************************************\n&quot;</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;\n输入要分配的进程：&quot;</span>);</span><br><span class="line">                curProcess = scanner.nextInt(); <span class="comment">// 接收用户输入的进程号</span></span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125; <span class="keyword">while</span> (curProcess &gt;= processNum || curProcess &lt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用户输入或预设系统资源分配合理才继续进行进程分配工作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">requestJ</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (requestJ &lt; <span class="number">0</span> || requestJ &gt; available[j]) &#123;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;\n请不要输入超出进程所需资源数量或输入为负数或其他字符：\n&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;请输入要分配给进程 P%d 的第 %d 类资源：&quot;</span>, curProcess, j + <span class="number">1</span>);</span><br><span class="line">                    requestJ = scanner.nextInt();</span><br><span class="line">                    request[j] = requestJ;</span><br><span class="line">                &#125; <span class="keyword">while</span> (requestJ &lt; <span class="number">0</span> || requestJ &gt; available[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断用户输入的分配是否合理，合理则进行预分配</span></span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (request[j] &lt;= need[curProcess][j] &amp;&amp; request[j] &lt;= available[j]) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;\n发生错误！可能原因如下：\n(1)您请求分配的资源可能大于该进程的某些资源的最大需要！\n(2)系统所剩的资源已经不足了！\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == resourceNum) &#123;</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                    <span class="comment">// 更新资源信息</span></span><br><span class="line">                    available[j] = available[j] - request[j];</span><br><span class="line">                    allocation[curProcess][j] = allocation[curProcess][j] + request[j];</span><br><span class="line">                    need[curProcess][j] = need[curProcess][j] - request[j];</span><br><span class="line">                    <span class="keyword">if</span> (need[curProcess][j] == <span class="number">0</span>) &#123; <span class="comment">// 此进程的资源j已满足所需</span></span><br><span class="line">                        num++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果分配以后，该进程对所有所需资源需求为0，那么视为完成，释放此进程</span></span><br><span class="line">                <span class="keyword">if</span> (num == resourceNum) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                        available[j] = available[j] + allocation[curProcess][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;\n\n本次分配进程 P%d 完成,该进程占用资源全部释放完毕！\n&quot;</span>, curProcess);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;\n\n本次分配进程 P%d 未完成！\n&quot;</span>, curProcess);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                showInfo();</span><br><span class="line">                System.out.printf(<span class="string">&quot;\n系统安全情况分析\n&quot;</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot; PID\t\t Work\t\tAllocation\t Need\t\tWork+Allocation\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 预分配完成以后，判断该系统是否安全，若安全，则可继续进行分配，若不安全，将已经分配的资源换回来</span></span><br><span class="line">                <span class="keyword">if</span> (!Safe()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">                        available[j] = available[j] + request[j];</span><br><span class="line">                        allocation[curProcess][j] = allocation[curProcess][j] - request[j];</span><br><span class="line">                        need[curProcess][j] = need[curProcess][j] + request[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;资源不足，等待中...\n\n分配失败！\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B02.png" alt="image-20211214205827356"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B03.png" alt="image-20211214205843315"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B00.png" alt="image-20211214205854450"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B05.png" alt="image-20211214205924825"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B06.png" alt="image-20211214210035309"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E5%9B%9B09.png" alt="image-20211214205907366"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。为实现银行家算法，系统必须设置若干数据结构</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验四 触发器与存储过程实验(SQL入门教学三 从0到1）</title>
      <link href="/posts/64903/"/>
      <url>/posts/64903/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四-触发器与存储过程实验"><a href="#实验四-触发器与存储过程实验" class="headerlink" title="实验四 触发器与存储过程实验"></a>实验四 触发器与存储过程实验</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>实验内容和要求</p><p>（1）触发器的使用</p><pre><code>      ①在数据表“学生”中创建update触发器，级联更新“选课”表相应的记录        ②利用新表，将“学生”表中被删除的记录存储到“学生备份”表中，以供日后的数据查询和分析    （2）存储过程的使用        ①在建立的数据库中，建立一个存储过程，要求统计计算机系学生的人数，并将人数返回给用户        ②在建立的数据库中，建立一个存储过程，要求            统计成绩大于等于90分学生的人数             统计成绩大于等于80分并且小于90分学生的人数，并将人数返回给用户</code></pre></li><li><p>参考教材《数据库系统概论第五版》&#x3D;&#x3D;P168 触发器 P255 8.3存储过程和函数&#x3D;&#x3D; </p></li><li><p>参考博客<a href="https://blog.csdn.net/qq_43287952/article/details/106624130?ops_request_misc=%7B%22request_id%22:%22163938614616780357234823%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163938614616780357234823&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-106624130.pc_search_insert_es_download&utm_term=+%E8%A7%A6%E5%8F%91%E5%99%A8%E4%B8%8E%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%AE%9E%E9%AA%8C&spm=1018.2226.3001.4187">数据库实验存储过程和触发器</a></p></li><li><p>触发器和存储函数这里知识点十分多，建议另外去找一些视频课和书籍系统学习</p></li><li><p>到了实验四，这个专栏就停止更新啦！四个实验只是带大家入门SQL，系统学习还是配套书籍和课本效果更好！</p></li><li><p>实验前,先熟悉常用的语句,方便理解以下代码(个人整理，如有错误，欢迎指正)</p></li></ul><h2 id="SQL知识点"><a href="#SQL知识点" class="headerlink" title="SQL知识点"></a>SQL知识点</h2><h3 id="一、触发器"><a href="#一、触发器" class="headerlink" title="一、触发器"></a>一、触发器</h3><p><strong>触发器：</strong>是用户定义在关系表上的一类由事件驱动的特殊过程。一旦定义，触发器将被保存在数据库服务器中。热河用户对表的增、删、改操作均有服务器自动激活相应的触发器，在关系数据库管理系统核心层进行集中的完整性控制。触发器类似于约束，但是比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和强大的数据控制能力</p><p>当对表SC的Grade属性进行修改时，若分数增加了10%，则将此次操作记录到另一个表SC_U(Sno、Cno、Oldgrade、Newgrade),其中Oldgrade是修改前的分数，Newgrade是修改后的分数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> SC_T <span class="comment">/*SC_T是触发器的名字*/</span></span><br><span class="line">AFTER <span class="keyword">UPDATE</span> <span class="keyword">OF</span> Grade <span class="keyword">ON</span> SC <span class="comment">/*UPDATE OF...是触发事件*/</span></span><br><span class="line"><span class="comment">/*AFTER是触发时机，表示当对SC的Grade属性修改完成后再触发下面的规则*/</span></span><br><span class="line"><span class="keyword">REFERENCING</span></span><br><span class="line">OLDROW <span class="keyword">AS</span> OldTuple,</span><br><span class="line">NEWROW <span class="keyword">AS</span> NewTuple</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="comment">/*行级触发器，即每执行依次Grade的更新，下面的规则就执行一次*/</span></span><br><span class="line"><span class="keyword">WHEN</span>(<span class="keyword">New</span> Tuple.Grade<span class="operator">&gt;=</span><span class="number">1.1</span><span class="operator">*</span>OldTuple.Grade) <span class="comment">/*触发器条件，只有该条件为真时才执行下面的INSERT操作*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC_U(Sno,Cno,OldGrade,NewGrade) </span><br><span class="line"><span class="keyword">VALUES</span>(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade)</span><br></pre></td></tr></table></figure><p><code>FOR EACH STATEMENT</code>语级触发器，执行完后面的语句才执行一次。</p><h3 id="二、存储过程"><a href="#二、存储过程" class="headerlink" title="二、存储过程"></a>二、存储过程</h3><p>SQL中存储过程优点：</p><p>1、重复使用。存储过程可以重复使用，从而可以减少数据库开发人员的工作量</p><p>2、减少网络流量。存储过程位于服务器上，调用的时候只需要传递存储过程的名称以及参数就可以了，因此降低了网络传输的数据量</p><p>3、安全性。参数化的存储过程可以防止SQL注入式攻击，而且可以将Grant、Deny以及Revoke权限应用于存储过程</p><p>4、存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度</p><p><strong>2.1创建存储过程</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> 过程名([参数<span class="number">1</span>,参数<span class="number">2</span>,...]) <span class="comment">/*存储过程首部*/</span></span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span>过程化<span class="keyword">SQL</span>块<span class="operator">&gt;</span>; <span class="comment">/*存储过程体，描述该存储过程的操作*/</span></span><br></pre></td></tr></table></figure><p><strong>这里以银行存储为例子，不用学籍管理数据库</strong></p><p>建立新表Account并插入两个账户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Account</span><br><span class="line">(</span><br><span class="line">accountnum <span class="type">CHAR</span>(<span class="number">3</span>),<span class="comment">-- 账户编号</span></span><br><span class="line">total <span class="type">FLOAT</span><span class="comment">-- 账户余额</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Account <span class="keyword">VALUES</span>(<span class="number">101</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Account <span class="keyword">VALUES</span>(<span class="number">102</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Account;</span><br></pre></td></tr></table></figure><p>从账户1转指定数额款项到账户2中.假定账户关系为Account（Accountnum，Toral）,利用存储过程实现如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> TRANSFER(inAccount <span class="type">INT</span>,outAccount <span class="type">INT</span>,amount <span class="type">FLOAT</span>)</span><br><span class="line"><span class="comment">/*定义存储过程TRANSFER，其参数为转入账户，转出账户，转账额度*/</span></span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">DECLARE</span> <span class="comment">/*定义变量*/</span></span><br><span class="line">  totalDepositOut <span class="type">Float</span>;</span><br><span class="line">  totalDepositIn <span class="type">Float</span>;</span><br><span class="line">  inAccountnum <span class="type">INT</span>; <span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">BEGIN</span>   <span class="comment">/*检查转出账户的余额*/</span></span><br><span class="line">  <span class="keyword">SELECT</span> total <span class="keyword">INTO</span> totalDepositOut <span class="keyword">FROM</span> Account </span><br><span class="line">  <span class="keyword">WHERE</span> Accountnum <span class="operator">=</span> outAccount; <span class="comment">/*将Account表中的转出账户的余额赋给对应变量*/</span></span><br><span class="line">  IF totalDepositOut <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span>  <span class="comment">/*如果转出账户不存在或账户中没有存款*/</span></span><br><span class="line">      <span class="keyword">ROLLBACK</span>; <span class="comment">/*回滚事务*/</span></span><br><span class="line">      <span class="keyword">RETURN</span></span><br><span class="line">  <span class="keyword">END</span> IF; <span class="comment">/*转出账户不存在，回滚*/</span></span><br><span class="line">  IF totalDepositOut <span class="operator">&lt;</span> amount <span class="keyword">THEN</span> <span class="comment">/*如果账户存款不足*/</span></span><br><span class="line">      <span class="keyword">ROLLBACK</span>; <span class="comment">/*回滚事务*/</span></span><br><span class="line">      <span class="keyword">RETURN</span></span><br><span class="line">  <span class="keyword">END</span> IF; <span class="comment">/*账户余额不足，回滚*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Accountnum <span class="keyword">INTO</span> inAccountnum <span class="keyword">FROM</span> Account</span><br><span class="line"><span class="keyword">WHERE</span> Accountnum <span class="operator">=</span> inAccount;</span><br><span class="line">IF inAccount <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="comment">/*如果转入账户不存在*/</span></span><br><span class="line">   <span class="keyword">ROLLBACK</span>; <span class="comment">/*回滚事务*/</span></span><br><span class="line">   <span class="keyword">RETURN</span></span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Account <span class="keyword">SET</span> total<span class="operator">=</span>total<span class="operator">-</span>amount <span class="keyword">WHERE</span> accountnum <span class="operator">=</span> outAccount;<span class="comment">/*修改转出账户余额，减去转出金额*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> Account <span class="keyword">SET</span> total <span class="operator">=</span> total <span class="operator">+</span> amount <span class="keyword">WHERE</span> accountnum <span class="operator">=</span> inAccount; <span class="comment">/*修改转入账户余额，增加转入额*/</span></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">/*提交转账事务*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><strong>2.2执行存储过程</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span><span class="operator">/</span>PERFORM <span class="keyword">PROCEDURE</span> 过程名([参数<span class="number">1</span>,参数<span class="number">2</span>,...]);</span><br></pre></td></tr></table></figure><p>从账户01003815868转10000元到01003813828账户中</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> <span class="keyword">PROCEDURE</span> TRANSFER(<span class="number">01003815868</span>,<span class="number">01003813828</span>,<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><strong>2.3修改存储过程</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> 过程名<span class="number">1</span> RENAME <span class="keyword">TO</span> 过程名<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>2.4删除存储过程</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 过程名();</span><br></pre></td></tr></table></figure><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1-触发器的使用"><a href="#1-触发器的使用" class="headerlink" title="1.触发器的使用"></a>1.触发器的使用</h3><h4 id="1-1在数据表“学生”中创建update触发器，级联更新“选课”表相应的记录"><a href="#1-1在数据表“学生”中创建update触发器，级联更新“选课”表相应的记录" class="headerlink" title="1.1在数据表“学生”中创建update触发器，级联更新“选课”表相应的记录"></a>1.1在数据表“学生”中创建update触发器，级联更新“选课”表相应的记录</h4><p>首先为表SC添加级联(在实验一建表的时候没有添加级联，如果已经有了就跳过这步)</p><p>按照下面四张图依次点击</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E5%AE%9E%E9%AA%8C%E5%9B%9B01.png" alt="image-20211213100119410"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B02.png" alt="image-20211213100146474"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B03.png" alt="image-20211213100220377"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B04.png" alt="image-20211213100244003"></p><p>依次点开学籍管理-表-Student-触发器-新建触发器</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B05.png" alt="image-20211213090822471"></p><p>这里新建触发器，在数据库已经给出了模板，只需要修改即可</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Stu_UPDATE</span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line">AFTER <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@bsno</span> <span class="type">char</span>(<span class="number">9</span>),<span class="variable">@asno</span> <span class="type">char</span>(<span class="number">9</span>)</span><br><span class="line"><span class="comment">--&#x27;使用UPDATE触发器级联更新SC表中相关的行&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@bsno</span><span class="operator">=</span>Sno <span class="keyword">FROM</span> DELETED</span><br><span class="line">PRINT <span class="string">&#x27;更新前的学号:&#x27;</span><span class="operator">+</span><span class="variable">@bsno</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@asno</span> <span class="operator">=</span>Sno <span class="keyword">FROM</span> INSERTED</span><br><span class="line">PRINT <span class="string">&#x27;更新后的学号:&#x27;</span><span class="operator">+</span><span class="variable">@asno</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> SC <span class="keyword">SET</span> Sno<span class="operator">=</span><span class="variable">@asno</span> <span class="keyword">WHERE</span> SC.Sno<span class="operator">=</span><span class="variable">@bsno</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>测试结果,将192054401更改为192054481</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sno<span class="operator">=</span><span class="string">&#x27;192054481&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;192054401&#x27;</span>;</span><br></pre></td></tr></table></figure><p>运行结果如图，此时在SC和Student表该学生信息都被修改</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B06.png" alt="image-20211213103058394"></p><h4 id="1-2利用新表，将“学生”表中被删除的记录存储到“学生备份”表中，以供日后的数据查询和分析"><a href="#1-2利用新表，将“学生”表中被删除的记录存储到“学生备份”表中，以供日后的数据查询和分析" class="headerlink" title="1.2利用新表，将“学生”表中被删除的记录存储到“学生备份”表中，以供日后的数据查询和分析"></a>1.2利用新表，将“学生”表中被删除的记录存储到“学生备份”表中，以供日后的数据查询和分析</h4><p>同理，在Student表中新建触发器，<strong>不能在同一个触发器中写两个</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> Stu_DELETE</span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line">AFTER <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- SET NOCOUNT ON added to prevent extra result sets from</span></span><br><span class="line"><span class="comment">-- interfering with SELECT statements.</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student_BACK <span class="comment">--在触发器中新建一个表</span></span><br><span class="line">(Sno <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Sname <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line"> Ssex <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Dno <span class="type">char</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">PRINT <span class="string">&#x27;使用DELETE触发器备份删除Student表中相关的行-开始&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student_BACK</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> DELETED</span><br><span class="line">PRINT <span class="string">&#x27;使用DLETED触发器备份删除Student表中相关一行-结束&#x27;</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>测试结果,删除192054401的学生信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;192054401&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B07.png" alt="image-20211213104657686"></p><p>查看Student_BACK表信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student_BACK;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B08.png" alt="image-20211213104810227"></p><h3 id="2-存储过程的使用"><a href="#2-存储过程的使用" class="headerlink" title="2.存储过程的使用"></a>2.存储过程的使用</h3><p>这里先介绍一下如何建立存储过程，依次点击下图，同样SQL Serve已经给出说明，只需要修改下面的代码即可</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B09.png" alt="image-20211213105216434"></p><h4 id="2-1在建立的数据库中，建立一个存储过程，要求统计计算机系学生的人数，并将人数返回给用户"><a href="#2-1在建立的数据库中，建立一个存储过程，要求统计计算机系学生的人数，并将人数返回给用户" class="headerlink" title="2.1在建立的数据库中，建立一个存储过程，要求统计计算机系学生的人数，并将人数返回给用户"></a>2.1在建立的数据库中，建立一个存储过程，要求统计计算机系学生的人数，并将人数返回给用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> proc Num (<span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">15</span>),<span class="variable">@b</span> <span class="type">int</span> output)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@b</span> <span class="operator">=</span> <span class="built_in">COUNT</span>(sno) <span class="keyword">from</span> Student <span class="keyword">where</span> sdept <span class="operator">=</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>执行语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@num</span> <span class="type">char</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> Num <span class="string">&#x27;计算机工程系&#x27;</span>,<span class="variable">@num</span> output;</span><br><span class="line">PRINT <span class="variable">@num</span><span class="operator">+</span><span class="string">&#x27;人&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B10.png" alt="image-20211213181605023"></p><h4 id="2-2统计成绩大于等于90分学生的人数"><a href="#2-2统计成绩大于等于90分学生的人数" class="headerlink" title="2.2统计成绩大于等于90分学生的人数"></a>2.2统计成绩大于等于90分学生的人数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Proc_count</span><br><span class="line"><span class="variable">@Sdept</span> <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="variable">@num</span> <span class="type">SMALLINT</span> OUTPUT</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span><span class="operator">=</span><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="variable">@Sdept</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@sd</span> <span class="type">varchar</span>(<span class="number">20</span>),<span class="variable">@n</span> <span class="type">SMALLINT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="variable">@Sdept</span><span class="operator">=</span><span class="string">&#x27;计算机工程系&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> Proc_count <span class="variable">@sd</span>,<span class="variable">@n</span> OUTPUT</span><br><span class="line">PRINT <span class="variable">@n</span><span class="comment">--convert(varchar(6),@n)</span></span><br></pre></td></tr></table></figure><p>使用SQL创建储存</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Grade_num(<span class="variable">@n</span> <span class="type">INT</span> OUTPUT)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@n</span><span class="operator">=</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> Grade<span class="operator">&gt;=</span><span class="number">90</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>执行存储过程</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B11.png" alt="image-20211213175949429"></p><p>执行结果</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B12.png" alt="image-20211213180020564"></p><p>这里扩展一个问题</p><p>实现根据用户输入的院系编号参数，查找该学院的学生人数，并以变量形式输出的功能</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> proc sp_sdept_student2 (<span class="variable">@a</span> <span class="type">varchar</span>(<span class="number">15</span>),<span class="variable">@b</span> <span class="type">int</span> output)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@b</span> <span class="operator">=</span> <span class="built_in">COUNT</span>(sno) <span class="keyword">from</span> Student <span class="keyword">where</span> sdept <span class="operator">=</span> <span class="variable">@a</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里写了两种执行结果的调用,注意&#x3D;&#x3D;num定义&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@num</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> sp_sdept_student2 <span class="string">&#x27;数学系&#x27;</span>,<span class="variable">@num</span> output;</span><br><span class="line">PRINT <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@num</span> <span class="type">char</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> sp_sdept_student2 <span class="string">&#x27;数学系&#x27;</span>,<span class="variable">@num</span> output;</span><br><span class="line">PRINT <span class="variable">@num</span><span class="operator">+</span><span class="string">&#x27;人&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B13.png" alt="image-20211213174547265"></p><h4 id="2-3统计成绩大于等于80分并且小于90分学生的人数，并将人数返回给用户"><a href="#2-3统计成绩大于等于80分并且小于90分学生的人数，并将人数返回给用户" class="headerlink" title="2.3统计成绩大于等于80分并且小于90分学生的人数，并将人数返回给用户"></a>2.3统计成绩大于等于80分并且小于90分学生的人数，并将人数返回给用户</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> PROC_ST <span class="variable">@n1</span> <span class="type">SMALLINT</span> OUTPUT</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@n1</span> <span class="operator">=</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> Grade<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> Grade<span class="operator">&lt;</span><span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@n1</span> <span class="type">SMALLINT</span></span><br><span class="line"><span class="keyword">EXEC</span>  PROC_ST <span class="variable">@n1</span> OUTPUT,PRINT <span class="keyword">convert</span>(<span class="type">varchar</span>(<span class="number">6</span>),<span class="variable">@n1</span>) </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>使用SQL创建储存</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Grade_num2(<span class="variable">@n</span> <span class="type">INT</span> OUTPUT)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@n</span><span class="operator">=</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> Grade<span class="operator">&lt;</span><span class="number">90</span> <span class="keyword">AND</span> Grade<span class="operator">&gt;=</span><span class="number">80</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B14.png" alt="image-20211213180122876"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>触发器和存储过程何时执行？</p><p>触发器相当于是一个时间的触发装置，当满足了触发事件的条件后进行相应的处理操作，例如在数据库表中增加或者删除、修改了某条记录后，输出消息来告知该操作。这样就可以在这个表上设置一个触发器，触发条件为增加，删除或者修改了记录，触发的时间就是进行消息通知的输出.存储过程只有调用时才会执行</p><p>触发器能否带参数？</p><p>不能</p>]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学实验报告汇总</title>
      <link href="/posts/35182/"/>
      <url>/posts/35182/</url>
      
        <content type="html"><![CDATA[<h1 id="TIT-计算机图形学-实验一-制作平面体或者二次曲面体的三维物体线框模型动画"><a href="#TIT-计算机图形学-实验一-制作平面体或者二次曲面体的三维物体线框模型动画" class="headerlink" title="TIT 计算机图形学 实验一 制作平面体或者二次曲面体的三维物体线框模型动画"></a>TIT 计算机图形学 实验一 制作平面体或者二次曲面体的三维物体线框模型动画</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求"><a href="#一、实验项目要求" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><p>1.设计物体线框模型类</p><p>2.调用三维变换类将物体导入三维场景(CTestView类）中显示</p><p>3.使用鼠标或者键盘方向键，与图形进行交互</p><h2 id="二．理论分析或算法分析"><a href="#二．理论分析或算法分析" class="headerlink" title="二．理论分析或算法分析"></a>二．理论分析或算法分析</h2><p>建立一个cube类绘制十二面体。结合tranform几何变换函数，使用消息响应函数OnLButtonDown、OnLButtonUp实现鼠标交互，使用OnKeyDown实现键盘交互，Ontimer函数实现图形的播放动画效果</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了三套源程序供大家学习参考 <a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">十二面体</a> 、[正八面体](<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">TG-Learn&#x2F;First-semester-of-junior-year&#x2F;MFC at main · GC-ZF&#x2F;TG-Learn (github.com)</a>、<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">金字塔</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！</p><h2 id="四、运行截图"><a href="#四、运行截图" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%8001.png" alt="image-20211220214722559" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%8002.png" alt="image-20211220214712978" style="zoom:50%;" /><h1 id="TIT-计算机图形学-实验二-黑白颜色填充双三次bezier曲面片"><a href="#TIT-计算机图形学-实验二-黑白颜色填充双三次bezier曲面片" class="headerlink" title="TIT 计算机图形学 实验二 黑白颜色填充双三次bezier曲面片"></a>TIT 计算机图形学 实验二 黑白颜色填充双三次bezier曲面片</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求-1"><a href="#一、实验项目要求-1" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><p>1.使用均布网格细分曲面</p><p>2.使用黑白棋盘颜色填充细分后的小面</p><h2 id="二．理论分析或算法分析-1"><a href="#二．理论分析或算法分析-1" class="headerlink" title="二．理论分析或算法分析"></a>二．理论分析或算法分析</h2><p>首先绘制双三次贝塞尔曲面，定义十六个控制点，利用公式P(u,v)&#x3D;UMPM^T^V^T^计算曲面，之后将曲面递归细分为100个面，利用路径层填充黑白颜色</p><h2 id="三、源代码-1"><a href="#三、源代码-1" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">黑白颜色填充双三次bezier曲面片源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1V54y1C7u7?spm_id_from=333.999.0.0">黑白颜色填充双三次bezier曲面片</a>,以及主页相关算法)</p><h2 id="四、运行截图-1"><a href="#四、运行截图-1" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%BA%8C01.png" alt="image-20211221000614250"></p><h1 id="TIT-计算机图形学-实验三-使用重心坐标算法绘制颜色渐变的正六面体"><a href="#TIT-计算机图形学-实验三-使用重心坐标算法绘制颜色渐变的正六面体" class="headerlink" title="TIT 计算机图形学 实验三 使用重心坐标算法绘制颜色渐变的正六面体"></a>TIT 计算机图形学 实验三 使用重心坐标算法绘制颜色渐变的正六面体</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求-2"><a href="#一、实验项目要求-2" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><p>1.设计立方体类，八个顶点的颜色定义为白、红、绿、黄、蓝、品红、青、黑</p><p>2.使用重心坐标算法，基于顶点颜色填充立方体的四边形表面</p><p>3.使用背面剔除算法对立方体进行消隐</p><p>4.使用鼠标或键盘方向键，与图形进行交互</p><h2 id="二、理论分析或算法分析"><a href="#二、理论分析或算法分析" class="headerlink" title="二、理论分析或算法分析"></a>二、理论分析或算法分析</h2><p>建立Cube类，写入立方体的点表与面表，并用背面剔除算法绘制，将正方体每个面分为两个三角形，利用重心坐标算法，算出三角形重心，利用三个点的RGB值与重心坐标绘制出三角形内每一个像素点的RGB值，使用Fill函数绘制RGB立方体</p><h2 id="三、源代码-2"><a href="#三、源代码-2" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">RGB立方体重心填充算法源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1rv411u7Cd?p=4">旋转风车动画</a>,以及主页相关算法)</p><h2 id="四、运行截图-2"><a href="#四、运行截图-2" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%8901.png" alt="image-20211221001112824"></p><h1 id="TIT-计算机图形学-实验四-立方体的背面剔除"><a href="#TIT-计算机图形学-实验四-立方体的背面剔除" class="headerlink" title="TIT 计算机图形学 实验四 立方体的背面剔除"></a>TIT 计算机图形学 实验四 立方体的背面剔除</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求-3"><a href="#一、实验项目要求-3" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><ol><li><p>建立立方体类</p></li><li><p>背面剔除算法消隐</p></li></ol><h2 id="二、理论分析或算法分析-1"><a href="#二、理论分析或算法分析-1" class="headerlink" title="二、理论分析或算法分析"></a>二、理论分析或算法分析</h2><p>建立一个cube类用于绘制立方体，使用背面提出算法，对立方体进行消隐</p><h2 id="三、源代码-3"><a href="#三、源代码-3" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC"> 立方体的背面剔除源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?p=18">背面剔除消隐算法</a>,以及主页相关算法)</p><h2 id="四、运行截图-3"><a href="#四、运行截图-3" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><p>通过本次实验，学习了背面剔除算法的基本原理，主要针对凸多面体设计，关键是给出测试其每个表面的可见性判别式，可以根据其外法向量N与视向量V的夹角来进行可见性检测</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E5%9B%9B01.png" alt="image-20211221001314262"></p><h1 id="TIT-计算机图形学-实验五-制作立方体光照纹理模型"><a href="#TIT-计算机图形学-实验五-制作立方体光照纹理模型" class="headerlink" title="TIT 计算机图形学 实验五 制作立方体光照纹理模型"></a>TIT 计算机图形学 实验五 制作立方体光照纹理模型</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求-4"><a href="#一、实验项目要求-4" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><ol><li>建立立方体类</li><li>背面剔除算法消隐</li><li>PhongShader光照</li><li>使用六张纹理图片</li></ol><h2 id="二、理论分析或算法分析-2"><a href="#二、理论分析或算法分析-2" class="headerlink" title="二、理论分析或算法分析"></a>二、理论分析或算法分析</h2><p>使用cube类建立立方体，使用在Zbuffer中的PhongShader进行光照着色。调用texture建立一个一维数组读入六张位图，在cube中设置六个面的纹理</p><h2 id="三、源代码-4"><a href="#三、源代码-4" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">制作立方体光照纹理模型源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1pK4y1Z7EV?spm_id_from=333.999.0.0">独孤信印章</a>,<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?p=28">球体三维纹理映射算法</a>，以及主页相关算法)</p><h2 id="四、运行截图-4"><a href="#四、运行截图-4" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E5%9B%9B03.png" alt="image-20211221002051053" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E5%9B%9B02.png" alt="image-20211221002055313" style="zoom:50%;" /><h1 id="TIT-计算机图形学-实验六-基于OBJ文件建模"><a href="#TIT-计算机图形学-实验六-基于OBJ文件建模" class="headerlink" title="TIT 计算机图形学 实验六 基于OBJ文件建模"></a>TIT 计算机图形学 实验六 基于OBJ文件建模</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><ul><li>参考视频<a href="https://www.bilibili.com/video/BV1JZ4y1w7KZ?spm_id_from=333.999.0.0">计算机图形学全套算法讲解和C++编码实现（共23讲配套源码)</a>，<a href="https://www.bilibili.com/video/BV1XQ4y1Y76P?spm_id_from=333.999.0.0">计算机图形学案例视频讲解</a>以及主页相关算法。孔老师是我的代课老师，孔教授有十多年教学经验，视频课很不错，所有的源程序都基于他写的函数，并非小张写的。所有源程序都基于C+编译</li><li>参考教材《计算机图形学-理论与实践项目化教程》 孔令德著，大家多多支持哇</li></ul><h2 id="一、实验项目要求-5"><a href="#一、实验项目要求-5" class="headerlink" title="一、实验项目要求"></a>一、实验项目要求</h2><ol><li>建立立方体类。编写读入OBJ文件 </li><li>在屏幕上绘制OBJ线框模型</li></ol><h2 id="二．理论分析或算法分析-2"><a href="#二．理论分析或算法分析-2" class="headerlink" title="二．理论分析或算法分析"></a>二．理论分析或算法分析</h2><p>从网上下载好OBJ文件，使用OBJ类读入OBJ文件，建立线框模型。这里放一个<a href="https://www.aigei.com/s?term=obj-%E9%9D%9Evip%E8%B5%84%E6%BA%90_false&type=3d">网站</a>供大家使用</p><h2 id="三、源代码-5"><a href="#三、源代码-5" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>实验源码很多，没有传CSDN因为小张认为源码并不是我开的，只是拿老师的程序做了一些东西，拿这个赚积分和马内未免有点！这里直接放了<a href="https://github.com/GC-ZF/TG-Learn/tree/main/First-semester-of-junior-year/MFC">基于OBJ文件建模源程序</a>，不方便访问Github的可以评论邮箱。这里也不放讲解了，孔老师的视频课讲的很清楚，大家去B站就可以看啦！(<a href="https://www.bilibili.com/video/BV1u44y1e7hR?spm_id_from=333.999.0.0">基于OBJ文件的立方体建模算法</a>，以及主页相关算法)</p><p><strong>使用自己的obj文件</strong>，将obj文件路径复制到红框里(这里我把obj文件放在了源程序的res当中，建议你们也这样，因为程序打包后使用相对路径，在其他电脑上不影响程序运行)。下面两行Scale表示对x,y,z坐标的缩放，Translate表示x,y,z 的平移，可能导入的obj图像太靠边缘，适当调整一下obj位置</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E5%85%AD00.png" alt="image-20211222003356537"></p><h2 id="四、运行截图-5"><a href="#四、运行截图-5" class="headerlink" title="四、运行截图"></a>四、运行截图</h2><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/计算机图形学/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E5%85%AD01.png" alt="image-20211221001927237" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验三 动态分区(First Fit、Next Fit、Best Fit、Worst Fit )</title>
      <link href="/posts/20609/"/>
      <url>/posts/20609/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三-动态分区算法"><a href="#实验三-动态分区算法" class="headerlink" title="实验三 动态分区算法"></a>实验三 动态分区算法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>参考教材《操作系统 第四版》汤小丹</p></li><li><p>首次适应算法(First Fit)。空闲分区以地址递增的次序连接。分配内存时顺序查找，找到大小能满足要求的第一个空闲分区</p></li><li><p>邻近适应算法(Next Fit)。又称循环首次适应算法，由首次适应算法演变而成。不同之处是，分配内存时从上次查找结束的位置开始继续查找</p></li><li><p>最佳适应算法(Best Fit)。空闲分区按容量递增的方式形成分区链，找到第一个满足要求的空闲分区</p></li><li><p>最坏适应算法(Worst Fit)。又称最大适应算法，空闲分区以容量递减的次序链接，找到第一个能满足要求的空闲分区，即挑选出最大的分区</p></li><li><p><strong>实验三Memory类中建了很多内部内和方法，分开展示代码部分只是为了方便学习每段代码的具体逻辑。运行代码直接C2C完整代码即可，以防某个函数或类放错位置</strong></p></li></ul><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过这次实验，加深对动态分区分配算法的理解，进一步掌握首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法的实现方法</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>设计程序模拟四种动态分区分配算法：首次适应算法、循环首次适应算法、最佳适应算法和最坏适应算法的工作过程。分别利用四种动态分区分配算法将m个进程放入空闲分区，给出进程在空闲分区中的分配情况</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="内存分配菜单"><a href="#内存分配菜单" class="headerlink" title="内存分配菜单"></a>内存分配菜单</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内存分配菜单</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allocation</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;1.首次适应算法 2.循环首次适应算法 3.最佳适应算法 4.最坏适应算法&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;请选择分配算法:&quot;</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            FF(size);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            NF(size);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            BF(size);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            WF(size);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新选择!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首次适应算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">FF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历分区链表</span></span><br><span class="line">    <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">        <span class="comment">// 找到可用分区（空闲且大小足够）</span></span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">            doAllocation(size, pointer, tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历结束后未找到可用分区, 则内存分配失败</span></span><br><span class="line">    System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环首次适应算法"><a href="#循环首次适应算法" class="headerlink" title="循环首次适应算法"></a>循环首次适应算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 循环首次适应算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">NF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">    <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">        doAllocation(size, pointer, tmp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> zones.size();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (pointer + <span class="number">1</span>) % len;</span><br><span class="line">    <span class="keyword">for</span> (; i != pointer; i = (i + <span class="number">1</span>) % len) &#123;</span><br><span class="line">        tmp = zones.get(i);</span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">            doAllocation(size, i, tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全遍历后如果未分配则失败</span></span><br><span class="line">    System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最佳适应算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">BF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; tmp.size - size) &#123;</span><br><span class="line">                min = tmp.size - size;</span><br><span class="line">                flag = pointer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doAllocation(size, flag, zones.get(flag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最坏适应算法"><a href="#最坏适应算法" class="headerlink" title="最坏适应算法"></a>最坏适应算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最坏适应算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">WF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; tmp.size - size) &#123;</span><br><span class="line">                max = tmp.size - size;</span><br><span class="line">                flag = pointer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doAllocation(size, flag, zones.get(flag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始分配</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAllocation</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> location, Zone tmp)</span> &#123;</span><br><span class="line">    <span class="comment">// 要是剩的比最小分区MIN_SIZE小，则把剩下那点给前一个进程</span></span><br><span class="line">    <span class="keyword">if</span> (tmp.size - size &lt;= MIN_SIZE) &#123;</span><br><span class="line">        tmp.isFree = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">split</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zone</span>(tmp.head + size, tmp.size - size);</span><br><span class="line">        zones.add(location + <span class="number">1</span>, split);</span><br><span class="line">        tmp.size = size;</span><br><span class="line">        tmp.isFree = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;成功分配 &quot;</span> + size + <span class="string">&quot;KB 内存!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内存回收</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collection</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &gt;= zones.size()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无此分区编号!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(id);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> tmp.size;</span><br><span class="line">    <span class="keyword">if</span> (tmp.isFree) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;指定分区未被分配, 无需回收&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果回收的分区后一个是空闲就和后一个合并</span></span><br><span class="line">    <span class="keyword">if</span> (id &lt; zones.size() - <span class="number">1</span> &amp;&amp; zones.get(id + <span class="number">1</span>).isFree) &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">next</span> <span class="operator">=</span> zones.get(id + <span class="number">1</span>);</span><br><span class="line">        tmp.size += next.size;</span><br><span class="line">        zones.remove(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回收的分区要是前一个是空闲就和前分区合并</span></span><br><span class="line">    <span class="keyword">if</span> (id &gt; <span class="number">0</span> &amp;&amp; zones.get(id - <span class="number">1</span>).isFree) &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">previous</span> <span class="operator">=</span> zones.get(id - <span class="number">1</span>);</span><br><span class="line">        previous.size += tmp.size;</span><br><span class="line">        zones.remove(id);</span><br><span class="line">        id--;</span><br><span class="line">    &#125;</span><br><span class="line">    zones.get(id).isFree = <span class="literal">true</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;内存回收成功!, 本次回收了 &quot;</span> + size + <span class="string">&quot;KB 空间!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示分区"><a href="#展示分区" class="headerlink" title="展示分区"></a>展示分区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 展示分区状况</span><br><span class="line">public void showZones() &#123;</span><br><span class="line">System.out.println(&quot;分区编号\t    分区始址\t     分区大小\t 空闲状态\t&quot;);</span><br><span class="line">for (int i = 0; i &lt; zones.size(); i++) &#123;</span><br><span class="line">Zone tmp = zones.get(i);</span><br><span class="line">System.out.println(i + &quot;\t\t&quot; + tmp.head + &quot;\t\t&quot; + tmp.size + &quot;  \t&quot; + tmp.isFree);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 动态分区算法 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Memory</span>();<span class="comment">// 新建一个内存对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要分配内存还是要释放内存&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1.分配内存 2.释放内存 3.展示分区状况&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要分配的内存大小&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    my.allocation(size);<span class="comment">// 调用对象Memory中内存分配函数allocation</span></span><br><span class="line">                    my.showZones();<span class="comment">// 展示分区状况</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入想要释放内存的分区号&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    my.collection(id);<span class="comment">// 调用对象Memory中内存释放函数collection</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    my.showZones();<span class="comment">// 展示分区状况</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输的不对&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 操作系统实验;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 动态分区算法 FF NF BF WF</span></span><br><span class="line"><span class="comment"> * @author CSDN 张时贰</span></span><br><span class="line"><span class="comment"> * @data 2021年12月9日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 动态分区算法 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Memory</span>();<span class="comment">// 新建一个内存对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要分配内存还是要释放内存&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1.分配内存 2.释放内存 3.展示分区状况&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要分配的内存大小&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    my.allocation(size);<span class="comment">// 调用对象Memory中内存分配函数allocation</span></span><br><span class="line">                    my.showZones();<span class="comment">// 展示分区状况</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入想要释放内存的分区号&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    my.collection(id);<span class="comment">// 调用对象Memory中内存释放函数collection</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    my.showZones();<span class="comment">// 展示分区状况</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输的不对&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个内存类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;<span class="comment">// 内存大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_SIZE</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">// 最小剩余分区大小</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Zone&gt; zones;<span class="comment">// 内存分区</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pointer;<span class="comment">// 上次分配的空闲区位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建一个内部类，分区节点类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Zone</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;<span class="comment">// 分区大小</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> head;<span class="comment">// 分区始址</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isFree;<span class="comment">// 空闲状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Zone</span><span class="params">(<span class="type">int</span> head, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = head;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">            <span class="built_in">this</span>.isFree = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认内存大小512K</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">512</span>;</span><br><span class="line">        <span class="built_in">this</span>.pointer = <span class="number">0</span>;<span class="comment">// 默认首次运行程序，上次分配的空闲区位置为0</span></span><br><span class="line">        <span class="built_in">this</span>.zones = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        zones.add(<span class="keyword">new</span> <span class="title class_">Zone</span>(<span class="number">0</span>, size));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memory</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.pointer = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.zones = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        zones.add(<span class="keyword">new</span> <span class="title class_">Zone</span>(<span class="number">0</span>, size));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存分配菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allocation</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.首次适应算法 2.循环首次适应算法 3.最佳适应算法 4.最坏适应算法&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择分配算法:&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                FF(size);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                NF(size);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                BF(size);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                WF(size);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;请重新选择!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首次适应算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">FF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历分区链表</span></span><br><span class="line">        <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">            <span class="comment">// 找到可用分区（空闲且大小足够）</span></span><br><span class="line">            <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">                doAllocation(size, pointer, tmp);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历结束后未找到可用分区, 则内存分配失败</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环首次适应算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">NF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">            doAllocation(size, pointer, tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> zones.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (pointer + <span class="number">1</span>) % len;</span><br><span class="line">        <span class="keyword">for</span> (; i != pointer; i = (i + <span class="number">1</span>) % len) &#123;</span><br><span class="line">            tmp = zones.get(i);</span><br><span class="line">            <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">                doAllocation(size, i, tmp);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 全遍历后如果未分配则失败</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最佳适应算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">BF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">        <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">            <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (min &gt; tmp.size - size) &#123;</span><br><span class="line">                    min = tmp.size - size;</span><br><span class="line">                    flag = pointer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doAllocation(size, flag, zones.get(flag));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最坏适应算法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">WF</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (pointer = <span class="number">0</span>; pointer &lt; zones.size(); pointer++) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(pointer);</span><br><span class="line">            <span class="keyword">if</span> (tmp.isFree &amp;&amp; (tmp.size &gt; size)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (max &lt; tmp.size - size) &#123;</span><br><span class="line">                    max = tmp.size - size;</span><br><span class="line">                    flag = pointer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无可用内存空间!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doAllocation(size, flag, zones.get(flag));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始分配</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAllocation</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> location, Zone tmp)</span> &#123;</span><br><span class="line">        <span class="comment">// 要是剩的比最小分区MIN_SIZE小，则把剩下那点给前一个进程</span></span><br><span class="line">        <span class="keyword">if</span> (tmp.size - size &lt;= MIN_SIZE) &#123;</span><br><span class="line">            tmp.isFree = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">split</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zone</span>(tmp.head + size, tmp.size - size);</span><br><span class="line">            zones.add(location + <span class="number">1</span>, split);</span><br><span class="line">            tmp.size = size;</span><br><span class="line">            tmp.isFree = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功分配 &quot;</span> + size + <span class="string">&quot;KB 内存!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内存回收</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">collection</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &gt;= zones.size()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无此分区编号!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> tmp.size;</span><br><span class="line">        <span class="keyword">if</span> (tmp.isFree) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;指定分区未被分配, 无需回收&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果回收的分区后一个是空闲就和后一个合并</span></span><br><span class="line">        <span class="keyword">if</span> (id &lt; zones.size() - <span class="number">1</span> &amp;&amp; zones.get(id + <span class="number">1</span>).isFree) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">next</span> <span class="operator">=</span> zones.get(id + <span class="number">1</span>);</span><br><span class="line">            tmp.size += next.size;</span><br><span class="line">            zones.remove(next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 回收的分区要是前一个是空闲就和前分区合并</span></span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">0</span> &amp;&amp; zones.get(id - <span class="number">1</span>).isFree) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">previous</span> <span class="operator">=</span> zones.get(id - <span class="number">1</span>);</span><br><span class="line">            previous.size += tmp.size;</span><br><span class="line">            zones.remove(id);</span><br><span class="line">            id--;</span><br><span class="line">        &#125;</span><br><span class="line">        zones.get(id).isFree = <span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;内存回收成功!, 本次回收了 &quot;</span> + size + <span class="string">&quot;KB 空间!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示分区状况</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showZones</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;分区编号\t    分区始址\t     分区大小\t 空闲状态\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; zones.size(); i++) &#123;</span><br><span class="line">            <span class="type">Zone</span> <span class="variable">tmp</span> <span class="operator">=</span> zones.get(i);</span><br><span class="line">            System.out.println(i + <span class="string">&quot;\t\t&quot;</span> + tmp.head + <span class="string">&quot;\t\t&quot;</span> + tmp.size + <span class="string">&quot;  \t&quot;</span> + tmp.isFree);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>首先分配一些内存(手动先输好)，然后展示四个算法的运行结果。如图</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8901.png" alt="image-20211209175516571"></p><p>使用首次适应算法，申请内存大小10kb，遍历空闲分区找到第二个分区为空，所以插入分区2，剩下40kb作为分区3</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8902.png" alt="image-20211209175653091"></p><p>使用循环首次适应算法，申请内存大小10kb，上一次运行位置在2号分区，所以从2号分区开始寻找，3号分区为空，将10kb放入三号分区，剩下30kb作为分区4</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8903.png" alt="image-20211209175642200"></p><p>使用最佳适应算法算法，申请内存大小3kb。首先从小到大遍历空闲分区，7号分区大小15kb，满足条件。将3kb插入7号分区，剩余10kb作为8号分区</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8904.png" alt="image-20211209175503300"></p><p>使用最坏适应算法，申请内存大小2kb。首先从大到小遍历分区，14号分区最大，所以将2kb插入14号分区，剩余232kb作为15号分区</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8905.png" alt="image-20211209175453420"></p><p>释放11号分区，将10、11、12号分区合并为10号分区</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8906.png" alt="image-20211209181139366"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首次适应算法，从链首开始，查找可以用的空闲区，保留了高地址部分的大空闲区，缺点，低地址部分不断被划分，留下许多小的、很难利用的空闲区</p><p>循环首次适应算法，不是每次都从首地址查找，而是从上次查找结束的地方开始找，使空闲区分布的更加均匀，减少查询的开销，缺乏大的空闲区</p><p>最佳适应算法，每次查找时，将刚刚好的、稍微大一点点的空闲区分给作业，避免了“大材小用”，但留下许多难以利用的小空闲区</p><p>最差适应算法，与“最佳”相反，每次都将最大的空闲区分配给作业，产生碎片的可能性小，对中小型作业有利</p><p><strong>附一张《王道考研-操作系统》第37讲动态分区总结</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8900.png" alt="image-20211209181543528"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验三 数据库安全性与完整性实验(SQL入门教学三 从0到1）</title>
      <link href="/posts/43181/"/>
      <url>/posts/43181/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>实验内容和要求</li></ul><p>数据库的安全性实验，在 SQL Server中，设置 SQL Server的安全认证模式，实现对SQL Server的用户和角色管理，设置和管理数据操作权限。</p><p>具体内容如下：</p><ol><li><p>设置SQL Server服务器身份验证模式（Windows或SQL Server和Windows(S) 认证模式）</p></li><li><p>登录的管理</p></li></ol><p>创建一个SQL Server登录名，系统会自动生成同登录名的用户名</p><ol start="3"><li>数据库用户的管理</li></ol><p>给用户授权，授权时必须是超级用户（在windows账户或者sa账户下）才可以进行。给用户授予某些表的相关操作权限</p><ol start="4"><li>角色的管理</li></ol><p>创建一个角色，使创建的用户成为该角色的成员，并授予一定的操作权限</p><p>   5.在课程表的“课程名”字段上定义唯一约束</p><p>   6．在选课表的“成绩”字段上定义check约束，使之必须大于等于0且小于等于100。“课程号”字段只能输入数字字符</p><p>   7．（1）在学生表中定义主键、外键约束</p><pre><code>     （2）定义完整性约束命名子句，限制学生表的“性别”字段，使之只能取“男、女”值     （3）在学生表中增加出生日期字段，使出生年月的默认值取当前日期</code></pre><ul><li>参考教材《数据库系统概论第五版》&#x3D;&#x3D;P141-P151 数据加密  P158P167 数据库完整性&#x3D;&#x3D; </li><li>实验前,先熟悉常用的语句,方便理解以下代码(个人整理，如有错误，欢迎指正)</li></ul><h2 id="SQL知识点"><a href="#SQL知识点" class="headerlink" title="SQL知识点"></a>SQL知识点</h2><h3 id="一、授权：授予与收回"><a href="#一、授权：授予与收回" class="headerlink" title="一、授权：授予与收回"></a>一、授权：授予与收回</h3><table><thead><tr><th>列权限</th><th>含义</th></tr></thead><tbody><tr><td>SELECT</td><td>查询表</td></tr><tr><td>REFERENCES</td><td>约束表</td></tr><tr><td>INSERT</td><td>用户可以插入一个元组</td></tr><tr><td>UPDATE</td><td>修改表</td></tr><tr><td>DELETE</td><td>删除表</td></tr><tr><td>ALL PRIVILEGES</td><td>所有权限</td></tr></tbody></table><p><strong>1.GRANT</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>.....</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span>,<span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>,....</span><br><span class="line"><span class="keyword">TO</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>,....</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;<span class="comment">/*允许此权限授予其他用户*/</span></span><br></pre></td></tr></table></figure><p><strong>2.REMOVE</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="operator">&lt;</span>权限<span class="operator">&gt;</span>,<span class="operator">&lt;</span>权限<span class="operator">&gt;</span>.....</span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>对象类型<span class="operator">&gt;</span>,<span class="operator">&lt;</span>对象名<span class="operator">&gt;</span>,....</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>用户<span class="operator">&gt;</span>,<span class="operator">&lt;</span>用户<span class="operator">&gt;</span>...</span><br></pre></td></tr></table></figure><h3 id="二、数据库的完整性"><a href="#二、数据库的完整性" class="headerlink" title="二、数据库的完整性"></a>二、数据库的完整性</h3><p><strong>1.参照完整性</strong></p><p><strong>NO ACTION:</strong> 不允许该操作执行，该策略一般设置为默认策略</p><p><strong>CASCADE：</strong>当删除或者修改被参照表中的一个元组导致与参照表不一致时，删除或修改参照表中的所有导致不一致的元组</p><p><strong>设为空值：</strong>当删除或者修改被参照表中的一个元组导致与参照表不一致时，将造成不一致的元组设为空值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">    Grade <span class="type">SMALLINT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(Sno,Cno),<span class="comment">/*在表级定义实体完整性，Sno，Cno都不能为空值*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno)<span class="comment">/*在表级定义参照完整性*/</span><span class="operator">+</span><span class="operator">+</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE<span class="comment">/*当删除Sttudent表中的元组时，级联删除SC表中相应的元组*/</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE,<span class="comment">/*当更新Student表中的sno时，级联更新SC表中相应的元组*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(Cno) <span class="keyword">REFERENCES</span> Course(Cno)<span class="comment">/*表级完整性约束条件，Cno是外码，被参照表是Course*/</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION<span class="comment">/*当删除Course表中的元组造成与SC表不一致时，拒绝删除*/</span></span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE<span class="comment">/*当更新Course表中的Cno时，级联更新SC表中相应的元组*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2.用户定义的完整性</strong></p><p><strong>2.1属性约束条件</strong></p><p><strong>NOT NULL:</strong> 列值非空</p><p><strong>UNIQUE:</strong> 列值唯一</p><p><strong>CHECK:</strong> 检查列值是否满足一个表达式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*Sno属性不允许取空值，且唯一*/</span></span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*Cno属性不能为空*/</span></span><br><span class="line">    Grade <span class="type">SMALLINT</span> <span class="keyword">CHECK</span>(Grade<span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">AND</span> Grade<span class="operator">&lt;=</span><span class="number">100</span>),<span class="comment">/*Grade取值范围时0-100*/</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><strong>2.2元组约束条件</strong></p><p>与属性约束条件相比，元组级的约束可以设置不同属性之间的取值的相互约束条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">    Sname <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">    Sage <span class="type">SMALLINT</span>,</span><br><span class="line">    Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(Sno),</span><br><span class="line">    <span class="keyword">CHECK</span> (Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;Ms.%&#x27;</span>)</span><br><span class="line">    <span class="comment">/*定义了元组中Sname和Ssex两个属性值之间的约束条件。性别为女通过CHECK，性别为男时，名字不能以MS.开头*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>3.完整性约束命名子句</strong></p><p>以上的完整性约束条件都在<code>CREATE TABLE</code>语句中定义，SQL还在<code>CREATE TABLE</code>语句中提供了完整性约束命名子句<code>CONSTRAINT</code>,从而灵活的增加、删除一个完整性约束条件</p><p><code>CONSTRAINT &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt;</code></p><p><strong>3.1子句</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">    Sno NUMEIC(<span class="number">9</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C1 <span class="keyword">CHECK</span>(Sno <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">99999</span>),</span><br><span class="line">    <span class="comment">/*学号在9000-99999*/</span></span><br><span class="line">    Sname <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C2 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="comment">/*姓名不能为空*/</span></span><br><span class="line">    Sage <span class="type">NUMERIC</span>(<span class="number">3</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C3 <span class="keyword">CHECK</span>(Sage<span class="operator">&lt;</span><span class="number">20</span>),</span><br><span class="line"><span class="comment">/*年龄小于20*/</span></span><br><span class="line">    Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C4 <span class="keyword">CHECK</span>(Ssex <span class="keyword">IN</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> C5 StudentKEY <span class="keyword">PRIMARY</span> KEY(Sno)</span><br><span class="line"><span class="comment">/*性别只能是男或女*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>3.2删除约束</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> C1;</span><br></pre></td></tr></table></figure><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1-设置SQL-Server服务器身份验证模式（Windows或SQL-Server和Windows-S-认证模式）"><a href="#1-设置SQL-Server服务器身份验证模式（Windows或SQL-Server和Windows-S-认证模式）" class="headerlink" title="1.设置SQL Server服务器身份验证模式（Windows或SQL Server和Windows(S) 认证模式）"></a>1.设置SQL Server服务器身份验证模式（Windows或SQL Server和Windows(S) 认证模式）</h3><p><strong>1.1键鼠操作</strong></p><p>首先打开新建登录名</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8901.png" alt="image-20211208090927039"></p><p>按下图依次填写</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8902.png" alt="image-20211208091156728"></p><p><strong>1.2SQL语句</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---创建SQL Server登录名</span></span><br><span class="line"><span class="keyword">CREATE</span> login &quot;user&quot; <span class="keyword">with</span> password<span class="operator">=</span><span class="string">&#x27;gczf&#x27;</span>,default_database<span class="operator">=</span>学籍管理;</span><br></pre></td></tr></table></figure><h3 id="2-登录的管理"><a href="#2-登录的管理" class="headerlink" title="2.登录的管理"></a>2.登录的管理</h3><p><strong>2.1键鼠操作</strong></p><p><strong>创建一个SQL Server登录名，系统会自动生成同登录名的用户名</strong></p><p>首先打开数据库用户窗口</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8903.png" alt="image-20211208091429824"></p><p>按下图，将user用户加入学籍管理数据库中，并命名用户名为U1(也可以为user)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8904.png" alt="image-20211208091922938"></p><p>创建好后，刷新</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8905.png" alt="image-20211208092121463"></p><p><strong>2.2SQL语句</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---创建数据库用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">user</span> U1 <span class="keyword">for</span> login <span class="keyword">user</span>;<span class="comment">/*第二个user代表登录名称*/</span></span><br></pre></td></tr></table></figure><h3 id="3-数据库用户的管理"><a href="#3-数据库用户的管理" class="headerlink" title="3.数据库用户的管理"></a>3.数据库用户的管理</h3><p>给用户授权，授权时必须是超级用户（在windows账户或者sa账户下）才可以进行。给用户授予某些表的相关操作权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---授权U1查询和插入权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line"><span class="keyword">to</span> U1</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---授权所有权限给U1</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES</span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line"><span class="keyword">to</span> U1</span><br></pre></td></tr></table></figure><h3 id="4-角色的管理"><a href="#4-角色的管理" class="headerlink" title="4.角色的管理"></a>4.角色的管理</h3><p><strong>角色同样可以使用键鼠，方法与上面相同，不做赘述</strong></p><p>创建一个角色，使创建的用户成为该角色的成员，并授予一定的操作权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---创建角色R1,授权查询，更新，插入权限</span></span><br><span class="line"><span class="keyword">CREATE</span> ROLE R1</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line"><span class="keyword">to</span> R1</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---授权R1删除权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line"><span class="keyword">to</span> R1</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---移除R1查询权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ON</span> Student</span><br><span class="line"><span class="keyword">FROM</span> R1;</span><br></pre></td></tr></table></figure><h3 id="5-在课程表的“课程名”字段上定义唯一约束"><a href="#5-在课程表的“课程名”字段上定义唯一约束" class="headerlink" title="5.在课程表的“课程名”字段上定义唯一约束"></a>5.在课程表的“课程名”字段上定义唯一约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course1</span><br><span class="line">(Cno <span class="type">char</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname <span class="type">char</span>(<span class="number">40</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> Cpno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course (Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="6-在选课表的“成绩”字段上定义check约束，使之必须大于等于0且小于等于100。“课程号”字段只能输入数字字符"><a href="#6-在选课表的“成绩”字段上定义check约束，使之必须大于等于0且小于等于100。“课程号”字段只能输入数字字符" class="headerlink" title="6.在选课表的“成绩”字段上定义check约束，使之必须大于等于0且小于等于100。“课程号”字段只能输入数字字符"></a>6.在选课表的“成绩”字段上定义check约束，使之必须大于等于0且小于等于100。“课程号”字段只能输入数字字符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC1</span><br><span class="line">(Sno <span class="type">char</span>(<span class="number">9</span>),</span><br><span class="line"> Cno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line"> GRADE <span class="type">SMALLINT</span> <span class="keyword">CHECK</span>(Grade<span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">AND</span> Grade<span class="operator">&lt;=</span><span class="number">100</span>),</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(Sno,Cno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Sno) <span class="keyword">REFERENCES</span> Student (Sno),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cno) <span class="keyword">REFERENCES</span> Course (Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="7．"><a href="#7．" class="headerlink" title="7．"></a>7．</h3><p>（1）在学生表中定义主键、外键约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC1</span><br><span class="line">(Sno <span class="type">char</span>(<span class="number">9</span>),</span><br><span class="line">Cname <span class="type">char</span>(<span class="number">40</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> Cpno <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Cpno) <span class="keyword">REFERENCES</span> Course (Cpno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>（2）定义完整性约束命名子句，限制学生表的“性别”字段，使之只能取“男、女”值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CRATE <span class="keyword">TABLE</span> Student</span><br><span class="line">(Sno <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Sname <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"> Ssex <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line"> CCONSTRAIN C1 <span class="keyword">CHECK</span> (Ssex <span class="keyword">in</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line"> Sage <span class="type">SMALLINT</span>,</span><br><span class="line"> Sdept <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY (Sdept) <span class="keyword">REFERENCES</span> Dept(Dno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>（3）在学生表中增加出生日期字段，使出生年月的默认值取当前日期</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Alter</span> <span class="keyword">TABLE</span> Student1 <span class="keyword">ADD</span> birthday <span class="type">DATE</span> <span class="keyword">DEFAULT</span> getdate();</span><br></pre></td></tr></table></figure><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>1.角色的作用是什么？</p><p>数据库角色是被命名的一组与数据库操作相关的权限，角色是权限的集合，因此以一组具有相同权限的用户创建一个角色，使用角色管理数据库权限可以简化授权的过程</p><p>2．数据库用户和windows用户有何不同？</p><p>windows用户是通过windows登录账号的相关权限登录，数据库用户是通过sqlserver程序自身创建的用户登录</p>]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验二 磁盘调度算法(FCFS、SSTF、SCAN)</title>
      <link href="/posts/9925/"/>
      <url>/posts/9925/</url>
      
        <content type="html"><![CDATA[<h1 id="实验二-磁盘调度"><a href="#实验二-磁盘调度" class="headerlink" title="实验二 磁盘调度"></a>实验二 磁盘调度</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>参考教材《操作系统 第四版》汤小丹</p></li><li><p>因为实验要求为了更好地模拟和评价算法的性能，<strong>随机产生</strong>需寻道的磁道序列，以磁道序列的首磁道为磁头的当前位置；在SCAN算法中，允许用户指定当前寻道方向；随机产生数据不方便对比,所以做了两份代码(一种随机产生磁道序列以磁道序列的首磁道为磁头的当前位置(这里命名为A)即实验内容，一种自定义磁道序列自定义磁头位置(这里命名为B))，完整代码放在文末了,方便对比</p></li><li><p>SCAN算法做出了两种方法，分别写在了固定磁头位置和自定义磁头位置</p></li><li><p><a href="https://blog.csdn.net/weixin_44976835/article/details/110930156?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95java&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-8-110930156.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">曾木欠的博客</a></p><p><a href="https://blog.csdn.net/w15977858408/article/details/94827776?ops_request_misc=%7B%22request_id%22:%22163884520316780265496006%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163884520316780265496006&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-94827776.first_rank_v2_pc_rank_v29&utm_term=%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95java&spm=1018.2226.3001.4187">Monster丶ZF的博客</a></p></li></ul><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>编程模拟实现磁盘调度的常用算法或调试分析相关磁盘调度程序，加深对磁盘调度常用算法的理解和实现技巧</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1.自定义磁盘调度相关的数据结构</p><p>2.依据先来先服务算法（FCFS）、最短寻道优先算法（SSTF）、扫描(SCAN，也称电梯)算法的原理，编写对应函数，模拟系统的磁盘调度服务；</p><p>3.为了更好地模拟和评价算法的性能，随机产生需寻道的磁道序列，以磁道序列的首磁道为磁头的当前位置；在SCAN算法中，允许用户指定当前寻道方向；</p><p>4.统计以上算法总寻道次数和平均寻道距离；</p><p>比较&#x2F;分析以上算法的寻道性能，并作出自己的评价</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>先写一个冒泡排序，在后面调用会使用到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 冒泡排序(从小到大)</span><br><span class="line">public static void SortA(int[] list) &#123;</span><br><span class="line">    for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">            if (list[j] &gt; list[j + 1]) &#123;</span><br><span class="line">                int temp = list[j];</span><br><span class="line">                list[j] = list[j + 1];</span><br><span class="line">                list[j + 1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 冒泡排序(从大到小)</span><br><span class="line">public static void SortB(int[] list) &#123;</span><br><span class="line">    for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">            if (list[j] &lt; list[j + 1]) &#123;</span><br><span class="line">                int temp = list[j];</span><br><span class="line">                list[j] = list[j + 1];</span><br><span class="line">                list[j + 1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先来先服务FCFS"><a href="#先来先服务FCFS" class="headerlink" title="先来先服务FCFS"></a>先来先服务FCFS</h3><p><strong>A</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先来先服务FCSFS,即根据磁盘访问的先后次序进行调度,遍历list数组即可，所以不做赘述</span><br><span class="line">private static void FCFS(int[] list) &#123;</span><br><span class="line">    System.out.println(&quot;磁道开始位置为&quot; + list[0]);</span><br><span class="line"></span><br><span class="line">    int num = 0;// 变量num记录寻道距离</span><br><span class="line">    for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">        num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(list));</span><br><span class="line">    System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先来先服务FCSFS,即根据磁盘访问的先后次序进行调度,遍历list数组即可，所以不做赘述</span><br><span class="line">private static void FCFS(int[] list) &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    i = sc.nextInt();</span><br><span class="line">    int num = 0;// 变量num记录寻道距离</span><br><span class="line">    num = Math.abs(i - list[0]);</span><br><span class="line">    for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">        num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为：&quot; + Arrays.toString(list));</span><br><span class="line">    System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道距离&quot; + w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最短寻道时间优先SSTF"><a href="#最短寻道时间优先SSTF" class="headerlink" title="最短寻道时间优先SSTF"></a>最短寻道时间优先SSTF</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 最短路径算法SSTF,即访问下一个磁道前，先计算一次当前磁头到访问各个磁道的距离</span><br><span class="line">private static void SSTF(int[] list) &#123;</span><br><span class="line">    int[] list1=new int[list.length];//因为下面修改了list，再次运行算法3时，list数组已经被修改，所以这里把值传给list1</span><br><span class="line">    System.arraycopy(list,0, list1, 0, list.length);</span><br><span class="line">    int i = list1[0];// 变量i记录当前磁头位置</span><br><span class="line">    System.out.println(&quot;磁道开始位置为&quot; + list1[0]);</span><br><span class="line">    int num = 0;// num记录总寻道距离</span><br><span class="line">    int[] k = new int[list1.length];// k数组记录访问的每一个磁道到磁头距离</span><br><span class="line">    int[] templist = new int[list1.length];// 将结果保存在templist[]中</span><br><span class="line"></span><br><span class="line">    for (int a = 0; a &lt; list1.length; a++) &#123;</span><br><span class="line">        // j循环遍历出每一个访问的磁道到当前磁头的距离保存在k数组中</span><br><span class="line">        for (int j = 0; j &lt; list1.length; j++) &#123;</span><br><span class="line">            k[j] = Math.abs(list1[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line">        // 将k数组赋值给temp数组，对temp数组冒泡排序</span><br><span class="line">        int[] temp = new int[k.length];</span><br><span class="line">        for (int j = 0; j &lt; k.length; j++) &#123;</span><br><span class="line">            temp[j] = k[j];</span><br><span class="line">        &#125;</span><br><span class="line">        SortA(temp);</span><br><span class="line"></span><br><span class="line">        int j = temp[0];// 找到磁头到下一个磁道距离最小的为temp[0]</span><br><span class="line"></span><br><span class="line">        // 循环遍历找到temp[0]在list磁道序列数组中的位置</span><br><span class="line">        for (int t = 0; t &lt; k.length; t++) &#123;</span><br><span class="line">            // if语句找到list[t]到当前磁头最近</span><br><span class="line">            if (k[t] == j) &#123;</span><br><span class="line">                i = list1[t];// 变量i记录磁头位置</span><br><span class="line">                templist[a] = i;// 将结果存入templist数组中</span><br><span class="line">                list1[t] = 999999;// 将第g个磁道号设为999999，可以理解为权重设为99999，这样他在下一次遍历，在k数组中总是最大</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num += j;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">    System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 最短路径算法SSTF,即访问下一个磁道前，先计算一次当前磁头到访问各个磁道的距离</span><br><span class="line">private static void SSTF(int[] list) &#123;</span><br><span class="line">    int i = 0;// 变量i记录当前磁头位置</span><br><span class="line">    int num = 0;// num记录总寻道距离</span><br><span class="line">    int[] templist = new int[list.length];// 将结果保存在templist[]中</span><br><span class="line">    int[] k = new int[list.length];// k数组记录访问的每一个磁道到磁头距离</span><br><span class="line">    System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    i = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    for (int a = 0; a &lt; list.length; a++) &#123;</span><br><span class="line">        // j循环遍历出每一个访问的磁道到当前磁头的距离保存在k数组中</span><br><span class="line">        for (int j = 0; j &lt; list.length; j++) &#123;</span><br><span class="line">            k[j] = Math.abs(list[j] - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 将k数组赋值给temp数组，对temp数组冒泡排序</span><br><span class="line">        int[] temp = new int[k.length];</span><br><span class="line">        for (int j = 0; j &lt; k.length; j++) &#123;</span><br><span class="line">            temp[j] = k[j];</span><br><span class="line">        &#125;</span><br><span class="line">        SortA(temp);</span><br><span class="line"></span><br><span class="line">        int j = temp[0];// 找到磁头到下一个磁道距离最小的为temp[0]</span><br><span class="line"></span><br><span class="line">        // 循环遍历找到temp[0]在list磁道序列数组中的位置</span><br><span class="line">        for (int t = 0; t &lt; k.length; t++) &#123;</span><br><span class="line">            // if语句找到list[t]到当前磁头最近</span><br><span class="line">            if (k[t] == j) &#123;</span><br><span class="line">                i = list[t];// 变量i记录磁头位置</span><br><span class="line">                templist[a] = i;// 将结果存入templist数组中</span><br><span class="line">                list[t] = 999999;// 将第g个磁道号设为999999，可以理解为权重设为99999，这样他在下一次遍历，k数组中总是最大</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num += j;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">    System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描算法SCAN"><a href="#扫描算法SCAN" class="headerlink" title="扫描算法SCAN"></a>扫描算法SCAN</h3><p>写完扫描算法准备关机的时候，突然想到了另一种排序方法，B的第42行else语句中，好像可以修改修改。所以对A进行了修改。对A简单修改还可以实现CSCAN循环扫描算法，我认为A中的算法更容易理解其中的原理，所以下面着重解释！</p><p><strong>A</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">     * 扫描算法SCAN 磁盘的0磁道在最外圈 扫描算法又叫电梯算法，即按从小到大或从大到小的顺序去依次访问磁道。</span><br><span class="line">     * 所以这里分两种情况，1.寻道从内向外(从大到小) 2.寻道从外向内(从小到大)</span><br><span class="line">     * </span><br><span class="line">     * </span><br><span class="line">     * 1.若当前磁头位置大于请求序列中最大者 2.若当前磁头位置小于请求序列中最小者 3.若当前磁道号大于请求序列中最小者且小于最大者</span><br><span class="line">     * 这里用同一个函数去解决三种情况</span><br><span class="line">     */</span><br><span class="line">private static void SCAN(int[] list) &#123;</span><br><span class="line">    int[] list1=new int[list.length];//因为下面修改了list，再次运行算法3时，list数组已经被修改，所以这里把值传给list1</span><br><span class="line">    System.arraycopy(list,0, list1, 0, list.length);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int k = list1[0];// 变量i记录当前磁头位置</span><br><span class="line">    int tempk1 = 0;</span><br><span class="line">    int tempk2 = 0;</span><br><span class="line">    int flag=1;</span><br><span class="line">    int num = 0;// num记录总寻道距离</span><br><span class="line">    int[] templist = new int[list1.length];// 将访问顺序存入templist中</span><br><span class="line">    System.out.println(&quot;磁道开始位置为:&quot; + list1[0]);</span><br><span class="line">    //while中先计算出磁道访问的顺序</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        System.out.println(&quot;1.磁头从外向内  2.磁头从内向外&quot;);</span><br><span class="line">        int choice = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        if (choice == 1) &#123;</span><br><span class="line">            flag=5;</span><br><span class="line"></span><br><span class="line">            SortA(list1);// 从小到大排序</span><br><span class="line">            // 找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">            for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                if (k == list1[i])</span><br><span class="line">                    tempk1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list1, tempk1, templist, 0, list1.length - tempk1);</span><br><span class="line"></span><br><span class="line">            SortB(list1);// 从大到小</span><br><span class="line">            // 找出重排序后，k在数组中的位置,templist记录区间[tempk2+1,list.length]</span><br><span class="line">            for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                if (k == list1[i])</span><br><span class="line">                    tempk2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list1, tempk2 + 1, templist, tempk2 + 1, list1.length - tempk2 - 1);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        else if (choice == 2) &#123;</span><br><span class="line">            flag=5;</span><br><span class="line"></span><br><span class="line">            SortB(list1);</span><br><span class="line">            // 找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">            for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                if (k == list1[i])</span><br><span class="line">                    tempk1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list1, tempk1, templist, 0, list1.length - tempk1);</span><br><span class="line"></span><br><span class="line">            SortA(list1);// 从小到大</span><br><span class="line">            // 找出重排序后，k在数组中的位置,templist记录区间[tempk2+1,list.length]</span><br><span class="line">            for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                if (k == list1[i])</span><br><span class="line">                    tempk2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list1, tempk2 + 1, templist, tempk2 + 1, list1.length - tempk2 - 1);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        else if (flag==5)</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //计算寻道距离</span><br><span class="line">    for (int j = 0; j &lt; templist.length - 1; j++) &#123;</span><br><span class="line">        num += Math.abs(templist[j + 1] - templist[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">    System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道距离&quot; + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A的解释：</strong>可以通过以下代码及运行结果，更直白的理解最短寻道时间优先的算法。分别对list数组排序两次从而得到访问顺序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 解释A;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class paper &#123;</span><br><span class="line">    // 冒泡排序(从小到大)</span><br><span class="line">    public static void SortA(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &gt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 冒泡排序(从大到小)</span><br><span class="line">    public static void SortB(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &lt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int[] list = &#123; 5, 2, 3, 8, 10, 12, 9 &#125;;// 7</span><br><span class="line">        int[] templist = new int[list.length];</span><br><span class="line">        int k = list[0];</span><br><span class="line">        int tempk1 = 0;</span><br><span class="line">        int tempk2 = 0;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;1.磁头从外向内  2.磁头从内向外(从大到小)&quot;);</span><br><span class="line">        int choice = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        if (choice == 1) &#123;</span><br><span class="line">            System.out.println(&quot;排序前的list&quot; + Arrays.toString(list));</span><br><span class="line">            SortA(list);</span><br><span class="line">            System.out.println(&quot;从小到大的list&quot; + Arrays.toString(list));</span><br><span class="line">            //找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">            for (int i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">                if (k == list[i])</span><br><span class="line">                    tempk1 = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.arraycopy(list, tempk1, templist, 0, list.length - tempk1);</span><br><span class="line">            System.out.println(&quot;第一次的templist&quot; + Arrays.toString(templist));</span><br><span class="line"></span><br><span class="line">            SortB(list);</span><br><span class="line">            System.out.println(&quot;从大到小的list&quot; + Arrays.toString(list));</span><br><span class="line">            //找出重排序后，k在数组中的位置,templist记录区间[tempk2+1,list.length]</span><br><span class="line">            for (int i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">                if (k == list[i])</span><br><span class="line">                    tempk2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list, tempk2 + 1, templist, tempk2 + 1, list.length - tempk2 - 1);</span><br><span class="line">            System.out.println(&quot;第二次的templist&quot; + Arrays.toString(templist));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(choice==2)&#123;</span><br><span class="line">            System.out.println(&quot;排序前的list&quot; + Arrays.toString(list));</span><br><span class="line">            SortB(list);</span><br><span class="line">            System.out.println(&quot;从大到小的list&quot; + Arrays.toString(list));</span><br><span class="line">            //找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">            for (int i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">                if (k == list[i])</span><br><span class="line">                    tempk1 = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.arraycopy(list, tempk1, templist, 0, list.length - tempk1);</span><br><span class="line">            System.out.println(&quot;第一次的templist&quot; + Arrays.toString(templist));</span><br><span class="line"></span><br><span class="line">            SortA(list);//从小到大</span><br><span class="line">            System.out.println(&quot;从小到大的list&quot; + Arrays.toString(list));</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">                if (k == list[i])</span><br><span class="line">                    tempk2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(list, tempk2 + 1, templist, tempk2 + 1, list.length - tempk2 - 1);</span><br><span class="line">            System.out.println(&quot;第二次的templist&quot; + Arrays.toString(templist));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C01.png" alt="image-20211207235233444"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C02.png" alt="image-20211207235250685"></p><p><strong>B</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*扫描算法SCAN   磁盘的0磁道在最外圈</span><br><span class="line">    扫描算法又叫电梯算法，即按从小到大或从大到小的顺序去依次访问磁道。</span><br><span class="line">    所以这里分两种情况，1.寻道从内向外(从大到小) 2.寻道从外向内(从小到大)</span><br><span class="line"></span><br><span class="line">    注意:实验要求直观的看出三种算法的区别，是以磁道序列的首磁道为磁头，用户自定义磁头方向。</span><br><span class="line">    这里分三种情况,按教材的案例，磁头方向从内向外</span><br><span class="line">    1.若当前磁头位置大于请求序列中最大者，则直接由内向外依次给予请求服务</span><br><span class="line">    2.若当前磁头位置小于请求序列中最小者，则直接由外向内依次给予各请求服务</span><br><span class="line">    3.若当前磁道号大于请求序列中最小者且小于最大者,调用SCAN算法</span><br><span class="line">    */</span><br><span class="line">private static void SCAN(int[] list) &#123;</span><br><span class="line">    SortA(list);//先进行一次从小到大排序</span><br><span class="line">    int num = 0;// num记录总寻道距离</span><br><span class="line">    System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int i = sc.nextInt();//变量i记录磁头位置</span><br><span class="line">    int k = 0;</span><br><span class="line">    int[] templist=new int[list.length];//将访问顺序存入templist中</span><br><span class="line"></span><br><span class="line">    //1.若当前磁头位置大于请求序列中最大者，则直接由内向外依次给予请求服务</span><br><span class="line">    if(i&gt;list[list.length-1]) &#123;</span><br><span class="line">        SortB(list);//从大到小(从内向外)依次访问</span><br><span class="line">        System.arraycopy(list, 0, templist, 0, list.length);//将访问顺序存入templist中</span><br><span class="line">        //计算距离</span><br><span class="line">        num +=Math.abs(i- list[list.length-1]);//磁头移动到第一个磁道的距离</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.若当前磁头位置小于请求序列中最小者，则直接由外向内依次给予各请求服务</span><br><span class="line">    else if(i&lt;list[0]) &#123;</span><br><span class="line">        //已经进行过从小到大排序，所以这里不用再次调用SortA</span><br><span class="line">        System.arraycopy(list, 0, templist, 0, list.length);</span><br><span class="line">        //计算距离</span><br><span class="line">        num +=Math.abs(i- list[list.length-1]);//磁头移动到第一个磁道的距离</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //3.若当前磁头大于请求序列中最小者且小于最大者</span><br><span class="line">    else &#123;</span><br><span class="line">        //寻找离磁头最近的访问磁道</span><br><span class="line">        for (int j = 0; j &lt; list.length; j++) &#123;</span><br><span class="line">            if (i &lt;= list[j]) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //记录磁道访问顺序到templist中</span><br><span class="line">        System.arraycopy(list, k, templist, 0, list.length-k);</span><br><span class="line">        SortB(list);</span><br><span class="line">        System.arraycopy(list,list.length-k, templist, list.length-k, k);</span><br><span class="line"></span><br><span class="line">        num = Math.abs(i - templist[0]);//磁头移动到第一个磁道的距离</span><br><span class="line">        //每个访问磁道之间的距离</span><br><span class="line">        for (int j = 0; j &lt; templist.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(templist[j + 1] - templist[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        /*以下注释比较难懂，用上面这段计算距离*/</span><br><span class="line">        //          //找到后由外向内访问(由小到大)，然后再由内向外访问(从大到小)</span><br><span class="line">        //          //两次for计算总距离</span><br><span class="line">        //          num += list[k] - i;//磁头移动到第一个磁道的距离</span><br><span class="line">        //          //由外向内，区间[k,list.length-1)</span><br><span class="line">        //          for (int j = k; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">        //              num += list[j + 1] - list[j];</span><br><span class="line">        //          &#125;</span><br><span class="line">        //          //到达最里面，再由内向外访问剩余磁道,区间[0,k-1)</span><br><span class="line">        //          for (int j = 0; j &lt; k - 1; j++) &#123;</span><br><span class="line">        //              num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">        //          &#125;       </span><br><span class="line">        //          num += list[list.length - 1] - list[k - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">    System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">    double w = ((float) num / (float) list.length);</span><br><span class="line">    System.out.println(&quot;平均寻道长度&quot; + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p><strong>A</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    // TODO Auto-generated method stub</span><br><span class="line">    int Tracknum;// 磁道数</span><br><span class="line">    System.out.println(&quot;请输入磁道数量Tracknum&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    Tracknum = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    // 随机生成磁道序列</span><br><span class="line">    Random r = new Random();</span><br><span class="line">    int[] TrackSequence = new int[Tracknum];</span><br><span class="line">    for (int i = 0; i &lt; Tracknum; i++) &#123;</span><br><span class="line">        TrackSequence[i] = r.nextInt(100)+1;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;磁道序列为&quot; + Arrays.toString(TrackSequence));</span><br><span class="line"></span><br><span class="line">    // 菜单</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        System.out.println(&quot;请选择算法 1.FCFS 2.SSTF 3.SCAN  0.退出&quot;);</span><br><span class="line">        int k = sc.nextInt();</span><br><span class="line">        switch (k) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                FCFS(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                SSTF(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                SCAN(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 0:</span><br><span class="line">                System.exit(0);</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(&quot;输的不对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    // TODO Auto-generated method stub</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int Tracknum;// 磁道数</span><br><span class="line"></span><br><span class="line">    // 菜单</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        System.out.println(&quot;请输入磁道数量Tracknum&quot;);</span><br><span class="line">        Tracknum = sc.nextInt();</span><br><span class="line">        // 输入磁道序列</span><br><span class="line">        int[] TrackSequence = new int[Tracknum];</span><br><span class="line">        System.out.println(&quot;磁道序列&quot;);</span><br><span class="line">        for (int i = 0; i &lt; Tracknum; i++) &#123;</span><br><span class="line">            TrackSequence[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁道序列为&quot; + Arrays.toString(TrackSequence));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;请选择算法 1.FCFS 2.SSTF 3.SCAN  0.退出&quot;);</span><br><span class="line">        int k = sc.nextInt();</span><br><span class="line">        switch (k) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                FCFS(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                SSTF(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                SCAN(TrackSequence);</span><br><span class="line">                break;</span><br><span class="line">            case 0:</span><br><span class="line">                System.exit(0);</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(&quot;输的不对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><strong>A</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 操作系统实验;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">/*</span><br><span class="line"> * 磁盘调度FCFS、SSTF、SCAN</span><br><span class="line"> * @author 张时贰</span><br><span class="line"> * @data 2021年12月7日</span><br><span class="line"> */</span><br><span class="line">public class 磁盘调度算法 &#123;</span><br><span class="line">    // 冒泡排序(从小到大)</span><br><span class="line">    public static void SortA(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &gt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 冒泡排序(从大到小)</span><br><span class="line">    public static void SortB(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &lt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 先来先服务FCSFS,即根据磁盘访问的先后次序进行调度,遍历list数组即可，所以不做赘述</span><br><span class="line">    private static void FCFS(int[] list) &#123;</span><br><span class="line">        System.out.println(&quot;磁道开始位置为&quot; + list[0]);</span><br><span class="line"></span><br><span class="line">        int num = 0;// 变量num记录寻道距离</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(list));</span><br><span class="line">        System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 最短路径算法SSTF,即访问下一个磁道前，先计算一次当前磁头到访问各个磁道的距离</span><br><span class="line">    private static void SSTF(int[] list) &#123;</span><br><span class="line">        int[] list1=new int[list.length];//因为下面修改了list，再次运行算法3时，list数组已经被修改，所以这里把值传给list1</span><br><span class="line">        System.arraycopy(list,0, list1, 0, list.length);</span><br><span class="line">        int i = list1[0];// 变量i记录当前磁头位置</span><br><span class="line">        System.out.println(&quot;磁道开始位置为&quot; + list1[0]);</span><br><span class="line">        int num = 0;// num记录总寻道距离</span><br><span class="line">        int[] k = new int[list1.length];// k数组记录访问的每一个磁道到磁头距离</span><br><span class="line">        int[] templist = new int[list1.length];// 将结果保存在templist[]中</span><br><span class="line"></span><br><span class="line">        for (int a = 0; a &lt; list1.length; a++) &#123;</span><br><span class="line">            // j循环遍历出每一个访问的磁道到当前磁头的距离保存在k数组中</span><br><span class="line">            for (int j = 0; j &lt; list1.length; j++) &#123;</span><br><span class="line">                k[j] = Math.abs(list1[j] - i);</span><br><span class="line">            &#125;</span><br><span class="line">            // 将k数组赋值给temp数组，对temp数组冒泡排序</span><br><span class="line">            int[] temp = new int[k.length];</span><br><span class="line">            for (int j = 0; j &lt; k.length; j++) &#123;</span><br><span class="line">                temp[j] = k[j];</span><br><span class="line">            &#125;</span><br><span class="line">            SortA(temp);</span><br><span class="line"></span><br><span class="line">            int j = temp[0];// 找到磁头到下一个磁道距离最小的为temp[0]</span><br><span class="line"></span><br><span class="line">            // 循环遍历找到temp[0]在list磁道序列数组中的位置</span><br><span class="line">            for (int t = 0; t &lt; k.length; t++) &#123;</span><br><span class="line">                // if语句找到list[t]到当前磁头最近</span><br><span class="line">                if (k[t] == j) &#123;</span><br><span class="line">                    i = list1[t];// 变量i记录磁头位置</span><br><span class="line">                    templist[a] = i;// 将结果存入templist数组中</span><br><span class="line">                    list1[t] = 999999;// 将第g个磁道号设为999999，可以理解为权重设为99999，这样他在下一次遍历，在k数组中总是最大</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num += j;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">        System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 扫描算法SCAN 磁盘的0磁道在最外圈 扫描算法又叫电梯算法，即按从小到大或从大到小的顺序去依次访问磁道。</span><br><span class="line">     * 所以这里分两种情况，1.寻道从内向外(从大到小) 2.寻道从外向内(从小到大)</span><br><span class="line">     * </span><br><span class="line">     * </span><br><span class="line">     * 1.若当前磁头位置大于请求序列中最大者 2.若当前磁头位置小于请求序列中最小者 3.若当前磁道号大于请求序列中最小者且小于最大者</span><br><span class="line">     * 这里用同一个函数去解决三种情况</span><br><span class="line">     */</span><br><span class="line">    private static void SCAN(int[] list) &#123;</span><br><span class="line">        int[] list1=new int[list.length];//因为下面修改了list，再次运行算法3时，list数组已经被修改，所以这里把值传给list1</span><br><span class="line">        System.arraycopy(list,0, list1, 0, list.length);</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int k = list1[0];// 变量i记录当前磁头位置</span><br><span class="line">        int tempk1 = 0;</span><br><span class="line">        int tempk2 = 0;</span><br><span class="line">        int flag=1;</span><br><span class="line">        int num = 0;// num记录总寻道距离</span><br><span class="line">        int[] templist = new int[list1.length];// 将访问顺序存入templist中</span><br><span class="line">        System.out.println(&quot;磁道开始位置为:&quot; + list1[0]);</span><br><span class="line">        //while中先计算出磁道访问的顺序</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.println(&quot;1.磁头从外向内  2.磁头从内向外&quot;);</span><br><span class="line">            int choice = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            if (choice == 1) &#123;</span><br><span class="line">                flag=5;</span><br><span class="line"></span><br><span class="line">                SortA(list1);// 从小到大排序</span><br><span class="line">                // 找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">                for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                    if (k == list1[i])</span><br><span class="line">                        tempk1 = i;</span><br><span class="line">                &#125;</span><br><span class="line">                System.arraycopy(list1, tempk1, templist, 0, list1.length - tempk1);</span><br><span class="line"></span><br><span class="line">                SortB(list1);// 从大到小</span><br><span class="line">                // 找出重排序后，k在数组中的位置,templist记录区间[tempk2+1,list.length]</span><br><span class="line">                for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                    if (k == list1[i])</span><br><span class="line">                        tempk2 = i;</span><br><span class="line">                &#125;</span><br><span class="line">                System.arraycopy(list1, tempk2 + 1, templist, tempk2 + 1, list1.length - tempk2 - 1);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            else if (choice == 2) &#123;</span><br><span class="line">                flag=5;</span><br><span class="line"></span><br><span class="line">                SortB(list1);</span><br><span class="line">                // 找出重排序后，k在数组中的位置，templist记录区间[0,list.length-tempk1]</span><br><span class="line">                for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                    if (k == list1[i])</span><br><span class="line">                        tempk1 = i;</span><br><span class="line">                &#125;</span><br><span class="line">                System.arraycopy(list1, tempk1, templist, 0, list1.length - tempk1);</span><br><span class="line"></span><br><span class="line">                SortA(list1);// 从小到大</span><br><span class="line">                // 找出重排序后，k在数组中的位置,templist记录区间[tempk2+1,list.length]</span><br><span class="line">                for (int i = 0; i &lt; list1.length; i++) &#123;</span><br><span class="line">                    if (k == list1[i])</span><br><span class="line">                        tempk2 = i;</span><br><span class="line">                &#125;</span><br><span class="line">                System.arraycopy(list1, tempk2 + 1, templist, tempk2 + 1, list1.length - tempk2 - 1);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            else if (flag==5)</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            else</span><br><span class="line">                System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //计算寻道距离</span><br><span class="line">        for (int j = 0; j &lt; templist.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(templist[j + 1] - templist[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">        System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道距离&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int Tracknum;// 磁道数</span><br><span class="line">        System.out.println(&quot;请输入磁道数量Tracknum&quot;);</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        Tracknum = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        // 随机生成磁道序列</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        int[] TrackSequence = new int[Tracknum];</span><br><span class="line">        for (int i = 0; i &lt; Tracknum; i++) &#123;</span><br><span class="line">            TrackSequence[i] = r.nextInt(100)+1;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁道序列为&quot; + Arrays.toString(TrackSequence));</span><br><span class="line"></span><br><span class="line">        // 菜单</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.println(&quot;请选择算法 1.FCFS 2.SSTF 3.SCAN  0.退出&quot;);</span><br><span class="line">            int k = sc.nextInt();</span><br><span class="line">            switch (k) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    FCFS(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    SSTF(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    SCAN(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 0:</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                default:</span><br><span class="line">                    System.out.println(&quot;输的不对&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>B</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 操作系统实验;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">/*</span><br><span class="line"> * 磁盘调度FCFS、SSTF、SCAN</span><br><span class="line"> * @author 张时贰</span><br><span class="line"> * @data 2021年12月7日</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class 磁盘调度算法自定义磁头 &#123;</span><br><span class="line">    // 冒泡排序(从小到大)</span><br><span class="line">    public static void SortA(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &gt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 冒泡排序(从大到小)</span><br><span class="line">    public static void SortB(int[] list) &#123;</span><br><span class="line">        for (int i = 0; i &lt; list.length - 1; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1 - i; j++) &#123;</span><br><span class="line">                if (list[j] &lt; list[j + 1]) &#123;</span><br><span class="line">                    int temp = list[j];</span><br><span class="line">                    list[j] = list[j + 1];</span><br><span class="line">                    list[j + 1] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 先来先服务FCSFS,即根据磁盘访问的先后次序进行调度,遍历list数组即可，所以不做赘述</span><br><span class="line">    private static void FCFS(int[] list) &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        i = sc.nextInt();</span><br><span class="line">        int num = 0;// 变量num记录寻道距离</span><br><span class="line">        num = Math.abs(i - list[0]);</span><br><span class="line">        for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">            num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为：&quot; + Arrays.toString(list));</span><br><span class="line">        System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道距离&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 最短路径算法SSTF,即访问下一个磁道前，先计算一次当前磁头到访问各个磁道的距离</span><br><span class="line">    private static void SSTF(int[] list) &#123;</span><br><span class="line">        int i = 0;// 变量i记录当前磁头位置</span><br><span class="line">        int num = 0;// num记录总寻道距离</span><br><span class="line">        int[] templist = new int[list.length];// 将结果保存在templist[]中</span><br><span class="line">        int[] k = new int[list.length];// k数组记录访问的每一个磁道到磁头距离</span><br><span class="line">        System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        i = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        for (int a = 0; a &lt; list.length; a++) &#123;</span><br><span class="line">            // j循环遍历出每一个访问的磁道到当前磁头的距离保存在k数组中</span><br><span class="line">            for (int j = 0; j &lt; list.length; j++) &#123;</span><br><span class="line">                k[j] = Math.abs(list[j] - i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 将k数组赋值给temp数组，对temp数组冒泡排序</span><br><span class="line">            int[] temp = new int[k.length];</span><br><span class="line">            for (int j = 0; j &lt; k.length; j++) &#123;</span><br><span class="line">                temp[j] = k[j];</span><br><span class="line">            &#125;</span><br><span class="line">            SortA(temp);</span><br><span class="line"></span><br><span class="line">            int j = temp[0];// 找到磁头到下一个磁道距离最小的为temp[0]</span><br><span class="line"></span><br><span class="line">            // 循环遍历找到temp[0]在list磁道序列数组中的位置</span><br><span class="line">            for (int t = 0; t &lt; k.length; t++) &#123;</span><br><span class="line">                // if语句找到list[t]到当前磁头最近</span><br><span class="line">                if (k[t] == j) &#123;</span><br><span class="line">                    i = list[t];// 变量i记录磁头位置</span><br><span class="line">                    templist[a] = i;// 将结果存入templist数组中</span><br><span class="line">                    list[t] = 999999;// 将第g个磁道号设为999999，可以理解为权重设为99999，这样他在下一次遍历，k数组中总是最大</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num += j;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">        System.out.println(&quot;寻道次数:&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道距离:&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*扫描算法SCAN   磁盘的0磁道在最外圈</span><br><span class="line">    扫描算法又叫电梯算法，即按从小到大或从大到小的顺序去依次访问磁道。</span><br><span class="line">    所以这里分两种情况，1.寻道从内向外(从大到小) 2.寻道从外向内(从小到大)</span><br><span class="line"></span><br><span class="line">    注意:实验要求直观的看出三种算法的区别，是以磁道序列的首磁道为磁头，用户自定义磁头方向。</span><br><span class="line">    这里分三种情况,按教材的案例，磁头方向从内向外</span><br><span class="line">    1.若当前磁头位置大于请求序列中最大者，则直接由内向外依次给予请求服务</span><br><span class="line">    2.若当前磁头位置小于请求序列中最小者，则直接由外向内依次给予各请求服务</span><br><span class="line">    3.若当前磁道号大于请求序列中最小者且小于最大者,调用SCAN算法</span><br><span class="line">    */</span><br><span class="line">    private static void SCAN(int[] list) &#123;</span><br><span class="line">        SortA(list);//先进行一次从小到大排序</span><br><span class="line">        int num = 0;// num记录总寻道距离</span><br><span class="line">        System.out.println(&quot;请输入磁头初始位置&quot;);</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int i = sc.nextInt();//变量i记录磁头位置</span><br><span class="line">        int k = 0;</span><br><span class="line">        int[] templist=new int[list.length];//将访问顺序存入templist中</span><br><span class="line"></span><br><span class="line">        //1.若当前磁头位置大于请求序列中最大者，则直接由内向外依次给予请求服务</span><br><span class="line">        if(i&gt;list[list.length-1]) &#123;</span><br><span class="line">            SortB(list);//从大到小(从内向外)依次访问</span><br><span class="line">            System.arraycopy(list, 0, templist, 0, list.length);//将访问顺序存入templist中</span><br><span class="line">            //计算距离</span><br><span class="line">            num +=Math.abs(i- list[list.length-1]);//磁头移动到第一个磁道的距离</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">                num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2.若当前磁头位置小于请求序列中最小者，则直接由外向内依次给予各请求服务</span><br><span class="line">        else if(i&lt;list[0]) &#123;</span><br><span class="line">            //已经进行过从小到大排序，所以这里不用再次调用SortA</span><br><span class="line">            System.arraycopy(list, 0, templist, 0, list.length);</span><br><span class="line">            //计算距离</span><br><span class="line">            num +=Math.abs(i- list[list.length-1]);//磁头移动到第一个磁道的距离</span><br><span class="line">            for (int j = 0; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">                num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //3.若当前磁头大于请求序列中最小者且小于最大者</span><br><span class="line">        else &#123;</span><br><span class="line">            //寻找离磁头最近的访问磁道</span><br><span class="line">            for (int j = 0; j &lt; list.length; j++) &#123;</span><br><span class="line">                if (i &lt;= list[j]) &#123;</span><br><span class="line">                    k = j;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //记录磁道访问顺序到templist中</span><br><span class="line">            System.arraycopy(list, k, templist, 0, list.length-k);</span><br><span class="line">            SortB(list);</span><br><span class="line">            System.arraycopy(list,list.length-k, templist, list.length-k, k);</span><br><span class="line"></span><br><span class="line">            num = Math.abs(i - templist[0]);//磁头移动到第一个磁道的距离</span><br><span class="line">            //每个访问磁道之间的距离</span><br><span class="line">            for (int j = 0; j &lt; templist.length - 1; j++) &#123;</span><br><span class="line">                num += Math.abs(templist[j + 1] - templist[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            /*以下注释比较难懂，用上面这段计算距离*/</span><br><span class="line">            //          //找到后由外向内访问(由小到大)，然后再由内向外访问(从大到小)</span><br><span class="line">            //          //两次for计算总距离</span><br><span class="line">            //          num += list[k] - i;//磁头移动到第一个磁道的距离</span><br><span class="line">            //          //由外向内，区间[k,list.length-1)</span><br><span class="line">            //          for (int j = k; j &lt; list.length - 1; j++) &#123;</span><br><span class="line">            //              num += list[j + 1] - list[j];</span><br><span class="line">            //          &#125;</span><br><span class="line">            //          //到达最里面，再由内向外访问剩余磁道,区间[0,k-1)</span><br><span class="line">            //          for (int j = 0; j &lt; k - 1; j++) &#123;</span><br><span class="line">            //              num += Math.abs(list[j + 1] - list[j]);</span><br><span class="line">            //          &#125;       </span><br><span class="line">            //          num += list[list.length - 1] - list[k - 1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;磁盘扫描序列为:&quot; + Arrays.toString(templist));</span><br><span class="line">        System.out.println(&quot;寻道次数&quot; + num);</span><br><span class="line">        double w = ((float) num / (float) list.length);</span><br><span class="line">        System.out.println(&quot;平均寻道长度&quot; + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int Tracknum;// 磁道数</span><br><span class="line"></span><br><span class="line">        // 菜单</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            System.out.println(&quot;请输入磁道数量Tracknum&quot;);</span><br><span class="line">            Tracknum = sc.nextInt();</span><br><span class="line">            // 输入磁道序列</span><br><span class="line">            int[] TrackSequence = new int[Tracknum];</span><br><span class="line">            System.out.println(&quot;磁道序列&quot;);</span><br><span class="line">            for (int i = 0; i &lt; Tracknum; i++) &#123;</span><br><span class="line">                TrackSequence[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;磁道序列为&quot; + Arrays.toString(TrackSequence));</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;请选择算法 1.FCFS 2.SSTF 3.SCAN  0.退出&quot;);</span><br><span class="line">            int k = sc.nextInt();</span><br><span class="line">            switch (k) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    FCFS(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    SSTF(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    SCAN(TrackSequence);</span><br><span class="line">                    break;</span><br><span class="line">                case 0:</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                default:</span><br><span class="line">                    System.out.println(&quot;输的不对&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>这里使用课本P233页的磁道序列：55 58 39 18 90 160 150 38 184，磁头初始位置都为100。因为A的磁道序列是随机生成的，这里运行结果使用B代码，方便对比 <strong>先来先服务FCFS</strong></p><table><thead><tr><th>被访问的下一个磁道号</th><th>移动距离（磁道数）</th></tr></thead><tbody><tr><td>55</td><td>45</td></tr><tr><td>58</td><td>3</td></tr><tr><td>39</td><td>19</td></tr><tr><td>18</td><td>21</td></tr><tr><td>90</td><td>72</td></tr><tr><td>160</td><td>70</td></tr><tr><td>150</td><td>10</td></tr><tr><td>38</td><td>112</td></tr><tr><td>184</td><td>146</td></tr><tr><td>平均寻道长度</td><td>55.3</td></tr></tbody></table><p><strong>最短寻道时间优先SSTF</strong></p><table><thead><tr><th>被访问的下一个磁道号</th><th>移动距离（磁道数）</th></tr></thead><tbody><tr><td>90</td><td>10</td></tr><tr><td>58</td><td>32</td></tr><tr><td>55</td><td>3</td></tr><tr><td>39</td><td>16</td></tr><tr><td>38</td><td>1</td></tr><tr><td>18</td><td>20</td></tr><tr><td>150</td><td>132</td></tr><tr><td>160</td><td>10</td></tr><tr><td>184</td><td>24</td></tr><tr><td>平均寻道长度</td><td>27.5</td></tr></tbody></table><p><strong>扫描算法SCAN</strong></p><table><thead><tr><th>被访问的下一个磁道号</th><th>移动距离（磁道数）</th></tr></thead><tbody><tr><td>150</td><td>50</td></tr><tr><td>160</td><td>10</td></tr><tr><td>184</td><td>24</td></tr><tr><td>90</td><td>94</td></tr><tr><td>58</td><td>32</td></tr><tr><td>55</td><td>3</td></tr><tr><td>39</td><td>16</td></tr><tr><td>38</td><td>1</td></tr><tr><td>18</td><td>20</td></tr><tr><td>平均寻道长度</td><td>27.8</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C03.png" alt="image-20211208004946604"></p><p><strong>A的运行结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C00.png" alt="image-20211208084319142"></p><h2 id="学习到的新东西！"><a href="#学习到的新东西！" class="headerlink" title="学习到的新东西！"></a>学习到的新东西！</h2><p><strong>1.这段代码看着好像没什么问题，菜单也一直这样写，但是他是一个死循环(菜单也是死循环但是菜单之后不执行其它代码所以不影响)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">    System.out.println(&quot;1.从内向外依次访问 2.从外向内依次访问&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int choice = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    switch (choice) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            Sort(list);// 对list从小到大冒泡排序，即从内向外依次访问</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            SortB(list);// 对list从大到小冒泡排序，即从外向内依次访问</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            System.out.println(&quot;输的不对,重新输入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int flag=0;</span><br><span class="line">while (true) &#123;</span><br><span class="line">    System.out.println(&quot;1.从内向外依次访问 2.从外向内依次访问&quot;);</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int choice = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    switch (choice) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            Sort(list);// 对list从小到大冒泡排序，即从内向外依次访问</span><br><span class="line">            flag++;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            SortB(list);// 对list从大到小冒泡排序，即从外向内依次访问</span><br><span class="line">            flag++;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            System.out.println(&quot;输的不对,重新输入&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag!=0)</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C05.png" alt="image-20211207185621486"></p><p><strong>2.对数组遍历</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.toString(templist));</span><br></pre></td></tr></table></figure><p><strong>3.对数组的值传递</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.arraycopy(list, 0, templist, 0, list.length);//(数组名，数组位置，数组名，数组位置，传递个数)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 磁盘访问时间主要有哪些部分构成？要提高磁盘调度效率，主要在哪方面下手更好？</p><p>磁盘访问时间主要由寻道时间，旋转延迟时间，传输时间构成。集中数据传输，有利于提高传输效率</p><p> 最短寻道时间优先算法与扫描(电梯)算法有什么异同？如何改进SCAN算法？</p><p>最短寻道时间优先算法是基于优先级的调度算法，因此就可能导致优先级低的进程发生饥饿现象，而扫描算法不仅考虑距离，更优先考虑磁头的移动方向。改进SCAN算法，规定磁头单向移动，即从内向外访问，到达最外面，磁头立即返回内侧</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小张的Heart</title>
      <link href="/posts/9941/"/>
      <url>/posts/9941/</url>
      
        <content type="html"><![CDATA[<h1 id="使用MATLAB绘制心心"><a href="#使用MATLAB绘制心心" class="headerlink" title="使用MATLAB绘制心心"></a>使用MATLAB绘制心心</h1><ul><li>TIT的校友在管家墙上发了各种python、JAVA、C、C+:heart:,小张也<strong>不甘示弱</strong>！！！<h1 id="1-二维静态-heart"><a href="#1-二维静态-heart" class="headerlink" title="1.二维静态:heart:"></a>1.二维静态:heart:</h1></li></ul><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=@(x,y,z)(x.^<span class="number">2</span>+ (<span class="number">9.</span>/<span class="number">4</span>).*y.^<span class="number">2</span> + z.^<span class="number">2</span> - <span class="number">1</span>).^<span class="number">3</span> - x.^<span class="number">2.</span>*z.^<span class="number">3</span> - (<span class="number">9.</span>/<span class="number">80</span>).*y.^<span class="number">2.</span>*z.^<span class="number">3</span>;</span><br><span class="line">[x,y,z]=<span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">-3</span>,<span class="number">3</span>));</span><br><span class="line">val=f(x,y,z);</span><br><span class="line">[p,v]=isosurface(x,y,z,val,<span class="number">0</span>);</span><br><span class="line">patch(<span class="string">&#x27;faces&#x27;</span>,p,<span class="string">&#x27;vertices&#x27;</span>,v,<span class="string">&#x27;facevertexcdata&#x27;</span>,jet(<span class="built_in">size</span>(v,<span class="number">1</span>)),<span class="string">&#x27;facecolor&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;edgecolor&#x27;</span>,<span class="string">&#x27;flat&#x27;</span>);</span><br><span class="line">view(<span class="number">3</span>);</span><br><span class="line">grid on;</span><br><span class="line">axis equal;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%B0%8F%E5%BC%A0%E7%9A%84Heart/%E5%BF%83%E5%BF%8301.png" alt="image-20211206161211669"></p><h1 id="2-二维动画版"><a href="#2-二维动画版" class="headerlink" title="2.二维动画版"></a>2.二维动画版</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">warning  off</span><br><span class="line"> <span class="keyword">for</span> b=<span class="number">-10</span>:<span class="number">1</span>:<span class="number">40</span> </span><br><span class="line">     clf;</span><br><span class="line">    x=[<span class="number">-1.6</span>:<span class="number">0.01</span>:<span class="number">1.6</span>];</span><br><span class="line">    y=(<span class="built_in">sqrt</span>(<span class="built_in">cos</span>(x)).*<span class="built_in">cos</span>(b.*<span class="number">200.</span>*x)+<span class="built_in">sqrt</span>(<span class="built_in">abs</span>(x))<span class="number">-0.7</span>).*(<span class="number">4</span>-x.^<span class="number">2</span>).^<span class="number">0.01</span>;</span><br><span class="line">    <span class="built_in">plot</span>(x,y,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    axis off</span><br><span class="line">    pause(<span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">hold</span> off</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%B0%8F%E5%BC%A0%E7%9A%84Heart/%E5%BF%83%E5%BF%8302.png" alt="image-20211206165926649"></p><h1 id="3-三维动画版"><a href="#3-三维动画版" class="headerlink" title="3.三维动画版"></a>3.三维动画版</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[X,Y,Z] = <span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">101</span>));</span><br><span class="line">F = -X.^<span class="number">2.</span>*Z.^<span class="number">3</span>-(<span class="number">9</span>/<span class="number">80</span>).*Y.^<span class="number">2.</span>*Z.^<span class="number">3</span>+(X.^<span class="number">2</span>+(<span class="number">9</span>/<span class="number">4</span>).*Y.^<span class="number">2</span>+Z.^<span class="number">2</span><span class="number">-1</span>).^<span class="number">3</span>;</span><br><span class="line">hFigure = <span class="built_in">figure</span>;</span><br><span class="line">sz = get(hFigure, <span class="string">&#x27;Position&#x27;</span>);</span><br><span class="line">set(hFigure, <span class="string">&#x27;Position&#x27;</span>, [sz(<span class="number">1</span>)<span class="number">-0.15</span>*sz(<span class="number">3</span>) sz(<span class="number">2</span>) <span class="number">1.3</span>*sz(<span class="number">3</span>) sz(<span class="number">4</span>)]);</span><br><span class="line">set(hFigure,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;menu&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">hAxes = axes(<span class="string">&#x27;Parent&#x27;</span>,hFigure,<span class="string">&#x27;NextPlot&#x27;</span>,<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;DataAspectRatio&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], <span class="string">&#x27;XLim&#x27;</span>,[<span class="number">30</span> <span class="number">120</span>],<span class="string">&#x27;YLim&#x27;</span>,[<span class="number">35</span> <span class="number">65</span>],<span class="string">&#x27;ZLim&#x27;</span>,[<span class="number">30</span> <span class="number">75</span>]);</span><br><span class="line">view([<span class="number">-39</span> <span class="number">30</span>]);</span><br><span class="line">axis off</span><br><span class="line">hidden on</span><br><span class="line">p = patch(isosurface(F,<span class="number">-0.001</span>));</span><br><span class="line">set(p,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> iX = [<span class="number">35</span> <span class="number">38</span> <span class="number">41</span> <span class="number">45</span> <span class="number">48</span> <span class="number">51</span> <span class="number">54</span> <span class="number">57</span> <span class="number">61</span> <span class="number">64</span> <span class="number">67</span>]</span><br><span class="line">plane = <span class="built_in">reshape</span>(F(:,iX,:),<span class="number">101</span>,<span class="number">101</span>);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">xData = iX.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h3=<span class="built_in">plot3</span>(hAxes,xData,cData(<span class="number">2</span>,<span class="number">2</span>:<span class="keyword">end</span>),cData(<span class="number">1</span>,<span class="number">2</span>:<span class="keyword">end</span>),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h3,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> iY = [<span class="number">41</span> <span class="number">44</span> <span class="number">47</span> <span class="number">51</span> <span class="number">55</span> <span class="number">58</span> <span class="number">61</span>]</span><br><span class="line">plane = <span class="built_in">reshape</span>(F(iY,:,:),<span class="number">101</span>,<span class="number">101</span>);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">yData = iY.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h4=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">2</span>,<span class="number">2</span>:<span class="keyword">end</span>),yData,cData(<span class="number">1</span>,<span class="number">2</span>:<span class="keyword">end</span>),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h4,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> iZ = [<span class="number">36</span> <span class="number">38</span> <span class="number">40</span> <span class="number">42</span> <span class="number">44</span> <span class="number">46</span> <span class="number">48</span> <span class="number">50</span> <span class="number">52</span> <span class="number">54</span> <span class="number">56</span> <span class="number">58</span> <span class="number">60</span> <span class="number">62</span> <span class="number">64</span> <span class="number">66</span> <span class="number">69</span> <span class="number">71</span>]</span><br><span class="line">plane = F(:,:,iZ);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">startIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">size</span>(cData,<span class="number">2</span>) &gt; (cData(<span class="number">2</span>,<span class="number">1</span>)+<span class="number">1</span>)</span><br><span class="line">startIndex = cData(<span class="number">2</span>,<span class="number">1</span>)+<span class="number">2</span>;</span><br><span class="line">zData = iZ.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h0=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">1</span>,<span class="number">2</span>:(startIndex<span class="number">-1</span>)),cData(<span class="number">2</span>,<span class="number">2</span>:(startIndex<span class="number">-1</span>)),zData,<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h0,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">zData = iZ.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,startIndex));</span><br><span class="line">h1=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">1</span>,(startIndex+<span class="number">1</span>):<span class="keyword">end</span>),cData(<span class="number">2</span>,(startIndex+<span class="number">1</span>):<span class="keyword">end</span>),zData,<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h1,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pause(<span class="number">.2</span>)</span><br><span class="line">text(<span class="number">7</span>,<span class="number">50</span>,<span class="number">70</span>,<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;fontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">pause(<span class="number">.5</span>)</span><br><span class="line">text(<span class="number">80</span>,<span class="number">50</span>,<span class="number">43</span>,<span class="string">&#x27;YOU&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span> ,<span class="string">&#x27;fontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">pause(<span class="number">.2</span>)</span><br><span class="line">text(<span class="number">50</span>,<span class="number">65</span>,<span class="number">90</span>,<span class="string">&#x27;GC_Zhang&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>,<span class="number">38</span>)</span><br><span class="line"><span class="comment">%line([20 80],[50 50],[52.5 52.5], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br><span class="line"><span class="comment">%line([50 50],[20 80],[52.5 52.5], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br><span class="line"><span class="comment">%line([50 50],[50 50],[30 80], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E5%B0%8F%E5%BC%A0%E7%9A%84Heart/%E5%BF%83%E5%BF%8303.png" alt="image-20211206161240131"></p><h1 id="4-同时播放"><a href="#4-同时播放" class="headerlink" title="4.同时播放"></a>4.同时播放</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc</span><br><span class="line">clear all;</span><br><span class="line">close all;</span><br><span class="line">warning  off</span><br><span class="line"> <span class="keyword">for</span> b=<span class="number">-4</span>:<span class="number">1</span>:<span class="number">4</span> </span><br><span class="line">     clf;</span><br><span class="line">    x=[<span class="number">-1.6</span>:<span class="number">0.01</span>:<span class="number">1.6</span>];</span><br><span class="line">    y=(<span class="built_in">sqrt</span>(<span class="built_in">cos</span>(x)).*<span class="built_in">cos</span>(b.*<span class="number">200.</span>*x)+<span class="built_in">sqrt</span>(<span class="built_in">abs</span>(x))<span class="number">-0.7</span>).*(<span class="number">4</span>-x.^<span class="number">2</span>).^<span class="number">0.01</span>;</span><br><span class="line">    <span class="built_in">plot</span>(x,y,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    axis off</span><br><span class="line">    pause(<span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">hold</span> off</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">[X,Y,Z] = <span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">-3</span>,<span class="number">3</span>,<span class="number">101</span>));</span><br><span class="line">F = -X.^<span class="number">2.</span>*Z.^<span class="number">3</span>-(<span class="number">9</span>/<span class="number">80</span>).*Y.^<span class="number">2.</span>*Z.^<span class="number">3</span>+(X.^<span class="number">2</span>+(<span class="number">9</span>/<span class="number">4</span>).*Y.^<span class="number">2</span>+Z.^<span class="number">2</span><span class="number">-1</span>).^<span class="number">3</span>;</span><br><span class="line">hFigure = <span class="built_in">figure</span>;</span><br><span class="line">sz = get(hFigure, <span class="string">&#x27;Position&#x27;</span>);</span><br><span class="line">set(hFigure, <span class="string">&#x27;Position&#x27;</span>, [sz(<span class="number">1</span>)<span class="number">-0.15</span>*sz(<span class="number">3</span>) sz(<span class="number">2</span>) <span class="number">1.3</span>*sz(<span class="number">3</span>) sz(<span class="number">4</span>)]);</span><br><span class="line">set(hFigure,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;menu&#x27;</span>,<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">hAxes = axes(<span class="string">&#x27;Parent&#x27;</span>,hFigure,<span class="string">&#x27;NextPlot&#x27;</span>,<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;DataAspectRatio&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>], <span class="string">&#x27;XLim&#x27;</span>,[<span class="number">30</span> <span class="number">120</span>],<span class="string">&#x27;YLim&#x27;</span>,[<span class="number">35</span> <span class="number">65</span>],<span class="string">&#x27;ZLim&#x27;</span>,[<span class="number">30</span> <span class="number">75</span>]);</span><br><span class="line">view([<span class="number">-39</span> <span class="number">30</span>]);</span><br><span class="line">axis off</span><br><span class="line">hidden on</span><br><span class="line">p = patch(isosurface(F,<span class="number">-0.001</span>));</span><br><span class="line">set(p,<span class="string">&#x27;FaceColor&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;EdgeColor&#x27;</span>,<span class="string">&#x27;none&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> iX = [<span class="number">35</span> <span class="number">38</span> <span class="number">41</span> <span class="number">45</span> <span class="number">48</span> <span class="number">51</span> <span class="number">54</span> <span class="number">57</span> <span class="number">61</span> <span class="number">64</span> <span class="number">67</span>]</span><br><span class="line">plane = <span class="built_in">reshape</span>(F(:,iX,:),<span class="number">101</span>,<span class="number">101</span>);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">xData = iX.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h3=<span class="built_in">plot3</span>(hAxes,xData,cData(<span class="number">2</span>,<span class="number">2</span>:<span class="keyword">end</span>),cData(<span class="number">1</span>,<span class="number">2</span>:<span class="keyword">end</span>),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h3,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> iY = [<span class="number">41</span> <span class="number">44</span> <span class="number">47</span> <span class="number">51</span> <span class="number">55</span> <span class="number">58</span> <span class="number">61</span>]</span><br><span class="line">plane = <span class="built_in">reshape</span>(F(iY,:,:),<span class="number">101</span>,<span class="number">101</span>);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">yData = iY.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h4=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">2</span>,<span class="number">2</span>:<span class="keyword">end</span>),yData,cData(<span class="number">1</span>,<span class="number">2</span>:<span class="keyword">end</span>),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h4,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> iZ = [<span class="number">36</span> <span class="number">38</span> <span class="number">40</span> <span class="number">42</span> <span class="number">44</span> <span class="number">46</span> <span class="number">48</span> <span class="number">50</span> <span class="number">52</span> <span class="number">54</span> <span class="number">56</span> <span class="number">58</span> <span class="number">60</span> <span class="number">62</span> <span class="number">64</span> <span class="number">66</span> <span class="number">69</span> <span class="number">71</span>]</span><br><span class="line">plane = F(:,:,iZ);</span><br><span class="line">cData = contourc(plane,[<span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">startIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">size</span>(cData,<span class="number">2</span>) &gt; (cData(<span class="number">2</span>,<span class="number">1</span>)+<span class="number">1</span>)</span><br><span class="line">startIndex = cData(<span class="number">2</span>,<span class="number">1</span>)+<span class="number">2</span>;</span><br><span class="line">zData = iZ.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">h0=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">1</span>,<span class="number">2</span>:(startIndex<span class="number">-1</span>)),cData(<span class="number">2</span>,<span class="number">2</span>:(startIndex<span class="number">-1</span>)),zData,<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h0,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">zData = iZ.*<span class="built_in">ones</span>(<span class="number">1</span>,cData(<span class="number">2</span>,startIndex));</span><br><span class="line">h1=<span class="built_in">plot3</span>(hAxes,cData(<span class="number">1</span>,(startIndex+<span class="number">1</span>):<span class="keyword">end</span>),cData(<span class="number">2</span>,(startIndex+<span class="number">1</span>):<span class="keyword">end</span>),zData,<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">set(h1,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">pause(<span class="number">.1</span>), drawnow</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pause(<span class="number">.2</span>)</span><br><span class="line">text(<span class="number">7</span>,<span class="number">50</span>,<span class="number">70</span>,<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;fontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">pause(<span class="number">.5</span>)</span><br><span class="line">text(<span class="number">80</span>,<span class="number">50</span>,<span class="number">43</span>,<span class="string">&#x27;YOU&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;fontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontAngle&#x27;</span>,<span class="string">&#x27;italic&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">pause(<span class="number">.2</span>)</span><br><span class="line">text(<span class="number">50</span>,<span class="number">65</span>,<span class="number">90</span>,<span class="string">&#x27;CSDN 张时贰&#x27;</span>, <span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">38</span>)</span><br><span class="line"><span class="comment">%line([20 80],[50 50],[52.5 52.5], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br><span class="line"><span class="comment">%line([50 50],[20 80],[52.5 52.5], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br><span class="line"><span class="comment">%line([50 50],[50 50],[30 80], &#x27;color&#x27;,&#x27;k&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验二 查询(SQL入门教学二 从0到1）</title>
      <link href="/posts/5412/"/>
      <url>/posts/5412/</url>
      
        <content type="html"><![CDATA[<h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>实验内容和要求</strong></li></ul><p>1．熟练掌握简单查询操作：包括投影、选择、数据排序、分组等查询操作。</p><p>2．熟练掌握连接查询操作：包括等值连接、自然连接、笛卡尔积、交叉连接、内连接、外连接、自身连接等操作。</p><p>3．熟练掌握数据查询中的嵌套和统计查询的操作方法。</p><p>4．具体内容：</p><p>  （1）用SQL语句表示下列操作，在学生库中实现数据查询。</p><p>  ①求数学系学生的学号和姓名。</p><p>  ②求选修了课程的学生学号。</p><p>  ③求选修001号课程的学生学号和成绩，并要求对查询结果按成绩降序排列，如果成绩相同则按学号升序排列。</p><p>  ④求选修课程001且成绩在80～90分之间的学生学号和成绩，并将成绩乘以系数0.8输出。</p><p>  ⑤求数学系或计算机系姓张的学生的信息。</p><p>  ⑥查看选修了课程、但没有成绩学生的学号、姓名、课程号和所在是系部。</p><p>  ⑦查询学生的学号、姓名、课程名和成绩。</p><p>  ⑧分别实现学生和系的交叉连接、内连接、外连接。</p><p>（2）在SQL Server查询分析器中使用IN、比较符、ANY或ALL和EXISTS操作符进行嵌套查询操作。具体内容如下：</p><p>用SQL语句表示，在学生选课库中实现其数据嵌套查询操作。</p><p>（1）求选修了高等数学的学生学号和姓名。</p><p>（2）求001课程的成绩高于张力的学生学号和成绩。</p><p>（3）求其他系中年龄小于计算机系年龄最大者的学生。</p><p>（4）求其他系中比计算机系学生年龄都小的学生。</p><p>（5）求选修了001课程的学生姓名。</p><p>（6）求没有选修001课程的学生姓名。</p><p>（7）查询选修了全部课程的学生的姓名。</p><ul><li>参考教材《数据库系统概论第五版》&#x3D;&#x3D;P89-P111  数据查询&#x3D;&#x3D;</li></ul><h2 id="SQL知识点"><a href="#SQL知识点" class="headerlink" title="SQL知识点"></a>SQL知识点</h2><p><strong>实验前,先熟悉常用的查询语句,方便理解以下代码</strong></p><h3 id="一、单表查询"><a href="#一、单表查询" class="headerlink" title="一、单表查询"></a>一、单表查询</h3><p>仅涉及一个表的查询</p><h4 id="1-ORDER-BY"><a href="#1-ORDER-BY" class="headerlink" title="1.ORDER BY"></a>1.ORDER BY</h4><p>对查询结果按照升序(ASC)或降序(DESC)排列,默认为升序</p><h4 id="2-WHERE-子句常用的查询条件"><a href="#2-WHERE-子句常用的查询条件" class="headerlink" title="2.WHERE 子句常用的查询条件"></a>2.WHERE 子句常用的查询条件</h4><p><strong>比较:</strong>&#x3D;,&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,!&#x3D;,!&gt;,!&lt;;NOT+以上运算符</p><p><strong>确定集合的范围:</strong> BETWEEN AND(闭区间),NOT BETWEEN AND</p><p><strong>确定集合:</strong> IN,NOT IN(返回为单值时可以使用”&#x3D;”代替IN)</p><p><strong>字符匹配:</strong> LIKE,NOT LIKE(<em>如果LIKE后面的匹配串中不含通配符,则可以使用”&#x3D;”代替LIKE</em>)</p><p><strong>空值:</strong> IS NULL,IS NOT NULL</p><p><strong>多重条件:</strong> AND(交集),OR(并集),NOT</p><h4 id="3-通配符-”-”-”-”"><a href="#3-通配符-”-”-”-”" class="headerlink" title="3.通配符:”%”,”_”"></a>3.通配符:”%”,”_”</h4><p>所有张姓学生: <code>WHERE Sname LIKE &#39;张% </code></p><p>第二个字为”阳”:<code>WHERE Sname LIKE &#39;_阳%&#39;</code></p><p>当需要查询的数据中包含通配符,使用转义字符,例如查找包含”_1920”的数据,<code>WHERE Sname LIKE &#39;\_1920&#39; ESCAPE &#39;\&#39;</code> </p><h4 id="4-聚集函数"><a href="#4-聚集函数" class="headerlink" title="4.聚集函数"></a>4.聚集函数</h4><p>统计元组个数:COUNT(*)</p><p>统计一列中值的个数:COUNT(列名)</p><p>计算一列值的总和(此列必须是整数型):SUM(列名)</p><p>计算一列值的平均值(此列必须是整数型):AVG(列名)</p><p>求一列总的最大值:MAX(列名)</p><p>求一列中的最小值:MAX(列名)</p><h4 id="5-GROUP-BY"><a href="#5-GROUP-BY" class="headerlink" title="5.GROUP BY"></a>5.GROUP BY</h4><p>GROUP BY指将查询结果按一列或多列的值分组</p><p><strong>求各个课程号及对应的选课人数</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Sno)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br></pre></td></tr></table></figure><p><strong>查询选修了三门以上课程的学生学号</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> GOUNT(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="二、连接查询"><a href="#二、连接查询" class="headerlink" title="二、连接查询"></a>二、连接查询</h3><h4 id="1-自然连接"><a href="#1-自然连接" class="headerlink" title="1.自然连接"></a>1.自然连接</h4><p>将目标列中重复的属性列去掉则为自然连接</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno;</span><br></pre></td></tr></table></figure><h4 id="2-自身连接"><a href="#2-自身连接" class="headerlink" title="2.自身连接"></a>2.自身连接</h4><p>在Course中,每门课程只有先修课信息,而没有先修课的先修课,要得到这个信息,必须对一门课找到其先修课.再按此先修课的课程号查找它的先修课程.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>,Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno<span class="operator">=</span>SECOND.Cno;</span><br></pre></td></tr></table></figure><h4 id="3-外连接"><a href="#3-外连接" class="headerlink" title="3.外连接"></a>3.外连接</h4><p>查询SC表,某个学生没有选课,在SC表中为NULL,查询不显示该学生,使用外连接则可以显示所有学生的选课情况</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.Sno<span class="operator">=</span>SC.Sno);</span><br></pre></td></tr></table></figure><h4 id="4-多表连接"><a href="#4-多表连接" class="headerlink" title="4.多表连接"></a>4.多表连接</h4><p>两个以后上的表进行连接</p><p>查询每个学生的学号、姓名、选修的课程名及成绩</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student,Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Cno<span class="operator">=</span>Course.Cno;</span><br></pre></td></tr></table></figure><h3 id="三、嵌套查询"><a href="#三、嵌套查询" class="headerlink" title="三、嵌套查询"></a>三、嵌套查询</h3><h4 id="1-带有IN谓词的子查询"><a href="#1-带有IN谓词的子查询" class="headerlink" title="1.带有IN谓词的子查询"></a>1.带有IN谓词的子查询</h4><p>查询与张帆同一个系学习的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="２-带有运算符的子查询"><a href="#２-带有运算符的子查询" class="headerlink" title="２.带有运算符的子查询"></a>２.带有运算符的子查询</h4><p><strong>返回值是单值时使用运算符</strong></p><p>查询与张帆同一个系学习的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>);</span><br></pre></td></tr></table></figure><p>找出每个学生超过他自己选修课平均成绩的课程号</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;=</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno<span class="operator">=</span>x.Sno);</span><br></pre></td></tr></table></figure><h4 id="３-ANY-SOME-或ALL谓词的子查询"><a href="#３-ANY-SOME-或ALL谓词的子查询" class="headerlink" title="３.ANY(SOME)或ALL谓词的子查询"></a>３.ANY(SOME)或ALL谓词的子查询</h4><p>子查询返回单值时可以用比较运算符,但<strong>返回多值时</strong>要用ANY或ALL谓词修饰符.语义为比较运算符+谓词,例如.大于子查询结果中的某个值<code>&gt;ANY</code>,大于子查询结果中的所有值<code>&gt;ALL</code></p><p>查询非计算机系中比计算机系任意一个学生年龄小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="keyword">ANY</span>(<span class="keyword">SELECT</span> Sage</span><br><span class="line">              <span class="keyword">FROM</span> Student</span><br><span class="line">              <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept<span class="operator">&lt;&gt;</span><span class="string">&#x27;计算机工程系&#x27;</span>;<span class="comment">/*注意这是父查询块中的条件*/</span>              </span><br></pre></td></tr></table></figure><p>使用聚集函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span>(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Sage)</span><br><span class="line">              <span class="keyword">FROM</span> Student</span><br><span class="line">              <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> Sdept<span class="operator">&lt;&gt;</span><span class="string">&#x27;计算机工程系&#x27;</span>;    </span><br></pre></td></tr></table></figure><h4 id="4-带有EXISTS谓词的子查询"><a href="#4-带有EXISTS谓词的子查询" class="headerlink" title="4.带有EXISTS谓词的子查询"></a>4.带有EXISTS谓词的子查询</h4><p>EXISTS代表存在量词”∃”,带有EXISTS谓词的子查询不返回任何数据,只产生逻辑真值true或逻辑假值”false”</p><p>查询与张帆在同一个系学习的学生</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student S1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> Student S2</span><br><span class="line">        <span class="keyword">WHERE</span> S2.Sdept<span class="operator">=</span>S1.Sdept <span class="keyword">AND</span> S2.Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、综合实践"><a href="#四、综合实践" class="headerlink" title="四、综合实践"></a>四、综合实践</h3><p>查询与张帆在同一个系学习的学生</p><p>EXISTS:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student S1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> Student S2</span><br><span class="line">        <span class="keyword">WHERE</span> S2.Sdept<span class="operator">=</span>S1.Sdept <span class="keyword">AND</span> S2.Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>);</span><br></pre></td></tr></table></figure><p>IN:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sdept</span><br><span class="line">        <span class="keyword">FROM</span> Student</span><br><span class="line">        <span class="keyword">WHERE</span> Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>);</span><br></pre></td></tr></table></figure><p>自身连接:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S1.Sno,S1.Sname,S1.Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student S1,Student S2</span><br><span class="line"><span class="keyword">WHERE</span> S1.Sdept<span class="operator">=</span>S2.Sdept <span class="keyword">AND</span> S2.Sname<span class="operator">=</span><span class="string">&#x27;张帆&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C001.png" alt="image-20211206113033277"></p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="一、用SQL语句表示下列操作，在学生库中实现数据查询"><a href="#一、用SQL语句表示下列操作，在学生库中实现数据查询" class="headerlink" title="一、用SQL语句表示下列操作，在学生库中实现数据查询"></a>一、用SQL语句表示下列操作，在学生库中实现数据查询</h3><p><strong>1.1求数学系学生的学号和姓名</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span>(<span class="string">&#x27;数学系&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C02.png" alt="image-20211206132423799"></p><p><strong>1.2求选修了课程的学生学号</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C03.png" alt="image-20211206084118841"></p><p><strong>1.3求选修001号课程的学生学号和成绩，并要求对查询结果按成绩降序排列，如果成绩相同则按学号升序排列</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno <span class="keyword">LIKE</span> <span class="string">&#x27;001&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Grade <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C05.png" alt="image-20211206085123587"></p><p><strong>1.4求选修课程001且成绩在80～90分之间的学生学号和成绩，并将成绩乘以系数0.8输出</strong></p><p>第一个Grade表示*0.8,第二个Grade表示命名这列的名称(默认为空)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Grade<span class="operator">*</span><span class="number">0.8</span> Grade</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">and</span> <span class="number">90</span> <span class="keyword">AND</span> Cno <span class="keyword">LIKE</span> <span class="string">&#x27;001&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C06.png" alt="image-20211206085710032"></p><p><strong>1.5求数学系或计算机系姓张的学生的信息</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (<span class="string">&#x27;数学系&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>) <span class="keyword">AND</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C07.png" alt="image-20211206090244775"></p><p><strong>1.6查看选修了课程、但没有成绩学生的学号、姓名、课程号和所在的系部</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cno,Sdept</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> Student.Sno<span class="operator">=</span>SC.Sno;<span class="comment">/*将Student与SC中同一学生的元组连接起来*/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C08.png" alt="image-20211206091920313"></p><p><strong>1.7查询学生的学号、姓名、课程名和成绩</strong></p><p>&#x3D;&#x3D;<strong>有相同属性时必须进行连接!!!</strong>&#x3D;&#x3D;这里Course与SC中都有Cno,可以删掉<code>Course.Cno=SC.Cno</code>,查看输出结果有什么区别</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,Course,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> Course.Cno<span class="operator">=</span>SC.Cno;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C09.png" alt="image-20211206094743405"></p><p><strong>1.8分别实现学生和系的交叉连接、内连接、外连接</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.<span class="operator">*</span>,Dept.<span class="operator">*</span> <span class="keyword">from</span> Dept <span class="keyword">cross</span> <span class="keyword">join</span> Student;</span><br><span class="line"><span class="keyword">select</span> Student.<span class="operator">*</span>,Dept.<span class="operator">*</span> <span class="keyword">from</span> Student <span class="keyword">inner</span> <span class="keyword">join</span> Dept <span class="keyword">on</span> Student.Sdept <span class="operator">=</span> Dept.Dno;</span><br><span class="line"><span class="keyword">select</span> Student.<span class="operator">*</span>,Dept.<span class="operator">*</span> <span class="keyword">from</span> Student <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> Dept <span class="keyword">on</span> Student.Sdept <span class="operator">=</span> Dept.Dno;</span><br></pre></td></tr></table></figure><h3 id="二、在SQL-Server查询分析器中使用IN、比较符、ANY或ALL和EXISTS操作符进行嵌套查询操作"><a href="#二、在SQL-Server查询分析器中使用IN、比较符、ANY或ALL和EXISTS操作符进行嵌套查询操作" class="headerlink" title="二、在SQL Server查询分析器中使用IN、比较符、ANY或ALL和EXISTS操作符进行嵌套查询操作"></a>二、在SQL Server查询分析器中使用IN、比较符、ANY或ALL和EXISTS操作符进行嵌套查询操作</h3><p><strong>2.1求选修了高等数学的学生学号和姓名</strong></p><p>嵌套查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line">        <span class="keyword">FROM</span> SC</span><br><span class="line">        <span class="keyword">WHERE</span> Cno <span class="keyword">IN</span></span><br><span class="line">        (<span class="keyword">SELECT</span> Cno </span><br><span class="line">            <span class="keyword">FROM</span> Course</span><br><span class="line">            <span class="keyword">WHERE</span> Cname<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>));</span><br></pre></td></tr></table></figure><p>扩展：连接查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Cname<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span> <span class="keyword">AND</span> Student.Sno<span class="operator">=</span>SC.SNo <span class="keyword">AND</span> Course.Cno<span class="operator">=</span>SC.Cno;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C10.png" alt="image-20211206094516790"></p><p><strong>2.2求001课程的成绩高于张力的学生学号和成绩</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.Sno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Grade <span class="operator">&gt;</span><span class="keyword">ANY</span></span><br><span class="line">(<span class="keyword">SELECT</span> Grade</span><br><span class="line">        <span class="keyword">FROM</span> SC</span><br><span class="line">        <span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;001&#x27;</span> <span class="keyword">AND</span> Sno <span class="keyword">IN</span></span><br><span class="line">        (<span class="keyword">SELECT</span> Sno</span><br><span class="line">        <span class="keyword">FROM</span> Student</span><br><span class="line">        <span class="keyword">WHERE</span> Sname<span class="operator">=</span><span class="string">&#x27;张力&#x27;</span>))</span><br><span class="line">        <span class="keyword">AND</span> Student.Sno<span class="operator">=</span>SC.Sno;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C11.png" alt="image-20211206135925891"></p><p><strong>2.3求其他系中年龄小于计算机系年龄最大者的学生</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span><span class="keyword">ALL</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Sage)</span><br><span class="line">    <span class="keyword">FROM</span> Student</span><br><span class="line">    <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line">    <span class="keyword">AND</span> Sdept<span class="operator">&lt;&gt;</span> <span class="string">&#x27;计算机工程系&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C12.png" alt="image-20211206134617934"></p><p><strong>2.4求其他系中比计算机系学生年龄都小的学生</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage <span class="operator">&lt;</span><span class="keyword">ALL</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sage</span><br><span class="line">    <span class="keyword">FROM</span> Student</span><br><span class="line">    <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line">    <span class="keyword">AND</span> Sdept<span class="operator">&lt;&gt;</span> <span class="string">&#x27;计算机工程系&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C13.png" alt="image-20211206134708152"></p><p><strong>2.5求选修了001课程的学生姓名</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line">    <span class="keyword">FROM</span> SC</span><br><span class="line">    <span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C14.png" alt="image-20211206140330688"></p><p><strong>2.6求没有选修001课程的学生姓名</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span> SC</span><br><span class="line">    <span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> Sno</span><br><span class="line">    <span class="keyword">FROM</span> SC</span><br><span class="line">    <span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;001&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C15.png" alt="image-20211206140710873"></p><p><strong>2.7查询选修了全部课程的学生的姓名</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span>Course.Cno));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%BA%8C16.png" alt="image-20211206142551854"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 原理与实践(MATLAB)实验四 入门教学 图像分割出汽车的车牌</title>
      <link href="/posts/61726/"/>
      <url>/posts/61726/</url>
      
        <content type="html"><![CDATA[<h1 id="实验四-图像分割"><a href="#实验四-图像分割" class="headerlink" title="实验四 图像分割"></a>实验四 图像分割</h1><h2 id="1-图像分割出汽车的车牌"><a href="#1-图像分割出汽车的车牌" class="headerlink" title="1.图像分割出汽车的车牌"></a>1.图像分割出汽车的车牌</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">I=imread(<span class="string">&#x27;车牌.jpg&#x27;</span>);<span class="comment">%读取图片 </span></span><br><span class="line">[y,x,z]=<span class="built_in">size</span>(I);<span class="comment">%给定图片大小 </span></span><br><span class="line">myI=double(I);<span class="comment">%返回双精度值 </span></span><br><span class="line"><span class="comment">%RGB to HSI</span></span><br><span class="line">tic  <span class="comment">%计时开始   </span></span><br><span class="line"><span class="comment">%Y 方向 </span></span><br><span class="line">Blue_y=<span class="built_in">zeros</span>(y,<span class="number">1</span>);<span class="comment">%一列全零矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:y<span class="comment">%给定i的范围      </span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:x<span class="comment">%给定j的范围             </span></span><br><span class="line"><span class="keyword">if</span>((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)&lt;=<span class="number">30</span>)&amp;&amp;((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)&lt;=<span class="number">62</span>)&amp;&amp;(myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)&gt;=<span class="number">51</span>))&amp;&amp;((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>)&lt;=<span class="number">142</span>)&amp;&amp;(myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>)&gt;=<span class="number">119</span>))) <span class="comment">% 蓝色RGB的灰度范围 </span></span><br><span class="line">               Blue_y(<span class="built_in">i</span>,<span class="number">1</span>)= Blue_y(<span class="built_in">i</span>,<span class="number">1</span>)+<span class="number">1</span>;   <span class="comment">% y矩阵加一                    </span></span><br><span class="line"><span class="keyword">end</span>       </span><br><span class="line"><span class="keyword">end</span>       </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">[temp MaxY]=<span class="built_in">max</span>(Blue_y);        <span class="comment">% Y方向车牌区域确定 </span></span><br><span class="line">PY1=MaxY;<span class="comment">%y矩阵的最大元素 </span></span><br><span class="line"><span class="keyword">while</span> ((Blue_y(PY1,<span class="number">1</span>)&gt;=<span class="number">5</span>)&amp;&amp;(PY1&gt;<span class="number">1</span>))<span class="comment">% 确定蓝色RGB Blue_y所在位置  </span></span><br><span class="line">       PY1=PY1<span class="number">-1</span>; <span class="comment">%对车牌区域的修正，向上调整</span></span><br><span class="line">       <span class="keyword">end</span>     </span><br><span class="line">PY2=MaxY; <span class="comment">%y矩阵的最大元素  </span></span><br><span class="line"><span class="keyword">while</span> ((Blue_y(PY2,<span class="number">1</span>)&gt;=<span class="number">5</span>)&amp;&amp;(PY2&lt;y))<span class="comment">%确定蓝色RGB Blue_y所在位置</span></span><br><span class="line">PY2=PY2+<span class="number">1</span>;<span class="comment">%对车牌区域的修正向下调整</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">IY=I(PY1:PY2,:,:);<span class="comment">%行的范围</span></span><br><span class="line"><span class="comment">%X方向</span></span><br><span class="line">Blue_x=<span class="built_in">zeros</span>(<span class="number">1</span>,x);<span class="comment">%一行全一矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:x<span class="comment">%给定J的取值范围</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=PY1:PY2</span><br><span class="line"><span class="keyword">if</span>((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)&lt;=<span class="number">30</span>)&amp;&amp;((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)&lt;=<span class="number">62</span>)&amp;&amp;(myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)&gt;=<span class="number">51</span>))&amp;&amp;((myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>)&lt;=<span class="number">142</span>)&amp;&amp;(myI(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>)&gt;=<span class="number">119</span>)))<span class="comment">%调整I中的范围</span></span><br><span class="line">Blue_x(<span class="number">1</span>,<span class="built_in">j</span>)=Blue_x(<span class="number">1</span>,<span class="built_in">j</span>)+<span class="number">1</span>;<span class="comment">%Blue_x的矩阵加一</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PX1=<span class="number">1</span>;<span class="comment">%当PX1等于1时 </span></span><br><span class="line"><span class="keyword">while</span> ((Blue_x(<span class="number">1</span>,PX1)&lt;<span class="number">3</span>)&amp;&amp;(PX1&lt;x)) <span class="comment">%确定蓝色RGB Blue_x的位置        </span></span><br><span class="line">PX1=PX1+<span class="number">1</span>; <span class="comment">%对车牌区域的修正向下调整</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">PX2=x;<span class="comment">%PX2等于x</span></span><br><span class="line"><span class="keyword">while</span>((Blue_x(<span class="number">1</span>,PX2)&lt;<span class="number">3</span>)&amp;&amp;(PX2&gt;PX1))<span class="comment">%确定蓝色RGB Blue_x的位置</span></span><br><span class="line">PX2=PX2<span class="number">-1</span>;<span class="comment">%对车牌区域的修正向下调整</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PX1=PX1<span class="number">-2</span>; <span class="comment">% 对车牌区域的修正</span></span><br><span class="line">PX2=PX2+<span class="number">2</span>; <span class="comment">%对车牌区域的修正 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Plate=I(PY1:PY2,PX1<span class="number">-2</span>:PX2,:);<span class="comment">%矩阵行列的范围 </span></span><br><span class="line">t=toc <span class="comment">% 读取计时 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>,imshow(I);<span class="comment">%创建图像窗口，显示图像I </span></span><br><span class="line"><span class="built_in">figure</span>,<span class="built_in">plot</span>(Blue_y);grid<span class="comment">%创建图像窗口，绘制Blue_y图像，画出网格线</span></span><br><span class="line"><span class="built_in">figure</span>,<span class="built_in">plot</span>(Blue_x);grid<span class="comment">%创建图像窗口，绘制Blue_x图像，画出网格线 </span></span><br><span class="line"><span class="built_in">figure</span>,imshow(Plate); <span class="comment">%创建图像窗口，显示图像Plate  </span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E5%9B%9B01.jpg" alt="车牌"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C402.png" alt="image-20211202113417979"></p>]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 原理与实践(MATLAB) 入门教学 实验三 图像平滑与图像锐化</title>
      <link href="/posts/536/"/>
      <url>/posts/536/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三-图像平滑与图像锐化"><a href="#实验三-图像平滑与图像锐化" class="headerlink" title="实验三 图像平滑与图像锐化"></a>实验三 图像平滑与图像锐化</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1、熟悉并掌握MATLAB图像处理工具箱的使用</p><p>2、理解并掌握常用的图像的增强技术</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>1.imnoise</strong></p><p>imnoise函数用于对图像生成模拟噪声，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;imnoise(i,’gaussian’,0,0.02);模拟均值为0方差为0.02的高斯噪声，</p><p>j&#x3D;imnoise(i,’salt&amp;pepper’, 0.04) 模拟叠加密度为0.04的椒盐噪声</p><p><strong>2.fspecial</strong></p><p>fspecial函数用于产生预定义滤波器，如：</p><p>h&#x3D;fspecial(‘sobel’);%sobel水平边缘增强滤波器</p><p>h&#x3D;fspecial(‘gaussian’);%高斯低通滤波器</p><p>h&#x3D;fspecial(‘laplacian’);%拉普拉斯滤波器</p><p>h&#x3D;fspecial(‘log’);%高斯拉普拉斯（LoG）滤波器</p><p>h&#x3D;fspecial(‘average’);%均值滤波器</p><p>3.<strong>基于卷积的图像滤波函数</strong></p><p>imfilter函数， filter2函数，二维卷积conv2滤波,都可用于图像滤波，用法类似，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>h&#x3D;[1,2,1;0,0,0;-1,-2,-1];%产生Sobel算子的水平方向模板</p><p>j&#x3D;filter2(h,i);</p><p>或者：</p><p>h &#x3D; fspecial(‘prewitt’)</p><p>I &#x3D; imread(‘cameraman.tif’);</p><p>imshow(I); </p><p>H &#x3D; fspecial(‘prewitt‘); %预定义滤波器</p><p>M &#x3D; imfilter(I,H);</p><p>imshow(M)</p><p>或者：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>h&#x3D;[1,1,1;1,1,1;1,1,1];</p><p>h&#x3D;h&#x2F;9;</p><p>j&#x3D;conv2(i,h);</p><p>4.<strong>其他常用滤波举例</strong>           </p><p>（1）中值滤波</p><p>medfilt2函数用于图像的中值滤波，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;medfilt2(i，[M N]);对矩阵i进行二维中值滤波，领域为M<em>N，缺省值为3</em>3</p><p>（2）利用拉氏算子锐化图像, 如:</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;double(i);</p><p>h&#x3D;[0,1,0;1,-4,0;0,1,0];%拉氏算子</p><p>k&#x3D;conv2(j,h,’same’);</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1、采用二维中值滤波函数medfilt2对受椒盐噪声干扰的图像滤波，窗口分别采用3-3-5-5-7-7"><a href="#1、采用二维中值滤波函数medfilt2对受椒盐噪声干扰的图像滤波，窗口分别采用3-3-5-5-7-7" class="headerlink" title="1、采用二维中值滤波函数medfilt2对受椒盐噪声干扰的图像滤波，窗口分别采用3 * 3,5 * 5,7 * 7"></a>1、采用二维中值滤波函数medfilt2对受椒盐噪声干扰的图像滤波，窗口分别采用3 * 3,5 * 5,7 * 7</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;图像平滑.png&#x27;</span>);</span><br><span class="line"><span class="built_in">i</span>=rgb2gray(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">j</span>=imnoise(<span class="built_in">i</span>,<span class="string">&#x27;salt &amp; pepper&#x27;</span>,<span class="number">0.04</span>); <span class="comment">%模拟叠加密度为0.04的椒盐噪声</span></span><br><span class="line">k1=medfilt2(<span class="built_in">j</span>,[<span class="number">3</span> <span class="number">3</span>]);<span class="comment">%对矩阵i进行二维中值滤波，领域3*3</span></span><br><span class="line">k2=medfilt2(<span class="built_in">j</span>,[<span class="number">5</span> <span class="number">5</span>]);</span><br><span class="line">k3=medfilt2(<span class="built_in">j</span>,[<span class="number">7</span> <span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(<span class="built_in">j</span>);title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(k1);;title(<span class="string">&#x27;3 3&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(k2);title(<span class="string">&#x27;5 5&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(k3);title(<span class="string">&#x27;7 7&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8901.png" alt="image-20211130170445360"></p><h3 id="2、采用MATLAB中的函数filter2对受噪声干扰的图像进行均值滤波"><a href="#2、采用MATLAB中的函数filter2对受噪声干扰的图像进行均值滤波" class="headerlink" title="2、采用MATLAB中的函数filter2对受噪声干扰的图像进行均值滤波"></a>2、采用MATLAB中的函数filter2对受噪声干扰的图像进行均值滤波</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;图像平滑.png&#x27;</span>);</span><br><span class="line"><span class="built_in">i</span>=rgb2gray(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">j</span>=imnoise(<span class="built_in">i</span>,<span class="string">&#x27;salt &amp; pepper&#x27;</span>,<span class="number">0.04</span>); <span class="comment">%模拟叠加密度为0.04的椒盐噪声</span></span><br><span class="line">k1=filter2(fspecial(<span class="string">&#x27;average&#x27;</span>,<span class="number">9</span>),<span class="built_in">j</span>)/<span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(<span class="built_in">j</span>);title(<span class="string">&#x27;噪声干扰图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(k1);;title(<span class="string">&#x27;改进后的图像&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8902.png" alt="image-20211130170505292"></p><h3 id="3、采用三种不同算子对图像进行锐化处理"><a href="#3、采用三种不同算子对图像进行锐化处理" class="headerlink" title="3、采用三种不同算子对图像进行锐化处理"></a>3、采用三种不同算子对图像进行锐化处理</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;图像平滑.png&#x27;</span>);</span><br><span class="line"><span class="built_in">i</span>=rgb2gray(<span class="built_in">i</span>);</span><br><span class="line"><span class="built_in">j</span>=fspecial(<span class="string">&#x27;sobel&#x27;</span>);<span class="comment">%应用Sobel算子</span></span><br><span class="line">k1=filter2(<span class="built_in">j</span>,<span class="built_in">i</span>);<span class="comment">%Sobel算子滤波锐化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">j</span>=fspecial(<span class="string">&#x27;prewitt&#x27;</span>);<span class="comment">%应用prewitt算子</span></span><br><span class="line">k2=filter2(<span class="built_in">j</span>,<span class="built_in">i</span>);<span class="comment">%prewitt算子滤波锐化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">j</span>=fspecial(<span class="string">&#x27;log&#x27;</span>);<span class="comment">%应用log算子</span></span><br><span class="line">k3=filter2(<span class="built_in">j</span>,<span class="built_in">i</span>);<span class="comment">%log算子滤波锐化</span></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(<span class="built_in">i</span>);title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(k1);;title(<span class="string">&#x27;Sobel算子锐化图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(k2);title(<span class="string">&#x27;prewitt算子锐化图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(k3);title(<span class="string">&#x27;log算子锐化图像&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8903.png" alt="image-20211130170521584"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="比较不同平滑滤波器的处理效果，分析其优缺点"><a href="#比较不同平滑滤波器的处理效果，分析其优缺点" class="headerlink" title="比较不同平滑滤波器的处理效果，分析其优缺点"></a>比较不同平滑滤波器的处理效果，分析其优缺点</h3><p>中值滤波器对去除椒盐噪声可以起很好的效果,因为椒盐噪声在画面中的部分点上随机出现.所以根据中值滤波可知,通过数据排列的方法,将图像中未被噪声污染的点代替噪声点的值的概率比较大,因此噪声的抑制效果好.均值滤波器对图像处理能达到去噪的效果，并且滤波器的模板越大去噪效果越好,但模板选择过大时,处理的效果会下降.二者相比,中值滤波去图像椒盐噪声的同时,还能保持图像清晰的轮廓.</p><h3 id="比较不同锐化滤波器的处理效果，分析其优缺"><a href="#比较不同锐化滤波器的处理效果，分析其优缺" class="headerlink" title="比较不同锐化滤波器的处理效果，分析其优缺"></a>比较不同锐化滤波器的处理效果，分析其优缺</h3><p>Sobel算子是滤波算子的形式来提取边缘，X，Y方向各用一个模板，两个模板组合起来构成一个梯度算子。X方向模板对垂直边缘影响最大，Y方向模板对水平边缘影响最大。prewitt算子是加权平均算子，对噪声有抑制作用，但是像素平均相当于对图像进行的同滤波.log算法的特点是由于先进行了高斯滤波，因而可以一定程度上克服噪声的影响。但可能产生假边缘,对一些曲线边缘（curved edges）的定位误差较大</p>]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 原理与实践(MATLAB)入门教学 实验二 傅里叶变换</title>
      <link href="/posts/25384/"/>
      <url>/posts/25384/</url>
      
        <content type="html"><![CDATA[<h1 id="实验二-傅里叶变换"><a href="#实验二-傅里叶变换" class="headerlink" title="实验二 傅里叶变换"></a>实验二 傅里叶变换</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1.熟悉及掌握图像的变换原理及性质，实现图像的傅里叶变换</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>图像的变换</strong></p><p>1.fft2</p><p>fft2函数用于数字图像的二维傅立叶变换，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;fft2(i);</p><p>由于MATLAB无法显示复数图像，因此变换后的结果还需进行求模运算，即调用abs函数。</p><p>之后常常还进行对数变换，即调用log函数，以减缓傅里叶谱的快速衰减，更好地显示高频信息。</p><p>2.ifft2</p><p>ifft2函数用于数字图像的二维傅立叶反变换，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;fft2(i);</p><p>k&#x3D;ifft2(j);</p><p>3.fftshift</p><p>用于将变换后图像频谱中心从矩阵的原点移动到矩阵的中心</p><p>B&#x3D;fftshift（i）</p><p>4.利用fft2计算二维卷积</p><p>利用fft2函数可以计算二维卷积,如:</p><p>a&#x3D;[8,1,6;3,5,7;4,9,2];</p><p>b&#x3D;[1,1,1;1,1,1;1,1,1];</p><p>a(8,8)&#x3D;0;</p><p>b(8,8)&#x3D;0;</p><p>c&#x3D;ifft2(fft2(a).*fft2(b));</p><p>c&#x3D;c(1:5,1:5);</p><p>利用conv2(二维卷积函数)校验, 如：</p><p>a&#x3D;[8,1,6;3,5,7;4,9,2];</p><p>b&#x3D;[1,1,1;1,1,1;1,1,1];</p><p>c&#x3D;conv2(a,b);</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1、对一幅图像进行平移，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与平移后傅里叶频谱的对应关系"><a href="#1、对一幅图像进行平移，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与平移后傅里叶频谱的对应关系" class="headerlink" title="1、对一幅图像进行平移，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与平移后傅里叶频谱的对应关系"></a>1、对一幅图像进行平移，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与平移后傅里叶频谱的对应关系</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">s=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);<span class="comment">%读入原图像</span></span><br><span class="line"><span class="built_in">i</span>=rgb2gray(s)</span><br><span class="line"><span class="built_in">i</span>=double(<span class="built_in">i</span>)</span><br><span class="line"><span class="built_in">j</span>=fft2(<span class="built_in">i</span>);                        <span class="comment">%傅里叶变换     </span></span><br><span class="line">k=fftshift(<span class="built_in">j</span>);                  <span class="comment">% 直流分量移到频谱中心</span></span><br><span class="line">l=<span class="built_in">log</span>(<span class="built_in">abs</span>(k));                    <span class="comment">%对数变换</span></span><br><span class="line">m=fftshift(<span class="built_in">j</span>);                     <span class="comment">%直流分量移到频谱中心</span></span><br><span class="line">RR=<span class="built_in">real</span>(m);                        <span class="comment">%取傅里叶变换的实部</span></span><br><span class="line">II=<span class="built_in">imag</span>(m);                         <span class="comment">%取傅里叶变换的虚部</span></span><br><span class="line">A=<span class="built_in">sqrt</span>(RR.^<span class="number">2</span>+II.^<span class="number">2</span>);                <span class="comment">%计算频谱府幅值 </span></span><br><span class="line">A=(A-<span class="built_in">min</span>(<span class="built_in">min</span>(A)))/(<span class="built_in">max</span>(<span class="built_in">max</span>(A)))*<span class="number">255</span>;  <span class="comment">% 归一化</span></span><br><span class="line">b=<span class="built_in">circshift</span>(s,[<span class="number">800</span> <span class="number">450</span>]);  <span class="comment">%对图像矩阵im中的数据进行移位操作</span></span><br><span class="line">b=rgb2gray(b)</span><br><span class="line">b=double(b)</span><br><span class="line">c=fft2(b);                        <span class="comment">%傅里叶变换     </span></span><br><span class="line">e=fftshift(c);                  <span class="comment">% 直流分量移到频谱中心</span></span><br><span class="line">l=<span class="built_in">log</span>(<span class="built_in">abs</span>(e));                    <span class="comment">%对数变换</span></span><br><span class="line">f=fftshift(c);                     <span class="comment">%直流分量移到频谱中心</span></span><br><span class="line">WW=<span class="built_in">real</span>(f);                        <span class="comment">%取傅里叶变换的实部B</span></span><br><span class="line">ZZ=<span class="built_in">imag</span>(f);                         <span class="comment">%取傅里叶变换的虚部</span></span><br><span class="line">B=<span class="built_in">sqrt</span>(WW.^<span class="number">2</span>+ZZ.^<span class="number">2</span>);                <span class="comment">%计算频谱府幅值 </span></span><br><span class="line">B=(B-<span class="built_in">min</span>(<span class="built_in">min</span>(B)))/(<span class="built_in">max</span>(<span class="built_in">max</span>(B)))*<span class="number">255</span>;  <span class="comment">% 归一化</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(s);title(<span class="string">&#x27;原图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(uint8(b));;title(<span class="string">&#x27;平移图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(A);title(<span class="string">&#x27;离散傅里叶频谱&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(B);title(<span class="string">&#x27;平移图像离散傅里叶频谱&#x27;</span>) </span><br></pre></td></tr></table></figure><p>频谱不随图像平移而改变</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%BA%8C01.png" alt="image-20211130163812081"></p><h3 id="2、对一幅图像进行旋转，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与旋转后傅里叶频谱的对应关系"><a href="#2、对一幅图像进行旋转，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与旋转后傅里叶频谱的对应关系" class="headerlink" title="2、对一幅图像进行旋转，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与旋转后傅里叶频谱的对应关系"></a>2、对一幅图像进行旋转，显示原始图像与处理后图像，分别对其进行傅里叶变换，显示变换后结果，分析原图的傅里叶谱与旋转后傅里叶频谱的对应关系</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">s=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);<span class="comment">%读入原图像</span></span><br><span class="line"><span class="built_in">i</span>=rgb2gray(s)</span><br><span class="line"><span class="built_in">i</span>=double(<span class="built_in">i</span>)</span><br><span class="line"><span class="built_in">j</span>=fft2(<span class="built_in">i</span>);                        <span class="comment">%傅里叶变换     </span></span><br><span class="line">k=fftshift(<span class="built_in">j</span>);                  <span class="comment">% 直流分量移到频谱中心</span></span><br><span class="line">l=<span class="built_in">log</span>(<span class="built_in">abs</span>(k));                    <span class="comment">%对数变换</span></span><br><span class="line">m=fftshift(<span class="built_in">j</span>);                     <span class="comment">%直流分量移到频谱中心</span></span><br><span class="line">RR=<span class="built_in">real</span>(m);                        <span class="comment">%取傅里叶变换的实部</span></span><br><span class="line">II=<span class="built_in">imag</span>(m);                         <span class="comment">%取傅里叶变换的虚部</span></span><br><span class="line">A=<span class="built_in">sqrt</span>(RR.^<span class="number">2</span>+II.^<span class="number">2</span>);                <span class="comment">%计算频谱府幅值 </span></span><br><span class="line">A=(A-<span class="built_in">min</span>(<span class="built_in">min</span>(A)))/(<span class="built_in">max</span>(<span class="built_in">max</span>(A)))*<span class="number">255</span>;  <span class="comment">% 归一化</span></span><br><span class="line">b=imrotate(s, <span class="number">-90</span>);  <span class="comment">%对图像矩阵im中的数据进行移位操作</span></span><br><span class="line">b=rgb2gray(b)</span><br><span class="line">b=double(b)</span><br><span class="line">c=fft2(b);                        <span class="comment">%傅里叶变换     </span></span><br><span class="line">e=fftshift(c);                  <span class="comment">% 直流分量移到频谱中心</span></span><br><span class="line">l=<span class="built_in">log</span>(<span class="built_in">abs</span>(e));                    <span class="comment">%对数变换</span></span><br><span class="line">f=fftshift(c);                     <span class="comment">%直流分量移到频谱中心</span></span><br><span class="line">WW=<span class="built_in">real</span>(f);                        <span class="comment">%取傅里叶变换的实部B</span></span><br><span class="line">ZZ=<span class="built_in">imag</span>(f);                         <span class="comment">%取傅里叶变换的虚部</span></span><br><span class="line">B=<span class="built_in">sqrt</span>(WW.^<span class="number">2</span>+ZZ.^<span class="number">2</span>);                <span class="comment">%计算频谱府幅值 </span></span><br><span class="line">B=(B-<span class="built_in">min</span>(<span class="built_in">min</span>(B)))/(<span class="built_in">max</span>(<span class="built_in">max</span>(B)))*<span class="number">255</span>;  <span class="comment">% 归一化</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(s);title(<span class="string">&#x27;原图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(uint8(b));;title(<span class="string">&#x27;平移图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(A);title(<span class="string">&#x27;离散傅里叶频谱&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(B);title(<span class="string">&#x27;平移图像离散傅里叶频谱&#x27;</span>) </span><br></pre></td></tr></table></figure><p>频谱随着矩形的旋转而旋转相同的角度</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%BA%8C02.png" alt="image-20211130163859947"></p>]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库实验一 在SQL Server中创建数据库(SQL入门教学一 从0到1）</title>
      <link href="/posts/51919/"/>
      <url>/posts/51919/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>注：TIT的校友只需要运行二、1.2创建表格，三、1.建立索引，四、1.2插入表格信息。其他内容为做实验过程中扩充的知识点，可作为SQL学习使用</p></li><li><p>参考教材《数据库系统概论第五版》 &#x3D;&#x3D;一、二、三为P82—P93，四、表格信息为P118内容&#x3D;&#x3D; </p></li><li><p>第六点为遗留问题，但不影响代码运行。解决后会回来修改</p></li><li><p>本篇主要介绍SQL语句，在SQL Server中也可以使用键鼠操作，我参考了这篇，很不错！<a href="https://blog.csdn.net/weixin_46218781/article/details/107424916?ops_request_misc=%7B%22request_id%22:%22163819262416780357288849%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163819262416780357288849&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-107424916.first_rank_v2_pc_rank_v29&utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%80&spm=1018.2226.3001.4187">《数据库实验》实验一：建立数据库和基本表结构_三桥君-CSDN博客</a></p></li><li><p><strong>实验内容和要求</strong></p><p>1．创建数据库和查看数据库属性。</p><p>2．创建表、确定表的主码。</p><p>3．查看和修改表结构。</p><p>4．具体内容：</p><p>（1）使用SQL语句按教材中的内容建立学生数据库。</p><p>（2）查看学生数据库的属性，并进行修改，使之符合要求。</p><p>（3）使用SQL语句，在建好的学生数据库中建立学生、课程、选课和系部4个表，其结构为；</p><ul><li><p>学生（学号，姓名，年龄，性别，所在系）</p></li><li><p>课程（课程号，课程名，先行课，学分）</p></li><li><p>选课（学号，课程号，成绩）</p></li><li><p>系部（系号，系名称，系主任）</p></li></ul><p> 要求:</p><p>  （1）建库、建表和建立表间联系。(表间联系通过外键实现，在属性关系中建)</p><p>  （2）选择合适的数据类型。</p><p>  （3）定义必要的主键和索引。 </p><p>  （4）使用SQL语句在上述4个表中尽可能的多输入些数据（每个表不能少于10条记录）。要求记录不仅满足数据约束要求，还要有表间关联的记录。</p></li></ul><h2 id="一、创建数据库和查看数据库属性"><a href="#一、创建数据库和查看数据库属性" class="headerlink" title="一、创建数据库和查看数据库属性"></a>一、创建数据库和查看数据库属性</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>右击数据库，点击“新建数据库”，命名“学籍管理”</p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>模式名<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span>用户名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-查看数据库属性"><a href="#2-查看数据库属性" class="headerlink" title="2.查看数据库属性"></a>2.查看数据库属性</h3><p>右击学籍管理，点击“属性”</p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_helpdb 学籍管理  <span class="comment">--使用数据库信息报告的系统过程</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="keyword">from</span> sys.databases <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;学籍管理&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>第一种信息更为全面</strong></p><h2 id="二、基本表"><a href="#二、基本表" class="headerlink" title="二、基本表"></a>二、基本表</h2><h3 id="1-创建表、确定表的主码"><a href="#1-创建表、确定表的主码" class="headerlink" title="1.创建表、确定表的主码"></a>1.创建表、确定表的主码</h3><p><strong>1.1右击学籍管理新建</strong></p><ul><li><p>展开新建的数据库，右击“新建表”</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8001.png" alt="image-20211129234857087"></p><p>右击列名可以修改其属性</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8002.png" alt="image-20211129234938005"></p></li></ul><p><strong>1.2使用SQL语句创建</strong></p><p><strong>创建前先展开”学籍管理“数据库，或在CREATE TABLE前加一句”USE 学籍管理“表示新建表在学籍管理数据库中或下图（常用按键）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%8003.png" alt="image-20211129112301629"></p><p>点击新建查询，写入代码，执行代码，右击刷新即可看到新建表格</p><ul><li>学生（学号，姓名，年龄，性别，所在系）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">/*列级完整性约束条件，Sno是主码*/</span></span><br><span class="line">    Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,<span class="comment">/*Sname取唯一值*/</span></span><br><span class="line">    Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">    Sage <span class="type">SMALLINT</span>,</span><br><span class="line">    Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>课程（课程号，课程名，先行课，学分）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,<span class="comment">/*列级完整性约束条件，Cno是主码*/</span></span><br><span class="line">    Cname <span class="type">CHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*列级完整性约束条件，Cname不能取空值*/</span></span><br><span class="line">    Cpno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">    Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line">    <span class="comment">--FOREIGN KEY(Cpno) REFERENCES Course(Cno)/*表级完整性约束条件，Cpno是外码，被参照表是Course，被参照列是Cno*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>选课（学号，课程号，成绩）</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">    Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">    Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">    Grade <span class="type">SMALLINT</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(Sno,Cno),<span class="comment">/*主码由两个属性构成，必须作为表级完整性进行定义*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno),<span class="comment">/*表级完整性约束条件，Sno是外码，被参照表是Student*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(Cno) <span class="keyword">REFERENCES</span> Course(Cno)<span class="comment">/*表级完整性约束条件，Cno是外码，被参照表是Course*/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>系部（系号，系名称，系主任)</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Dept(</span><br><span class="line">    Dno <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    Dname <span class="type">CHAR</span>(<span class="number">40</span>),</span><br><span class="line">    Ddictor <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>扩充：</strong>&#x3D;&#x3D;主键&#x2F;主码 ：primary key&#x3D;&#x3D;，一个表可能有多个，往往选中一个作为主键. 外键&#x2F;外码 ：foreign key，假设表A的某个属性attr是另一表B中的主码，且A和B有某种联系，则称attr是外码</p><h3 id="2-查看基本表结构"><a href="#2-查看基本表结构" class="headerlink" title="2.查看基本表结构"></a>2.查看基本表结构</h3><p>查看Course表的结构</p><p>sp_help table_name</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_help Course</span><br></pre></td></tr></table></figure><p>sp_columns Student</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sp_columns Course;</span><br></pre></td></tr></table></figure><p><strong>区别:</strong> 第一种信息更全面</p><h3 id="3-修改基本表"><a href="#3-修改基本表" class="headerlink" title="3.修改基本表"></a>3.修改基本表</h3><p><strong>3.1增加列</strong></p><p>向Student中增加入学时间，数据类型为日期型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ADD</span> S_entrance <span class="type">DATE</span>;</span><br></pre></td></tr></table></figure><p><strong>3.2修改数据类型</strong></p><p>修改年龄字符型为整数型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Student <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> Sage <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><p><strong>3.3修改约束条件</strong></p><p>增加课程名称必须取唯一值的约束条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Course <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(Cname);</span><br></pre></td></tr></table></figure><p><strong>3.4删除约束条件</strong></p><p>删除FOREIGN KEY(Cno) REFERENCES Course(Cno)，FK__SC__Cno__2C3393D0在键中查看</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> SC <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> FK__SC__Cno__2C3393D0</span><br></pre></td></tr></table></figure><h3 id="4-删除基本表"><a href="#4-删除基本表" class="headerlink" title="4.删除基本表"></a>4.删除基本表</h3><p><em>删除基本表时会删除索引与触发器等对象，例如删除Student，则与Student索引的SC中Sno也会删除</em></p><p><strong>CASCADE：</strong>删除表和视图</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> Student CASCADE;</span><br></pre></td></tr></table></figure><p><strong>RESTRICT:</strong> 若有视图，系统返回错误信息，此表不能删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE Student RESTRICT;</span><br></pre></td></tr></table></figure><p><strong>视图(将多张表组合为一张表）这里只以一张表做列子，实验一入门SQL，不做赘述</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_Student</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="三、索引"><a href="#三、索引" class="headerlink" title="三、索引"></a>三、索引</h2><h3 id="1-建立索引"><a href="#1-建立索引" class="headerlink" title="1.建立索引"></a>1.建立索引</h3><p>能够加速数据库查询，但需要占用一定的储存空间，当基本表更新时，索引需要维护，增加数据库负担，所以根据实际选择地创建</p><p>格式:</p><p><strong>UNIQUE:</strong> 索引的每一个索引值只对应唯一的数据记录</p><p><strong>CLUSTER:</strong> 建立的索引是聚簇索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE/CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt; &lt;次序:ASC升序，DESC降序&gt;);</span><br></pre></td></tr></table></figure><p>建立Student 、Course、SC三个表的索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX Stusno <span class="keyword">ON</span> Student(Sno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX Coucno <span class="keyword">ON</span> Course(Cno);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX SCno <span class="keyword">ON</span> SC(Sno <span class="keyword">ASC</span>,Cno <span class="keyword">DESC</span>);</span><br></pre></td></tr></table></figure><p>查看结果：建立好后展开Student，展开索引查看对应属性</p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 学籍管理</span><br><span class="line"><span class="keyword">exec</span> sp_helpindex Student</span><br></pre></td></tr></table></figure><h3 id="2-修改索引"><a href="#2-修改索引" class="headerlink" title="2.修改索引"></a>2.修改索引</h3><p><strong>将SC中的SCno索引修改为SCSno</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX SCno RENAME <span class="keyword">TO</span> SCSno;</span><br></pre></td></tr></table></figure><h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3.删除索引"></a>3.删除索引</h3><p><strong>删除Student中的Stusname索引</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX Stusname;</span><br></pre></td></tr></table></figure><h2 id="四、表格信息"><a href="#四、表格信息" class="headerlink" title="四、表格信息"></a>四、表格信息</h2><p><strong>可以右击表格“编辑前200行”，进行编辑或查看，实现表格信息中增删改</strong></p><p><strong>SQL语句：</strong></p><h3 id="1-插入表格信息-增"><a href="#1-插入表格信息-增" class="headerlink" title="1.插入表格信息(增)"></a>1.插入表格信息(增)</h3><p><strong>1.1只指出表名，无属性，则必须按CREATE TABLE中的属性赋值</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO Student</span><br><span class="line">VALUES(&#x27;192054401&#x27;,&#x27;张帆&#x27;,&#x27;男&#x27;,&#x27;20&#x27;,&#x27;计算机工程系&#x27;);</span><br></pre></td></tr></table></figure><p><strong>1.2属性顺序可以与CREATE TABLE不同，但VALUES与INTO必须对应</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(Sno,Sname,Ssex,Sage,Sdept)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;张帆&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>),(<span class="string">&#x27;192054402&#x27;</span>,<span class="string">&#x27;万润南&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>),(<span class="string">&#x27;192054403&#x27;</span>,<span class="string">&#x27;白峰&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>),(<span class="string">&#x27;192054404&#x27;</span>,<span class="string">&#x27;汤明学&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;192054405&#x27;</span>,<span class="string">&#x27;王政杰&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>),(<span class="string">&#x27;192054406&#x27;</span>,<span class="string">&#x27;张力&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;计算机工程系&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;192062101&#x27;</span>,<span class="string">&#x27;刘俊卓&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>),(<span class="string">&#x27;192062102&#x27;</span>,<span class="string">&#x27;李云龙&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;192062103&#x27;</span>,<span class="string">&#x27;刘宇豪&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>),(<span class="string">&#x27;192062104&#x27;</span>,<span class="string">&#x27;江鑫艺&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;192062105&#x27;</span>,<span class="string">&#x27;王鼎&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>),(<span class="string">&#x27;192062106&#x27;</span>,<span class="string">&#x27;申宇宙&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>),(<span class="string">&#x27;192062107&#x27;</span>,<span class="string">&#x27;樊倩&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>),(<span class="string">&#x27;192062108&#x27;</span>,<span class="string">&#x27;武文琴&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;数学系&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(Cno,Cname,Cpno,Ccredit)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;信息系统&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;操作系统&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;3&#x27;</span>),(<span class="string">&#x27;005&#x27;</span>,<span class="string">&#x27;数据结构&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;006&#x27;</span>,<span class="string">&#x27;数据处理&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>),(<span class="string">&#x27;007&#x27;</span>,<span class="string">&#x27;PASCAL语言&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;008&#x27;</span>,<span class="string">&#x27;C++&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;C++面向对象&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>),(<span class="string">&#x27;010&#x27;</span>,<span class="string">&#x27;JAVA&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Dept(Dno,Dname,Ddictor)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;王宇藩&#x27;</span>,<span class="string">&#x27;机械工程系&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;殷爱博&#x27;</span>,<span class="string">&#x27;电子工程系&#x27;</span>),(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;秦立伟&#x27;</span>,<span class="string">&#x27;自动化系&#x27;</span>),(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;武文琴&#x27;</span>,<span class="string">&#x27;化学与化工系&#x27;</span>),(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;樊倩&#x27;</span>,<span class="string">&#x27;计算机系&#x27;</span>),(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;董佳杰&#x27;</span>,<span class="string">&#x27;环境与安全工程系&#x27;</span>),(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;郭文裕&#x27;</span>,<span class="string">&#x27;新能源系&#x27;</span>),(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;刘尧&#x27;</span>,<span class="string">&#x27;理学系&#x27;</span>),(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;曲婷婷&#x27;</span>,<span class="string">&#x27;经管系&#x27;</span>),(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;张伟豪&#x27;</span>,<span class="string">&#x27;外语系&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在这里注意，选课中的Sno被Student中的Sno所约束，不能一次运行完成代码。所以要先插入上面代码，之后再插入SC信息</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(Sno,Cno,Grade)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;88&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;85&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;70&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;80&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;005&#x27;</span>,<span class="string">&#x27;71&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;006&#x27;</span>,<span class="string">&#x27;73&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;007&#x27;</span>,<span class="string">&#x27;72&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;008&#x27;</span>,<span class="string">&#x27;75&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;009&#x27;</span>,<span class="string">&#x27;80&#x27;</span>),(<span class="string">&#x27;192054401&#x27;</span>,<span class="string">&#x27;010&#x27;</span>,<span class="string">&#x27;70&#x27;</span>),(<span class="string">&#x27;192054402&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;85&#x27;</span>),(<span class="string">&#x27;192054403&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;84&#x27;</span>),(<span class="string">&#x27;192054404&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;80&#x27;</span>),(<span class="string">&#x27;192054405&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;88&#x27;</span>),(<span class="string">&#x27;192054406&#x27;</span>,<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;70&#x27;</span>),(<span class="string">&#x27;192062101&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;88&#x27;</span>),(<span class="string">&#x27;192062102&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;85&#x27;</span>),(<span class="string">&#x27;192062103&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;84&#x27;</span>),(<span class="string">&#x27;192062104&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;87&#x27;</span>),(<span class="string">&#x27;192062105&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;83&#x27;</span>),(<span class="string">&#x27;192062106&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;84&#x27;</span>),(<span class="string">&#x27;192062107&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;80&#x27;</span>),(<span class="string">&#x27;192062108&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;86&#x27;</span>),(<span class="string">&#x27;192054406&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;83&#x27;</span>),(<span class="string">&#x27;192054404&#x27;</span>,<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-查询表格信息-查"><a href="#2-查询表格信息-查" class="headerlink" title="2.查询表格信息(查)"></a>2.查询表格信息(查)</h3><p><strong>2.1.自定义列显示顺序，也可以单独看某几列</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Ssex,Sage,Sdept<span class="comment">/*默认为ALL,也可定义为DISTINCT*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p><strong>2.2当表中有重复信息</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno<span class="comment">/*表示查看Sno列有两个192062116时只显示其中一行*/</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p><strong>2.3查看全部</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><h3 id="3-删除表格信息-删"><a href="#3-删除表格信息-删" class="headerlink" title="3.删除表格信息(删)"></a>3.删除表格信息(删)</h3><p><strong>3.1删除一个元组的值</strong></p><p>删除192054401的学生记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;192054401&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>3.2删除多个元组的值</strong></p><p>删除所有的选课记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure><p><strong>3.3.带子查询的删除语句</strong></p><p>删除计算机系所有学生的选课记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> Sno</span><br><span class="line">    <span class="keyword">FROM</span> Student</span><br><span class="line">    <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;计算机系&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="4-修改表格信息-改"><a href="#4-修改表格信息-改" class="headerlink" title="4.修改表格信息(改)"></a>4.修改表格信息(改)</h3><p><strong>4.1修改一个元组的值</strong></p><p>修改192054401的学生年龄为21</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span><span class="number">21</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span><span class="string">&#x27;192054401&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>4.2修改多个值</strong></p><p>将所有的学生年龄加一</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sage<span class="operator">=</span>Sage<span class="operator">+</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="五、思考题"><a href="#五、思考题" class="headerlink" title="五、思考题"></a>五、思考题</h2><p>为什么要建立索引？</p><p>当表的数据量比较大时，查询操作会比较耗时，建立索引是加快查询速度的有效手段，用户可以根据应用环境的需要在基本表上建立一个或多个索引，以提供多种存取路径，加快查找</p><p>学生库选课表中的学号、课程号采用数值型、还是采用字符型的？采用哪种数据类型更好？</p><p>字符型。数值型只能代表数字，当学号前缀有字符时，不能使用。</p><h2 id="六、遗留问题"><a href="#六、遗留问题" class="headerlink" title="六、遗留问题"></a>六、遗留问题</h2><p>二、1.2中建立Course，第六行，Cpno被Cno约束后，无法修改Cpno的值，参考下面这两篇仅理解外键被约束后，主键必须先有值再填写外键。但问题没有解决。解决后回来重写！</p><p>[INSERT 语句与 FOREIGN KEY 约束”XXX”冲突。该冲突发生于数据库”XXX”，表”XXX”, column ‘XXX。_Mr.zhou-CSDN博客](<a href="https://blog.csdn.net/love20165104027/article/details/78343748?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=INSERT">https://blog.csdn.net/love20165104027/article/details/78343748?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=INSERT</a> 语句与 FOREIGN KEY 约束”FK__&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-3-78343748.first_rank_v2_pc_rank_v29&amp;spm&#x3D;1018.2226.3001.4187)</p><p>[INSERT语句与FOREIGN KET约束‘FK__SC__Cno__2C3393D0‘冲突，该冲突发生于数据库‘Test20210322‘，表‘dbo.Course‘，column‘Cno‘_+51的博客-CSDN博客](<a href="https://blog.csdn.net/qq_51776413/article/details/115131064?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=INSERT">https://blog.csdn.net/qq_51776413/article/details/115131064?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=INSERT</a> 语句与 FOREIGN KEY 约束”FK__&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-115131064.first_rank_v2_pc_rank_v29&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github修改Host</title>
      <link href="/posts/37174/"/>
      <url>/posts/37174/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub修改host"><a href="#GitHub修改host" class="headerlink" title="GitHub修改host"></a>GitHub修改host</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>中国访问 GitHub 的速度不忍直视，那就叫一个慢！</p><blockquote><p>Q:为什么访问速度会很慢？<br>A: GitHub 在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是 GitHub 的分发加速网络的域名遭到 dns 污染。</p></blockquote><blockquote><p>Q:如何解决 DNS 污染？<br>A: 通过修改 hosts 解决污染问题</p></blockquote><h2 id="1-查询ip地址，输入需要访问的网站，查询ip"><a href="#1-查询ip地址，输入需要访问的网站，查询ip" class="headerlink" title="1.查询ip地址，输入需要访问的网站，查询ip"></a>1.查询ip地址，输入需要访问的网站，查询ip</h2><p><a href="https://websites.ipaddress.com/github.com">▷ GitHub.com : GitHub: Where the world builds software · GitHub (ipaddress.com)</a></p><p>如果IP Address显示为4*IPV4，则有四个ip地址，拉到下方查看</p><p>需要查询的域名有<code>github.com</code>,<code>assets-cdn.github.com</code>,<code>github.global.ssl.fastly.net</code>，也可以根据自己常用的域名添加其他GitHub域名</p><h2 id="2-复制IP地址到host文件"><a href="#2-复制IP地址到host文件" class="headerlink" title="2.复制IP地址到host文件"></a>2.复制IP地址到host文件</h2><p><strong>host文件路径</strong>：<code>C:\Windows\System32\drivers\etc\hosts</code></p><p><strong>第一步：</strong>修改hosts文件属性：右击hosts文件，选择属性，将下方的只读属性的对勾去掉，然后点击应用、确定。</p><p><img src="https://img-blog.csdnimg.cn/20200523181739843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTE4NzAw,size_16,color_FFFFFF,t_70" alt="网络图片" title="备注"></p><p>安全里面的权限不用改！百度好多方法都是点进安全改角色权限。这种方法没有作用</p><p><strong>第三步</strong></p><p>以<strong>管理员</strong>进入控制台</p><p>任务栏右下角搜索cmd或者命令提示符，右击以管理员身份运行(右击电脑左下角开始，点击windows powershell(管理员))</p><p>或者<code>win+R</code>输入<code>cmd</code>按<code>Ctrl+Shift</code>+<code>Enter</code>也是管理员启动</p><p>再或者电脑管家之类，火绒的安全工具里面有一个修改Host文件，可以快速启动Host</p><p>在cmd中输入<code>notepad C:\Windows\System32\drivers\etc\hosts</code>，回车</p><p><strong>第四步</strong></p><p>修改host文件，格式，输入地址 空格后的网站地址可以不输入，只是做标记使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub Start</span><br><span class="line">140.82.111.4 github.com</span><br><span class="line">185.199.118.153 assets-cdn.github.com</span><br><span class="line">185.199.119.153 assets-cdn.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">2606:50c0:8000::152 assets-cdn.github.com</span><br><span class="line">2606:50c0:8001::152 assets-cdn.github.com</span><br><span class="line">2606:50c0:8002::152 assets-cdn.github.com</span><br><span class="line">2606:50c0:8003::152 assets-cdn.github.com</span><br><span class="line">199.232.69.192 github.global.ssl.fastly.net</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure><p><strong>第五步</strong></p><p>启用新的hosts</p><p>windows下打开命令行界面，输入<code>ipconfig /flushdns</code>,刷新本地dns数据即可。<br>linux下需执行<code>sudo /etc/init.d/networking restart</code>重启网络。</p><p><strong>第六步</strong>，测试一下！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>教程：<a href="https://blog.csdn.net/qq_39118700/article/details/106303995?ops_request_misc=%7B%22request_id%22:%22163774424816780265432137%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163774424816780265432137&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-106303995.first_rank_v2_pc_rank_v29&utm_term=%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E4%BF%9D%E5%AD%98&spm=1018.2226.3001.4187">解决方案：修改hosts文件无法保存&#x2F;只能另存为txt_Repuuunzel-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_32506245/article/details/105977545?ops_request_misc=%7B%22request_id%22:%22163835512116780269862638%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=163835512116780269862638&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-105977545.first_rank_v2_pc_rank_v29&utm_term=github%E4%BF%AE%E6%94%B9host&spm=1018.2226.3001.4187">修改hosts文件加速GitHub访问_BugAngel的博客-CSDN博客_github hosts加速</a></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><a href="https://docs.github.com/en/get-started/quickstart/hello-world">Hello World - GitHub Docs</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验一 三种页面置换算法（Optimal、FIFO、LRU）</title>
      <link href="/posts/17638/"/>
      <url>/posts/17638/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一-操作系统的三种页面置换算法"><a href="#实验一-操作系统的三种页面置换算法" class="headerlink" title="实验一     操作系统的三种页面置换算法"></a>实验一     操作系统的三种页面置换算法</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>编程模拟实现存储器页面置换的常用算法，调试分析相关存储器管理程序，加深对存储器页面置换常用算法的理解和实现技巧</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>1、 自定义存储器管理有关的数据结构；</p><p>2、 依据最佳置换算法（Optimal）、先进先出置换算法（FIFO）、最近最久未使用算法（LRU）原理，编写对应函数，模拟系统的存储器页面置换功能；</p><p>3、 为了更好地模拟和评价算法的性能，允许用户自行指定可用页块数并输入需访问的页面号序列；</p><p>4、 统计以上算法实际需要的总页面数、缺页中断次数以及它们的缺页率；</p><p>5、 比较&#x2F;分析以上算法的置换性能，并作出自己的评价</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 页面置换算法 &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MaxPage_num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] PageView = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num];<span class="comment">// 访问页面顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] Blocks = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num][MaxPage_num];<span class="comment">// 物理块</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] PageCount = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num];<span class="comment">// 记录权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> PageNum;<span class="comment">// 访问页面个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> BlockNum;<span class="comment">// 物理块个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static int temp = 0;</span></span><br><span class="line">    <span class="comment">//private static int flag = 0;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> MissingPageNum;<span class="comment">// 缺页个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> MissingPageRate;<span class="comment">// 缺页率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> found;<span class="comment">// 判断是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NULL</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 缺页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态输入物理块、页面、访问页面顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入页面个数&quot;</span>);</span><br><span class="line">        PageNum = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入物理块个数&quot;</span>);</span><br><span class="line">        BlockNum = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入页面访问顺序&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            PageView[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 输出访问页面</span></span><br><span class="line">       System.out.print(<span class="string">&quot;访问页面:&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">           System.out.print(PageView[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">       <span class="comment">// 输出物理块</span></span><br><span class="line">       System.out.println(<span class="string">&quot;物理块&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (Blocks[i][j] == NULL)</span><br><span class="line">                   System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   System.out.print(Blocks[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       MissingPageRate = (<span class="type">double</span>) MissingPageNum / PageNum;</span><br><span class="line">       System.out.println();</span><br><span class="line">       System.out.println(<span class="string">&quot;总页面数&quot;</span> + PageNum + <span class="string">&quot;缺页次数&quot;</span> + MissingPageNum + <span class="string">&quot;缺页率&quot;</span> + MissingPageRate + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化物理块</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">original</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            Blocks[i][j] = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MissingPageNum = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先进先出"><a href="#先进先出" class="headerlink" title="先进先出"></a>先进先出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先进先出</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FIFO</span><span class="params">()</span> &#123;</span><br><span class="line">       original();</span><br><span class="line"></span><br><span class="line">       Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, flag = <span class="number">0</span>;<span class="comment">// temp标记本列，flag标记上一列</span></span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">           <span class="comment">// 如果页已进入物理块跳出循环</span></span><br><span class="line">           <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                   <span class="keyword">break</span>;           </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果不存在</span></span><br><span class="line">           <span class="keyword">if</span> (j == BlockNum) &#123;</span><br><span class="line">               <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               temp++;</span><br><span class="line">               temp = temp % BlockNum;</span><br><span class="line">               Blocks[i][temp] = PageView[i];</span><br><span class="line">               MissingPageNum++;</span><br><span class="line">               flag = i;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       output();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="最佳置换"><a href="#最佳置换" class="headerlink" title="最佳置换"></a>最佳置换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最佳置换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">OPT</span><span class="params">()</span> &#123;</span><br><span class="line">    original();</span><br><span class="line"></span><br><span class="line">    Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> temp, flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">        <span class="comment">// 不缺页</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != BlockNum) &#123; <span class="comment">// 代表页面已经在内存块中不缺页</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 缺页</span></span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 页面选择，满和不满</span></span><br><span class="line">        <span class="comment">// 缺页时物理块未满</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Blocks[i][j] == NULL) &#123;</span><br><span class="line">                Blocks[i][j] = PageView[i];</span><br><span class="line">                MissingPageNum++;</span><br><span class="line">                flag = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != BlockNum) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缺页时内存块已满</span></span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="comment">// 向后遍历，寻找最久不访问</span></span><br><span class="line">            <span class="keyword">for</span> (k = i + <span class="number">1</span>; k &lt; PageNum; k++) &#123;</span><br><span class="line">                <span class="comment">// 寻找最长时间内不被访问的页面 k是内存页面序列下标 存进PageCount数组内</span></span><br><span class="line">                <span class="keyword">if</span> (Blocks[i][j] == PageView[k]) &#123;</span><br><span class="line">                    PageCount[j] = k;<span class="comment">//找到,记录权重</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 剩下的页面没有和当前物理块一样的，将其权重设为最大值</span></span><br><span class="line">            <span class="keyword">if</span> (k == PageNum) &#123;</span><br><span class="line">                PageCount[j] = PageNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找出权重最大的块</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">1</span>;a&lt;BlockNum;a++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(PageCount[a]&gt;PageCount[temp])</span><br><span class="line">                temp=a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Blocks[i][temp] = PageView[i];</span><br><span class="line">        MissingPageNum++;</span><br><span class="line">        flag = i;</span><br><span class="line">    &#125;</span><br><span class="line">    output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最近最久未使用"><a href="#最近最久未使用" class="headerlink" title="最近最久未使用"></a>最近最久未使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最近最久未使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">LRU</span><span class="params">()</span> &#123;</span><br><span class="line">    original();</span><br><span class="line"></span><br><span class="line">    Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">    PageCount[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, flag = <span class="number">0</span>;<span class="comment">// temp标记本列，flag标记上一列</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">        <span class="comment">// 不缺页</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                PageCount[j] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != BlockNum)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//缺页</span></span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缺页时物理块有空余</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Blocks[i][j] == NULL) &#123;</span><br><span class="line">                Blocks[i][j] = PageView[i];</span><br><span class="line">                PageCount[j] = i;</span><br><span class="line">                MissingPageNum++;</span><br><span class="line">                flag = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != BlockNum) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缺页时物理块没空余</span></span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PageCount[temp] &gt; PageCount[j]) &#123;</span><br><span class="line">                temp = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Blocks[i][temp] = PageView[i];</span><br><span class="line">        PageCount[temp] = i;</span><br><span class="line">        MissingPageNum++;</span><br><span class="line">        flag = i;</span><br><span class="line">    &#125;</span><br><span class="line">    output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            input();</span><br><span class="line">            System.out.println(<span class="string">&quot;1.先进先出 2.最佳置换算法 3.最近最久未使用 4.退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    FIFO();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    OPT();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    LRU();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误 重新输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 操作系统实验;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 页面置换算法 &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MaxPage_num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] PageView = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num];<span class="comment">// 访问页面顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] Blocks = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num][MaxPage_num];<span class="comment">// 物理块</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] PageCount = <span class="keyword">new</span> <span class="title class_">int</span>[MaxPage_num];<span class="comment">// 记录权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> PageNum;<span class="comment">// 访问页面个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> BlockNum;<span class="comment">// 物理块个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static int temp = 0;</span></span><br><span class="line">    <span class="comment">//private static int flag = 0;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> MissingPageNum;<span class="comment">// 缺页个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> MissingPageRate;<span class="comment">// 缺页率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> found;<span class="comment">// 判断是否找到</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NULL</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// 缺页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态输入物理块、页面、访问页面顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入页面个数&quot;</span>);</span><br><span class="line">        PageNum = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入物理块个数&quot;</span>);</span><br><span class="line">        BlockNum = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入页面访问顺序&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            PageView[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 输出访问页面</span></span><br><span class="line">        System.out.print(<span class="string">&quot;访问页面:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            System.out.print(PageView[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 输出物理块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;物理块&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Blocks[i][j] == NULL)</span><br><span class="line">                    System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.print(Blocks[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        MissingPageRate = (<span class="type">double</span>) MissingPageNum / PageNum;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;总页面数&quot;</span> + PageNum + <span class="string">&quot;缺页次数&quot;</span> + MissingPageNum + <span class="string">&quot;缺页率&quot;</span> + MissingPageRate + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化物理块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">original</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                Blocks[i][j] = NULL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MissingPageNum = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先进先出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FIFO</span><span class="params">()</span> &#123;</span><br><span class="line">        original();</span><br><span class="line"></span><br><span class="line">        Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, flag = <span class="number">0</span>;<span class="comment">// temp标记本列，flag标记上一列</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果页已进入物理块跳出循环</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;           </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果不存在</span></span><br><span class="line">            <span class="keyword">if</span> (j == BlockNum) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                temp++;</span><br><span class="line">                temp = temp % BlockNum;</span><br><span class="line">                Blocks[i][temp] = PageView[i];</span><br><span class="line">                MissingPageNum++;</span><br><span class="line">                flag = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        output();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最佳置换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">OPT</span><span class="params">()</span> &#123;</span><br><span class="line">        original();</span><br><span class="line"></span><br><span class="line">        Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> temp, flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 不缺页</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != BlockNum) &#123; <span class="comment">// 代表页面已经在内存块中不缺页</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 缺页</span></span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 页面选择，满和不满</span></span><br><span class="line">            <span class="comment">// 缺页时物理块未满</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Blocks[i][j] == NULL) &#123;</span><br><span class="line">                    Blocks[i][j] = PageView[i];</span><br><span class="line">                    MissingPageNum++;</span><br><span class="line">                    flag = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != BlockNum) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缺页时内存块已满</span></span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="comment">// 向后遍历，寻找最久不访问</span></span><br><span class="line">                <span class="keyword">for</span> (k = i + <span class="number">1</span>; k &lt; PageNum; k++) &#123;</span><br><span class="line">                    <span class="comment">// 寻找最长时间内不被访问的页面 k是内存页面序列下标 存进PageCount数组内</span></span><br><span class="line">                    <span class="keyword">if</span> (Blocks[i][j] == PageView[k]) &#123;</span><br><span class="line">                        PageCount[j] = k;<span class="comment">//找到,记录权重</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 剩下的页面没有和当前物理块一样的，将其权重设为最大值</span></span><br><span class="line">                <span class="keyword">if</span> (k == PageNum) &#123;</span><br><span class="line">                    PageCount[j] = PageNum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找出权重最大的块</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">1</span>;a&lt;BlockNum;a++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(PageCount[a]&gt;PageCount[temp])</span><br><span class="line">                    temp=a;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Blocks[i][temp] = PageView[i];</span><br><span class="line">            MissingPageNum++;</span><br><span class="line">            flag = i;</span><br><span class="line">        &#125;</span><br><span class="line">        output();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最近最久未使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">LRU</span><span class="params">()</span> &#123;</span><br><span class="line">        original();</span><br><span class="line"></span><br><span class="line">        Blocks[<span class="number">0</span>][<span class="number">0</span>] = PageView[<span class="number">0</span>];</span><br><span class="line">        PageCount[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, flag = <span class="number">0</span>;<span class="comment">// temp标记本列，flag标记上一列</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PageNum; i++) &#123;</span><br><span class="line">            <span class="comment">// 不缺页</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (PageView[i] == Blocks[flag][j]) &#123;</span><br><span class="line">                    PageCount[j] = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != BlockNum)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//缺页</span></span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; BlockNum; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Blocks[flag][k] == NULL) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Blocks[i][k] = Blocks[flag][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//缺页时物理块有空余</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Blocks[i][j] == NULL) &#123;</span><br><span class="line">                    Blocks[i][j] = PageView[i];</span><br><span class="line">                    PageCount[j] = i;</span><br><span class="line">                    MissingPageNum++;</span><br><span class="line">                    flag = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j != BlockNum) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//缺页时物理块没空余</span></span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BlockNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (PageCount[temp] &gt; PageCount[j]) &#123;</span><br><span class="line">                    temp = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Blocks[i][temp] = PageView[i];</span><br><span class="line">            PageCount[temp] = i;</span><br><span class="line">            MissingPageNum++;</span><br><span class="line">            flag = i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        output();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            input();</span><br><span class="line">            System.out.println(<span class="string">&quot;1.先进先出 2.最佳置换算法 3.最近最久未使用 4.退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    FIFO();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    OPT();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    LRU();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误 重新输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8001.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%8002.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  通过页面置换算法程序的编写，最后三次相同物理块与访问次序输出比较，最佳置换算法选择以后永不使用的页面，以便保证最低的缺页率。先进先出算法在分配更多的物理块时反而会造成更高的缺页率。最近最久未使用算法，性能更好</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理 原理与实践(MATLAB) 入门教学 实验一 常用的MATLAB图像处理命令与图像基本操作</title>
      <link href="/posts/29395/"/>
      <url>/posts/29395/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一-常用的MATLAB图像处理命令与图像基本操作"><a href="#实验一-常用的MATLAB图像处理命令与图像基本操作" class="headerlink" title="实验一 常用的MATLAB图像处理命令与图像基本操作"></a>实验一 常用的MATLAB图像处理命令与图像基本操作</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>1.熟悉并掌握MATLAB工具的使用</p><p>2.实现图像的读取、显示、代数运算和简单变换</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>读写图像文件</strong></p><p>1.imread</p><p>imread函数用于读入各种图像文件，如：a&#x3D;imread(‘e:\w01.tif’)</p><p>2.imwrite</p><p>imwrite函数用于写入图像文件，如：imwrite(a,’e:\w02.tif’,’tif’)</p><p>3.imfinfo</p><p>imfinfo函数用于读取图像文件的有关信息，如：imfinfo(‘e:\w01.tif’)</p><p><strong>图像的显示</strong></p><p>1.image</p><p>image函数是MATLAB提供的最原始的图像显示函数，如：</p><p>a&#x3D;[1,2,3,4;4,5,6,7;8,9,10,11,12];</p><p>image(a);</p><p>2.imshow</p><p>imshow函数用于图像文件的显示，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>imshow(i);</p><p>title（‘原图像’）%加上图像标题</p><p>3.colorbar</p><p>colorbar函数用显示图像的颜色条，如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>imshow(i);</p><p>colorbar;</p><p>4.figure</p><p>figure函数用于设定图像显示窗口，如：figure(1)； &#x2F;figure(2)；</p><p>5.subplot </p><p>把图形窗口分成多个矩形部分，每个部分可以分别用来进行显示。</p><p>Subplot（m，n，p）分成m*n个小窗口，在第p个窗口中创建坐标轴为当前坐标轴，用于显示图形。</p><p>6.plot绘制二维图形</p><p>plot（y）</p><p>Plot（x，y）xy可以是向量、矩阵。</p><p><strong>图像类型转换</strong></p><p>1.rgb2gray&#x2F;&#x2F;灰色</p><p>把真彩图像转换为灰度图像</p><p>i&#x3D;rgb2gray（j）</p><p>2.im2bw&#x2F;&#x2F;黑白</p><p>通过阈值化方法把图像转换为二值图像</p><p>I&#x3D;im2bw（j，level）</p><p>Level表示灰度阈值，取值范围0~1（即0.n），表示阈值取自原图像灰度范围的n%</p><p>3.imresize</p><p>改变图像的大小</p><p>I&#x3D;imresize（j，[m n]）将图像j大小调整为m行n列</p><p><strong>图像运算</strong></p><p>1.imadd</p><p>两幅图像相加，要求同样大小，同种数据类型</p><p>Z&#x3D;imadd（x，y）表示图像x+y</p><p>2.imsubstract</p><p>两幅图像相减，要求同样大小，同种数据类型</p><p>Z&#x3D;imsubtract（x，y） 表示图像x-y</p><p>3.immultiply</p><p>Z&#x3D;immultiply（x，y） 表示图像x*y</p><p>4.imdivide</p><p>Z&#x3D;imdivide（x，y） 表示图像x&#x2F;y</p><p>5.m &#x3D; imadjust(a,[,],[0.5;1]) ;%图像变亮</p><p>n &#x3D; imadjust(a,[,],[0;0.5]) ;%图像变暗</p><p>g&#x3D;255-a;%负片效果</p><p><strong>图像的增强</strong></p><p>1、 直方图</p><p>imhist函数用于数字图像的直方图计算或显示，</p><p>imhist(I, n)计算和显示图像I的直方图，n为指定的灰度级数目，默认为256。如果I是二值图像，那么n仅有两个值。</p><p>[counts,x] &#x3D; imhist(…)返回直方图数据向量counts，相应的色彩值向量x。</p><p>如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>imhist(i);</p><p>2 、直方图均衡化</p><p>histeq函数用于数字图像的直方图均衡化，</p><p>J &#x3D; histeq(I, n) 均衡化后的级数n，缺省值为64。</p><p>J &#x3D; histeq(I, hgram) “直方图规定化”，即将原是图象 I 的直方图变换成用户指定的向量 hgram (即指定另一幅图像的直方图数据向量)。</p><p>如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;histeq(i，N);对图像i执行均衡化，得到具有N个灰度级的灰度图像j，N缺省值为64</p><p>3、 灰度调整</p><p>imadjust函数用于数字图像的灰度或颜色调整，</p><p>J &#x3D; imadjust(I) 将灰度图像 I 中的亮度值映射到 J 中的新值并使 1％ 的数据是在低高强度和饱和，这增加了输出图像 J 的对比度值。 </p><p>J &#x3D; imadjust(I,[low_in; high_in],[low_out; high_out])<br> 将图像I中的亮度值映射到J中的新值，即将low_in至high_in之间的值映射到low_out至high_out之间的值。low_in 以下与 high_in 以上的值被剪切掉了，也就是说，low_in 以下的值映射到 low_out，high_in 以上的值映射到high_out。它们都可以使用空的矩阵[]，默认值是[0 1]。 </p><p>如：</p><p>i&#x3D;imread(‘e:\w01.tif’);</p><p>j&#x3D;imadjust(i,[0.3,0.7],[]);将图像i转换为j，使灰度值从0.3<del>0.7与缺省值0</del>1相匹配</p><p><strong>运算函数</strong></p><p>1、Zeros生成全0数组或矩阵</p><p>如 B &#x3D; zeros(m,n) or B &#x3D; zeros([m n]) 返回一个 m*n 全0矩阵</p><p>2、取整函数</p><p>floor最小取整函数</p><p>round四舍五入取整函数</p><p>ceil最大取整函数</p><p>如a &#x3D; [-1.9, -0.2, 3.4, 5.6, 7.0, 2.4+3.6i]</p><p>I&#x3D;round(a)</p><p>I &#x3D;[ -2  0  3  6 7  2+ 4i]</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1、读入一幅RGB图像，变换为灰度图像和二值图像，并在同一个窗口内分成三个子窗口来分别显示RGB图像和灰度图像，注上文字标题"><a href="#1、读入一幅RGB图像，变换为灰度图像和二值图像，并在同一个窗口内分成三个子窗口来分别显示RGB图像和灰度图像，注上文字标题" class="headerlink" title="1、读入一幅RGB图像，变换为灰度图像和二值图像，并在同一个窗口内分成三个子窗口来分别显示RGB图像和灰度图像，注上文字标题"></a>1、读入一幅RGB图像，变换为灰度图像和二值图像，并在同一个窗口内分成三个子窗口来分别显示RGB图像和灰度图像，注上文字标题</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">X=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line">I=rgb2gray(X);</span><br><span class="line"></span><br><span class="line">BW1 = im2bw(X);</span><br><span class="line">BW2 = im2bw(X,<span class="number">0.3</span>);</span><br><span class="line">BW3 = im2bw(X,<span class="number">0.6</span>);</span><br><span class="line">set(<span class="number">0</span>,<span class="string">&#x27;defaultFigurePosition&#x27;</span>,[<span class="number">100</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">500</span>]);<span class="comment">%图框位置%</span></span><br><span class="line">set(<span class="number">0</span>,<span class="string">&#x27;defaultFigureColor&#x27;</span>,[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]);<span class="comment">%背景颜色%</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>),imshow(X);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>),imshow(I);</span><br><span class="line">title(<span class="string">&#x27;灰度图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>),imshow(BW1);</span><br><span class="line">title(<span class="string">&#x27;二值图像&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8001.png" alt="image-20211123153826448"></p><h3 id="2、对两幅不同图像执行加、减、乘、除操作，在同一个窗口内分成五个子窗口来分别显示，注上文字标题"><a href="#2、对两幅不同图像执行加、减、乘、除操作，在同一个窗口内分成五个子窗口来分别显示，注上文字标题" class="headerlink" title="2、对两幅不同图像执行加、减、乘、除操作，在同一个窗口内分成五个子窗口来分别显示，注上文字标题"></a>2、对两幅不同图像执行加、减、乘、除操作，在同一个窗口内分成五个子窗口来分别显示，注上文字标题</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line">I=imresize(<span class="built_in">i</span>,[<span class="number">800</span>,<span class="number">800</span>]);<span class="comment">%将图像j大小调整为m行n列</span></span><br><span class="line"></span><br><span class="line">q=imread(<span class="string">&#x27;123.jpg&#x27;</span>);</span><br><span class="line">Q=imresize(q,[<span class="number">800</span>,<span class="number">800</span>]);<span class="comment">%将图像j大小调整为m行n列</span></span><br><span class="line"></span><br><span class="line">Z1=imadd(I,Q)<span class="comment">%表示图像x+y</span></span><br><span class="line">Z2=imsubtract(I,Q)<span class="comment">%表示图像x-y</span></span><br><span class="line">Z3=immultiply(I,Q)<span class="comment">%表示图像x*y</span></span><br><span class="line">Z4=imdivide(I,Q)<span class="comment">%表示图像x/y</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">321</span>),imshow(<span class="built_in">i</span>);</span><br><span class="line">title(<span class="string">&#x27;原图像i&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">322</span>),imshow(q);</span><br><span class="line">title(<span class="string">&#x27;原图像q&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">323</span>),imshow(Z1);</span><br><span class="line">title(<span class="string">&#x27;加法图像&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">324</span>),imshow(Z2);</span><br><span class="line">title(<span class="string">&#x27;减法图像&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">325</span>),imshow(Z3);</span><br><span class="line">title(<span class="string">&#x27;乘法图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">326</span>),imshow(Z4);</span><br><span class="line">title(<span class="string">&#x27;除法像&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%AE%9E%E9%AA%8C%E4%B8%8002.png" alt="image-20211123154000572"></p><h3 id="3、对一幅图像进行灰度变化，实现图像变亮、变暗和负片效果，在同一个窗口内分成四个子窗口来分别显示，注上文字标题"><a href="#3、对一幅图像进行灰度变化，实现图像变亮、变暗和负片效果，在同一个窗口内分成四个子窗口来分别显示，注上文字标题" class="headerlink" title="3、对一幅图像进行灰度变化，实现图像变亮、变暗和负片效果，在同一个窗口内分成四个子窗口来分别显示，注上文字标题"></a>3、对一幅图像进行灰度变化，实现图像变亮、变暗和负片效果，在同一个窗口内分成四个子窗口来分别显示，注上文字标题</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">l=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line">m=imadjust(l,[,],[<span class="number">0.5</span>;<span class="number">1</span>]);<span class="comment">%图像变亮</span></span><br><span class="line">n=imadjust(l,[,],[<span class="number">0</span>;<span class="number">0.5</span>]);<span class="comment">%图像变暗</span></span><br><span class="line">g=<span class="number">255</span>-l;<span class="comment">%负片</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">221</span>),imshow(l);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">222</span>),imshow(m);</span><br><span class="line">title(<span class="string">&#x27;图像变亮&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">223</span>),imshow(n);</span><br><span class="line">title(<span class="string">&#x27;图像变暗&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),subplot(<span class="number">224</span>),imshow(g);</span><br><span class="line">title(<span class="string">&#x27;负片效果&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%AE%9E%E9%AA%8C%E4%B8%8003.png" alt="image-20211123154310590"></p><h3 id="4、熟悉数字图像处理常用函数的使用，调出帮助文档查看其各种不同用法"><a href="#4、熟悉数字图像处理常用函数的使用，调出帮助文档查看其各种不同用法" class="headerlink" title="4、熟悉数字图像处理常用函数的使用，调出帮助文档查看其各种不同用法"></a>4、熟悉数字图像处理常用函数的使用，调出帮助文档查看其各种不同用法</h3><p>方法：选择函数（函数所在区变暗），点右键弹出菜单，选择“Help on Selection”</p><h3 id="5、对一幅图像进行2倍、4倍、8倍和16倍减采样，显示结果"><a href="#5、对一幅图像进行2倍、4倍、8倍和16倍减采样，显示结果" class="headerlink" title="5、对一幅图像进行2倍、4倍、8倍和16倍减采样，显示结果"></a>5、对一幅图像进行2倍、4倍、8倍和16倍减采样，显示结果</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">q=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line">w=rgb2gray(q);</span><br><span class="line"><span class="keyword">for</span> e=<span class="number">1</span>:<span class="number">4</span>;</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">[m,n]=<span class="built_in">size</span>(w);</span><br><span class="line">Q=<span class="built_in">zeros</span>(<span class="built_in">floor</span>(m/(e)),<span class="built_in">floor</span>(n/(e*<span class="number">2</span>)));</span><br><span class="line">a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:(e):m;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:(<span class="number">2</span>*e):n;</span><br><span class="line">Q(a,b)=w(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">b=b+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a=a+<span class="number">1</span>;</span><br><span class="line">b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">imshow(uint8(Q));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%AE%9E%E9%AA%8C%E4%B8%8005.png" alt="image-20211123162937717"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8006.png" alt="image-20211123162951154"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%AE%9E%E9%AA%8C%E4%B8%8007.png" alt="image-20211123163002641"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8008.png" alt="image-20211123163010173"></p><h3 id="6、显示一幅灰度图像a，改变图像亮度使其整体变暗得到图像b，显示两幅图像的直方图"><a href="#6、显示一幅灰度图像a，改变图像亮度使其整体变暗得到图像b，显示两幅图像的直方图" class="headerlink" title="6、显示一幅灰度图像a，改变图像亮度使其整体变暗得到图像b，显示两幅图像的直方图"></a>6、显示一幅灰度图像a，改变图像亮度使其整体变暗得到图像b，显示两幅图像的直方图</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line"><span class="built_in">i</span>=rgb2gray(<span class="built_in">i</span>);</span><br><span class="line">o=imadjust(<span class="built_in">i</span>,[,],[<span class="number">0</span>;<span class="number">0.5</span>]);<span class="comment">%图像变暗</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);imhist(<span class="built_in">i</span>),title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);imhist(o),title(<span class="string">&#x27;变暗图像&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8009.png" alt="image-20211123164042741"></p><h3 id="7、对图像b进行直方图均衡化，显示结果图像和对应直方图"><a href="#7、对图像b进行直方图均衡化，显示结果图像和对应直方图" class="headerlink" title="7、对图像b进行直方图均衡化，显示结果图像和对应直方图"></a>7、对图像b进行直方图均衡化，显示结果图像和对应直方图</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line"><span class="built_in">i</span>=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line"><span class="built_in">i</span>=rgb2gray(<span class="built_in">i</span>);</span><br><span class="line"><span class="built_in">j</span>=histeq(<span class="built_in">i</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(<span class="built_in">i</span>),title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(<span class="built_in">j</span>),title(<span class="string">&#x27;均衡化图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);imhist(<span class="built_in">i</span>),title(<span class="string">&#x27;原图像直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);imhist(<span class="built_in">j</span>),title(<span class="string">&#x27;均衡化图像的直方图&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%AE%9E%E9%AA%8C%E4%B8%8010.png" alt="image-20211123165154745"></p><h3 id="8、读入图像c，执行直方图规定化，使图像a的灰度分布与c大致相同，显示变换后图像及对应直方图"><a href="#8、读入图像c，执行直方图规定化，使图像a的灰度分布与c大致相同，显示变换后图像及对应直方图" class="headerlink" title="8、读入图像c，执行直方图规定化，使图像a的灰度分布与c大致相同，显示变换后图像及对应直方图"></a>8、读入图像c，执行直方图规定化，使图像a的灰度分布与c大致相同，显示变换后图像及对应直方图</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close all;</span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">c=imread(<span class="string">&#x27;屏保.jpg&#x27;</span>);</span><br><span class="line">c=rgb2gray(c);</span><br><span class="line"><span class="built_in">j</span>=histeq(c,<span class="number">64</span>);</span><br><span class="line">[counts,x]=imhist(<span class="built_in">j</span>);</span><br><span class="line"></span><br><span class="line">a=imread(<span class="string">&#x27;123.jpg&#x27;</span>);</span><br><span class="line">a=rgb2gray(a);</span><br><span class="line">k=histeq(a,counts);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(c),title(<span class="string">&#x27;原图像c&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(a),title(<span class="string">&#x27;原图像a&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);imhist(c),title(<span class="string">&#x27;原图像c直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imhist(a),title(<span class="string">&#x27;原图像a直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);imhist(<span class="built_in">j</span>),title(<span class="string">&#x27;原图像c均衡化直方图&#x27;</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>);imhist(k),title(<span class="string">&#x27;原图像a均衡化直方图&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>图像相加，最有意义的应用就是针对带噪图像的多帧叠加平均降噪</p><p>然后是图像相减，它的主要意义是增强图像间的差别，在医学造影方面有着非常重要的作用，比如数字减影血管造影</p><p>最后是乘除关系，它的主要用途是校正阴影</p>]]></content>
      
      
      <categories>
          
          <category> 数字图像MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora+GitHub+PicGo图床教学</title>
      <link href="/posts/61513/"/>
      <url>/posts/61513/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在发布博客，CSDN等平台，markdown标签书写的笔记中，图片路径为本地盘符，四五张图片手动上传即可，或者使用相对路径，打包分享给别人，当图片三四十张就会很麻烦，所以将图片转为外部链接可以很好的解决这个问题，同时减少本地内存</p><ul><li><p>这里以github创建仓库作为图片托管作例子，托管也可以使用__SM.MS图床、腾讯云COS、七牛图床、Imgur图床、阿里云OSS、又拍云图床__，根据个人习惯去选择，github加载慢可以参考本人这篇<a href="https://blog.csdn.net/qq_49488584/article/details/121527822">GitHub修改host_鬼才小张同学的博客-CSDN博客</a></p></li><li><p>安装PicGo配置图床进行图片的上传</p><p>PicGo云盘链接</p><p>链接：<a href="https://pan.baidu.com/s/1IyzgLo7ep-LtKXmPnWPgZw">https://pan.baidu.com/s/1IyzgLo7ep-LtKXmPnWPgZw</a><br>提取码：2580 </p><p>最新版也可以去Github自行下载</p><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></p></li><li><p>Typora提供了图像上传配置，进行关联即可实现图片在线上传</p><p>Typora安装包</p><p>链接：<a href="https://pan.baidu.com/s/1YNattpWg2oK5VaLn1me2UA">https://pan.baidu.com/s/1YNattpWg2oK5VaLn1me2UA</a><br>提取码：2580 </p><p>官网：<a href="https://www.typora.io/#download">Typora </a></p></li></ul><h1 id="1-使用GitHub创建图床仓库"><a href="#1-使用GitHub创建图床仓库" class="headerlink" title="1.使用GitHub创建图床仓库"></a>1.使用GitHub创建图床仓库</h1><p><strong>第一步</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A01.png" alt="image-20211124235159358"></p><p><strong>第二步</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A02.png" alt="image-20211124235756278"></p><p><strong>第三步：</strong></p><p>创建一个存放图片的目录，可以跳过此步(没有创建的话，默认路径为img根路径)</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A10.png" alt="image-20211125000310814"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A04.png" alt="image-20211125000607685"></p><p><strong>第四步:</strong></p><p>创建一个token，依次选择<code>Settings —&gt; Developer settings—&gt; Personal access tokens</code>，点击<code>Generate new token</code>创建token。</p><p>特别&#x3D;&#x3D;注意&#x3D;&#x3D;：创建成功后，token只显示一次，复制保存起来，之后配置PicGo需要使用（忘记保存第四步重复一遍即可）</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A05.png" alt="image-20211125001358025"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A03.png" alt="image-20211125001848649"></p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A14.png" alt="image-20220215190754733"></p><h1 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2.配置PicGo"></a>2.配置PicGo</h1><p><strong>1.</strong> 自定义安装PicGo，首先选择“PicGo设置”，点击“设置Server”，开启Server，设置监听地址为主机127.0.0.1，端口号为36677</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A07.png" alt="image-20211125002005248"></p><p><strong>2.</strong> 将“时间戳重命名”开启（也可以将上传前重命名开启，自己命名图片名称。这里重命名优先权大于时间命名），避免上传图片重名</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A08.png" alt="image-20211125002134044"></p><p><strong>3.</strong> 选择“图床设置”—&gt;“GitHub图床”，进行设置</p><p>仓库名： 使用 用户名 + 仓库名</p><p>分支名： 默认为master或main（看仓库具体分支是什么）</p><p>token： 使用上述创建的token</p><p>存储路径：这里使用上述创建仓库的img目录</p><p>自定义域名：不必填，可使用格式：<a href="https://raw.githubusercontent.com/[%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]/master">https://raw.githubusercontent.com/[用户名]/[仓库名]/master</a></p><p>但是自己平常访问Github经常404的话建议改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名/文件路径</span><br></pre></td></tr></table></figure><p>对于使用存储在GitHub上面的<strong>静态文件</strong>，可使用jsDelivr CDN快速访问</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A00.png" alt="image-20211125003240664"></p><p><strong>4.</strong> 选择对应的图床<img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A13.png" alt="image-20211125004359167"></p><h1 id="3-Typora配置"><a href="#3-Typora配置" class="headerlink" title="3.Typora配置"></a>3.Typora配置</h1><p><strong>1.</strong> 打开Typora，点击 文件—&gt;偏好设置—&gt;图像，进行配置PigGo</p><p>上传服务：选择PicGo（app）</p><p>PicGo路径：选择到PicGo.exe</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A09.png" alt="image-20211125004102617"></p><p>出现下图即配置成功</p><p><img src="https://cdn.jsdelivr.net/gh/GC-ZF/Typora-Img/typora+GitHub+PicGo%E5%9B%BE%E5%BA%8A%E6%95%99%E5%AD%A6/%E5%9B%BE%E5%BA%8A11.png" alt="image-20211125004216106"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_41460383/article/details/118022080?ops_request_misc=%7B%22request_id%22:%22163773889016780271521169%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=163773889016780271521169&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-118022080.first_rank_v2_pc_rank_v29&utm_term=typora+github&spm=1018.2226.3001.4187">typora+github+PicGo 实现图片上传管理_咕噜喝饮料的语-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> typora </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门markdown使用教程(Typora)</title>
      <link href="/posts/4206/"/>
      <url>/posts/4206/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*倾斜*</span><br><span class="line">**加粗**</span><br><span class="line">***斜体加粗***</span><br><span class="line">_斜体文本_</span><br><span class="line">__粗体文本__</span><br><span class="line">___粗斜体文本___</span><br><span class="line">~~删除线~~</span><br><span class="line">==高亮==</span><br><span class="line">我是^上标^</span><br><span class="line">我是~下标~（注意英文字符)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span style=&#x27;color:文字颜色;background:背景颜色;font-size:文字大小;font-family:字体;&#x27;&gt;文字&lt;/span&gt;。颜色可以使用RGB、英文、#十六进制</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font size=6 color=&quot;violet&quot;&gt;字体颜色为紫罗兰，大小为6&lt;/font&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p align=&quot;left/right/center&quot;&gt;左对齐&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+++</span><br><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line">[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure><p>创建脚注格式类似这样 <a href="122">^RUNOOB</a></p><h1 id="页面内跳转"><a href="#页面内跳转" class="headerlink" title="页面内跳转"></a>页面内跳转</h1><p>需要按住ctrl点击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[内容](#标题)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#第二种跳转&quot;&gt;内容&lt;/a&gt;</span><br><span class="line">&lt;a name=&quot;第二种跳转&quot;&gt;内容&lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="页面链接地址"><a href="#页面链接地址" class="headerlink" title="页面链接地址"></a>页面链接地址</h1><p>&#x3D;&#x3D;网页&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[百度](www.baidu.com)</span><br><span class="line">&lt;www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;本地文件&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[打开入门markdown](./LinkTest.md) 绝对地址相对地址都可以</span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;img/1.jpg&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;float:left/right/center&quot;/&gt;</span><br><span class="line"></span><br><span class="line">![本地png图片](./img/Picturet.png)</span><br><span class="line">本地图片可以直接复制</span><br><span class="line"></span><br><span class="line">![网络图片](http://static.runoob.com/images/runoob-logo.png &quot;备注&quot;)</span><br><span class="line">网页右击查看图片链接即可</span><br></pre></td></tr></table></figure><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=754115200&amp;bvid=BV1kk4y1m7sT&amp;cid=220773148&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; height=&quot;500&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种内联公式：$数学公式$</span><br><span class="line">第二种外联公式(公式内换行\\)：</span><br><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br><span class="line">我是^上标^</span><br><span class="line">我是~下标~（注意英文字符)</span><br><span class="line">根号\sqrt&#123;&#125;   \sqrt[]&#123;&#125;</span><br><span class="line">$下水平线：\underline&#123;a+b&#125;$</span><br><span class="line">$上水平线：\overline&#123;a+b&#125;$</span><br><span class="line">上下水平大括号:</span><br><span class="line">\overbrace&#123;&#125;   \underbrace&#123;&#125;</span><br><span class="line">在括号上添加说明:</span><br><span class="line">$\overbrace&#123;x_1+x_2+x_3&#125;^&#123;3个元素&#125;$</span><br><span class="line">$\underbrace&#123;x_1+x_2+x_3&#125;_&#123;3个元素&#125;$</span><br></pre></td></tr></table></figure><p>其他<a href="https://zhuanlan.zhihu.com/p/261750408?utm_source=wechat_session">Typora数学公式汇总（Markdown） - 知乎 (zhihu.com)</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无序列表+、-、*d</span><br><span class="line">+ 一二三四五</span><br><span class="line"> - 上山打老虎</span><br><span class="line">  * 老虎没达到</span><br><span class="line">   + 打到小松鼠</span><br><span class="line">有序列表</span><br><span class="line">1.一二三四五</span><br><span class="line">2.上山打老虎</span><br><span class="line">3.老虎没达到</span><br><span class="line">4.打到小松鼠</span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plaintext"><figcaption><span>Mon    | TUE    | WED    | THU    |  FRI   |</span></figcaption><table><tr><td class="code"><pre><span class="line">| ------ | ------ | ------ | ------ | :----: |</span><br><span class="line">| 上山   | 上山   | 上山   | 上山   |  上山  |</span><br><span class="line">| 打老虎 | 打老虎 | 打老虎 | 打老虎 | 打老虎 |```</span><br><span class="line"></span><br><span class="line">不在代码模式下，按回车</span><br><span class="line">```</span><br><span class="line">:-表示左对齐</span><br><span class="line">-:表示右对齐</span><br><span class="line">:-:表示中间对齐</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;上山大老虎</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;老虎没达到</span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;打到小松鼠</span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`代码`</span><br></pre></td></tr></table></figure><p>代码框</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``` </span><br><span class="line">我是代码框</span><br><span class="line">```</span><br></pre></td></tr></table></figure><h1 id="插入表情"><a href="#插入表情" class="headerlink" title="插入表情"></a>插入表情</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们可以使用:emoji:的语法来插入表情，比如：</span><br><span class="line">:happy:的语法为:happy:</span><br><span class="line">🦀的语法为:crab:</span><br><span class="line">🐴的语法为:horse:</span><br></pre></td></tr></table></figure><h1 id="插入目录"><a href="#插入目录" class="headerlink" title="插入目录"></a>插入目录</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当我们为使用标题将文分章节后，可以在输入[toc]命令的地方自动根据标题生成目录</span><br></pre></td></tr></table></figure><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目前支持的 HTML 元素有：&lt;kbd&gt; 粗体&lt;b&gt; 斜体&lt;i&gt; 或 &lt;em&gt; 上角标&lt;sup&gt; 换行&lt;br&gt; 块元素&lt;div&gt; 行内元素&lt;span&gt; 段落&lt;p&gt; </span><br><span class="line">自定义文本&lt;font&gt; 图片&lt;img&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;kbd&gt;Alt&lt;/kbd&gt;</span><br></pre></td></tr></table></figure><p><kbd>Alt</kbd> </p><h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p>任务列表 - [空格]空格</p><figure class="highlight plaintext"><figcaption><span>[ ]</span></figcaption><table><tr><td class="code"><pre><span class="line">任务列表 - []</span><br></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="纵向流程图"><a href="#纵向流程图" class="headerlink" title="纵向流程图"></a>纵向流程图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure><h2 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><h2 id="标准流程图-纵向"><a href="#标准流程图-纵向" class="headerlink" title="标准流程图 纵向"></a>标准流程图 纵向</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">o=&gt;operation: 处理</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="标准流程图-横向"><a href="#标准流程图-横向" class="headerlink" title="标准流程图 横向"></a>标准流程图 横向</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure><h2 id="UML时序图源码样例"><a href="#UML时序图源码样例" class="headerlink" title="UML时序图源码样例"></a>UML时序图源码样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><h2 id="UML时序图源码复杂样例"><a href="#UML时序图源码复杂样例" class="headerlink" title="UML时序图源码复杂样例"></a>UML时序图源码复杂样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><h2 id="UML标准时序图样例"><a href="#UML标准时序图样例" class="headerlink" title="UML标准时序图样例"></a>UML标准时序图样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">    [*] --&gt; s1</span><br><span class="line">    s1 --&gt; [*]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">    [*] --&gt; s1</span><br><span class="line">    s1 --&gt; [*]</span><br></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>语法解释：<code>&lt;|--</code> 表示继承，<code>+</code> 表示 <code>public</code>，<code>-</code> 表示 <code>private</code>，学过 Java 的应该都知道。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Animal &lt;|-- Duck</span><br><span class="line">      Animal &lt;|-- Fish</span><br><span class="line">      Animal &lt;|-- Zebra</span><br><span class="line">      Animal : +int age</span><br><span class="line">      Animal : +String gender</span><br><span class="line">      Animal: +isMammal()</span><br><span class="line">      Animal: +mate()</span><br><span class="line">      class Duck&#123;</span><br><span class="line">          +String beakColor</span><br><span class="line">          +swim()</span><br><span class="line">          +quack()</span><br><span class="line">      &#125;</span><br><span class="line">      class Fish&#123;</span><br><span class="line">          -int sizeInFeet</span><br><span class="line">          -canEat()</span><br><span class="line">      &#125;</span><br><span class="line">      class Zebra&#123;</span><br><span class="line">          +bool is_wild</span><br><span class="line">          +run()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Animal &lt;|-- Duck</span><br><span class="line">      Animal &lt;|-- Fish</span><br><span class="line">      Animal &lt;|-- Zebra</span><br><span class="line">      Animal : +int age</span><br><span class="line">      Animal : +String gender</span><br><span class="line">      Animal: +isMammal()</span><br><span class="line">      Animal: +mate()</span><br><span class="line">      class Duck&#123;</span><br><span class="line">          +String beakColor</span><br><span class="line">          +swim()</span><br><span class="line">          +quack()</span><br><span class="line">      &#125;</span><br><span class="line">      class Fish&#123;</span><br><span class="line">          -int sizeInFeet</span><br><span class="line">          -canEat()</span><br><span class="line">      &#125;</span><br><span class="line">      class Zebra&#123;</span><br><span class="line">          +bool is_wild</span><br><span class="line">          +run()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><p>甘特图一般用来表示项目的计划排期，目前在工作中经常会用到。</p><p>语法也非常简单，从上到下依次是图片标题、日期格式、项目、项目细分的任务。</p><p>crit表示加红框，已做done，正在做active，未作after</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 工作计划</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2020-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2020-01-12  , 12d</span><br><span class="line">    another task      : 24d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 工作计划</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2020-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2020-01-12  , 12d</span><br><span class="line">    another task      : 24d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>饼图使用 <code>pie</code> 表示，标题下面分别是区域名称及其百分比。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ul><li>ctrl+ 增加标题等级</li></ul><ul><li>ctrl+shift+加号&#x2F;减号可以对整体页面进行放大&#x2F;缩小</li><li>键盘右侧home定位到第一行，end定位到文章末尾</li><li>ctrl+shift+【  有序列表，ctrl+shift+】对段落标小点（无序列表）</li><li>ctrl+横排数字键n，可将字体设置为n级标题</li></ul><ul><li>选择对应语言，shift+tab整理代码</li></ul><h1 id="Pandoc"><a href="#Pandoc" class="headerlink" title="Pandoc"></a>Pandoc</h1><p>利用插件转出PDF、word、图片、HTML、EPUB等格式</p><p>链接：<a href="https://pan.baidu.com/s/1XKQJsqFm5j43L8udV9KhTw">https://pan.baidu.com/s/1XKQJsqFm5j43L8udV9KhTw</a><br>提取码：2580 </p><p>安装软件</p><p>1）首先打开下载好的安装包 pandoc-2.0.1.1-windows.msi</p><p>2）不用更改设置，傻瓜式操作，下一步下一步完成</p><p>3）软件安装成功</p><p>测试是否安装成功<br>1）打开CMD命令提示符</p><p>2）输入pandoc –version命令</p><p>3）会显示出pandoc的版本信息，则说明安装成功了</p><p>之后在typora配置pandon文件路径,这个是我的默认路径(C:\Users\86158\AppData\Local\Pandoc\pandoc.exe)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
